package dockerGateway

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/docker/docker/client.CommonAPIClient -o ./common_api_client_mock_test.go

import (
	"context"
	"io"
	"net"
	"net/http"
	"sync"
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/docker/docker/api/types"
	containertypes "github.com/docker/docker/api/types/container"
	"github.com/docker/docker/api/types/events"
	"github.com/docker/docker/api/types/filters"
	"github.com/docker/docker/api/types/image"
	networktypes "github.com/docker/docker/api/types/network"
	"github.com/docker/docker/api/types/registry"
	"github.com/docker/docker/api/types/swarm"
	volumetypes "github.com/docker/docker/api/types/volume"
	"github.com/gojuno/minimock/v3"
)

// CommonAPIClientMock implements client.CommonAPIClient
type CommonAPIClientMock struct {
	t minimock.Tester

	funcBuildCachePrune          func(ctx context.Context, opts types.BuildCachePruneOptions) (bp1 *types.BuildCachePruneReport, err error)
	inspectFuncBuildCachePrune   func(ctx context.Context, opts types.BuildCachePruneOptions)
	afterBuildCachePruneCounter  uint64
	beforeBuildCachePruneCounter uint64
	BuildCachePruneMock          mCommonAPIClientMockBuildCachePrune

	funcBuildCancel          func(ctx context.Context, id string) (err error)
	inspectFuncBuildCancel   func(ctx context.Context, id string)
	afterBuildCancelCounter  uint64
	beforeBuildCancelCounter uint64
	BuildCancelMock          mCommonAPIClientMockBuildCancel

	funcClientVersion          func() (s1 string)
	inspectFuncClientVersion   func()
	afterClientVersionCounter  uint64
	beforeClientVersionCounter uint64
	ClientVersionMock          mCommonAPIClientMockClientVersion

	funcClose          func() (err error)
	inspectFuncClose   func()
	afterCloseCounter  uint64
	beforeCloseCounter uint64
	CloseMock          mCommonAPIClientMockClose

	funcConfigCreate          func(ctx context.Context, config swarm.ConfigSpec) (c2 types.ConfigCreateResponse, err error)
	inspectFuncConfigCreate   func(ctx context.Context, config swarm.ConfigSpec)
	afterConfigCreateCounter  uint64
	beforeConfigCreateCounter uint64
	ConfigCreateMock          mCommonAPIClientMockConfigCreate

	funcConfigInspectWithRaw          func(ctx context.Context, name string) (c2 swarm.Config, ba1 []byte, err error)
	inspectFuncConfigInspectWithRaw   func(ctx context.Context, name string)
	afterConfigInspectWithRawCounter  uint64
	beforeConfigInspectWithRawCounter uint64
	ConfigInspectWithRawMock          mCommonAPIClientMockConfigInspectWithRaw

	funcConfigList          func(ctx context.Context, options types.ConfigListOptions) (ca1 []swarm.Config, err error)
	inspectFuncConfigList   func(ctx context.Context, options types.ConfigListOptions)
	afterConfigListCounter  uint64
	beforeConfigListCounter uint64
	ConfigListMock          mCommonAPIClientMockConfigList

	funcConfigRemove          func(ctx context.Context, id string) (err error)
	inspectFuncConfigRemove   func(ctx context.Context, id string)
	afterConfigRemoveCounter  uint64
	beforeConfigRemoveCounter uint64
	ConfigRemoveMock          mCommonAPIClientMockConfigRemove

	funcConfigUpdate          func(ctx context.Context, id string, version swarm.Version, config swarm.ConfigSpec) (err error)
	inspectFuncConfigUpdate   func(ctx context.Context, id string, version swarm.Version, config swarm.ConfigSpec)
	afterConfigUpdateCounter  uint64
	beforeConfigUpdateCounter uint64
	ConfigUpdateMock          mCommonAPIClientMockConfigUpdate

	funcContainerAttach          func(ctx context.Context, container string, options types.ContainerAttachOptions) (h1 types.HijackedResponse, err error)
	inspectFuncContainerAttach   func(ctx context.Context, container string, options types.ContainerAttachOptions)
	afterContainerAttachCounter  uint64
	beforeContainerAttachCounter uint64
	ContainerAttachMock          mCommonAPIClientMockContainerAttach

	funcContainerCommit          func(ctx context.Context, container string, options types.ContainerCommitOptions) (i1 types.IDResponse, err error)
	inspectFuncContainerCommit   func(ctx context.Context, container string, options types.ContainerCommitOptions)
	afterContainerCommitCounter  uint64
	beforeContainerCommitCounter uint64
	ContainerCommitMock          mCommonAPIClientMockContainerCommit

	funcContainerCreate          func(ctx context.Context, config *containertypes.Config, hostConfig *containertypes.HostConfig, networkingConfig *networktypes.NetworkingConfig, containerName string) (c2 containertypes.ContainerCreateCreatedBody, err error)
	inspectFuncContainerCreate   func(ctx context.Context, config *containertypes.Config, hostConfig *containertypes.HostConfig, networkingConfig *networktypes.NetworkingConfig, containerName string)
	afterContainerCreateCounter  uint64
	beforeContainerCreateCounter uint64
	ContainerCreateMock          mCommonAPIClientMockContainerCreate

	funcContainerDiff          func(ctx context.Context, container string) (ca1 []containertypes.ContainerChangeResponseItem, err error)
	inspectFuncContainerDiff   func(ctx context.Context, container string)
	afterContainerDiffCounter  uint64
	beforeContainerDiffCounter uint64
	ContainerDiffMock          mCommonAPIClientMockContainerDiff

	funcContainerExecAttach          func(ctx context.Context, execID string, config types.ExecStartCheck) (h1 types.HijackedResponse, err error)
	inspectFuncContainerExecAttach   func(ctx context.Context, execID string, config types.ExecStartCheck)
	afterContainerExecAttachCounter  uint64
	beforeContainerExecAttachCounter uint64
	ContainerExecAttachMock          mCommonAPIClientMockContainerExecAttach

	funcContainerExecCreate          func(ctx context.Context, container string, config types.ExecConfig) (i1 types.IDResponse, err error)
	inspectFuncContainerExecCreate   func(ctx context.Context, container string, config types.ExecConfig)
	afterContainerExecCreateCounter  uint64
	beforeContainerExecCreateCounter uint64
	ContainerExecCreateMock          mCommonAPIClientMockContainerExecCreate

	funcContainerExecInspect          func(ctx context.Context, execID string) (c2 types.ContainerExecInspect, err error)
	inspectFuncContainerExecInspect   func(ctx context.Context, execID string)
	afterContainerExecInspectCounter  uint64
	beforeContainerExecInspectCounter uint64
	ContainerExecInspectMock          mCommonAPIClientMockContainerExecInspect

	funcContainerExecResize          func(ctx context.Context, execID string, options types.ResizeOptions) (err error)
	inspectFuncContainerExecResize   func(ctx context.Context, execID string, options types.ResizeOptions)
	afterContainerExecResizeCounter  uint64
	beforeContainerExecResizeCounter uint64
	ContainerExecResizeMock          mCommonAPIClientMockContainerExecResize

	funcContainerExecStart          func(ctx context.Context, execID string, config types.ExecStartCheck) (err error)
	inspectFuncContainerExecStart   func(ctx context.Context, execID string, config types.ExecStartCheck)
	afterContainerExecStartCounter  uint64
	beforeContainerExecStartCounter uint64
	ContainerExecStartMock          mCommonAPIClientMockContainerExecStart

	funcContainerExport          func(ctx context.Context, container string) (r1 io.ReadCloser, err error)
	inspectFuncContainerExport   func(ctx context.Context, container string)
	afterContainerExportCounter  uint64
	beforeContainerExportCounter uint64
	ContainerExportMock          mCommonAPIClientMockContainerExport

	funcContainerInspect          func(ctx context.Context, container string) (c2 types.ContainerJSON, err error)
	inspectFuncContainerInspect   func(ctx context.Context, container string)
	afterContainerInspectCounter  uint64
	beforeContainerInspectCounter uint64
	ContainerInspectMock          mCommonAPIClientMockContainerInspect

	funcContainerInspectWithRaw          func(ctx context.Context, container string, getSize bool) (c2 types.ContainerJSON, ba1 []byte, err error)
	inspectFuncContainerInspectWithRaw   func(ctx context.Context, container string, getSize bool)
	afterContainerInspectWithRawCounter  uint64
	beforeContainerInspectWithRawCounter uint64
	ContainerInspectWithRawMock          mCommonAPIClientMockContainerInspectWithRaw

	funcContainerKill          func(ctx context.Context, container string, signal string) (err error)
	inspectFuncContainerKill   func(ctx context.Context, container string, signal string)
	afterContainerKillCounter  uint64
	beforeContainerKillCounter uint64
	ContainerKillMock          mCommonAPIClientMockContainerKill

	funcContainerList          func(ctx context.Context, options types.ContainerListOptions) (ca1 []types.Container, err error)
	inspectFuncContainerList   func(ctx context.Context, options types.ContainerListOptions)
	afterContainerListCounter  uint64
	beforeContainerListCounter uint64
	ContainerListMock          mCommonAPIClientMockContainerList

	funcContainerLogs          func(ctx context.Context, container string, options types.ContainerLogsOptions) (r1 io.ReadCloser, err error)
	inspectFuncContainerLogs   func(ctx context.Context, container string, options types.ContainerLogsOptions)
	afterContainerLogsCounter  uint64
	beforeContainerLogsCounter uint64
	ContainerLogsMock          mCommonAPIClientMockContainerLogs

	funcContainerPause          func(ctx context.Context, container string) (err error)
	inspectFuncContainerPause   func(ctx context.Context, container string)
	afterContainerPauseCounter  uint64
	beforeContainerPauseCounter uint64
	ContainerPauseMock          mCommonAPIClientMockContainerPause

	funcContainerRemove          func(ctx context.Context, container string, options types.ContainerRemoveOptions) (err error)
	inspectFuncContainerRemove   func(ctx context.Context, container string, options types.ContainerRemoveOptions)
	afterContainerRemoveCounter  uint64
	beforeContainerRemoveCounter uint64
	ContainerRemoveMock          mCommonAPIClientMockContainerRemove

	funcContainerRename          func(ctx context.Context, container string, newContainerName string) (err error)
	inspectFuncContainerRename   func(ctx context.Context, container string, newContainerName string)
	afterContainerRenameCounter  uint64
	beforeContainerRenameCounter uint64
	ContainerRenameMock          mCommonAPIClientMockContainerRename

	funcContainerResize          func(ctx context.Context, container string, options types.ResizeOptions) (err error)
	inspectFuncContainerResize   func(ctx context.Context, container string, options types.ResizeOptions)
	afterContainerResizeCounter  uint64
	beforeContainerResizeCounter uint64
	ContainerResizeMock          mCommonAPIClientMockContainerResize

	funcContainerRestart          func(ctx context.Context, container string, timeout *time.Duration) (err error)
	inspectFuncContainerRestart   func(ctx context.Context, container string, timeout *time.Duration)
	afterContainerRestartCounter  uint64
	beforeContainerRestartCounter uint64
	ContainerRestartMock          mCommonAPIClientMockContainerRestart

	funcContainerStart          func(ctx context.Context, container string, options types.ContainerStartOptions) (err error)
	inspectFuncContainerStart   func(ctx context.Context, container string, options types.ContainerStartOptions)
	afterContainerStartCounter  uint64
	beforeContainerStartCounter uint64
	ContainerStartMock          mCommonAPIClientMockContainerStart

	funcContainerStatPath          func(ctx context.Context, container string, path string) (c2 types.ContainerPathStat, err error)
	inspectFuncContainerStatPath   func(ctx context.Context, container string, path string)
	afterContainerStatPathCounter  uint64
	beforeContainerStatPathCounter uint64
	ContainerStatPathMock          mCommonAPIClientMockContainerStatPath

	funcContainerStats          func(ctx context.Context, container string, stream bool) (c2 types.ContainerStats, err error)
	inspectFuncContainerStats   func(ctx context.Context, container string, stream bool)
	afterContainerStatsCounter  uint64
	beforeContainerStatsCounter uint64
	ContainerStatsMock          mCommonAPIClientMockContainerStats

	funcContainerStop          func(ctx context.Context, container string, timeout *time.Duration) (err error)
	inspectFuncContainerStop   func(ctx context.Context, container string, timeout *time.Duration)
	afterContainerStopCounter  uint64
	beforeContainerStopCounter uint64
	ContainerStopMock          mCommonAPIClientMockContainerStop

	funcContainerTop          func(ctx context.Context, container string, arguments []string) (c2 containertypes.ContainerTopOKBody, err error)
	inspectFuncContainerTop   func(ctx context.Context, container string, arguments []string)
	afterContainerTopCounter  uint64
	beforeContainerTopCounter uint64
	ContainerTopMock          mCommonAPIClientMockContainerTop

	funcContainerUnpause          func(ctx context.Context, container string) (err error)
	inspectFuncContainerUnpause   func(ctx context.Context, container string)
	afterContainerUnpauseCounter  uint64
	beforeContainerUnpauseCounter uint64
	ContainerUnpauseMock          mCommonAPIClientMockContainerUnpause

	funcContainerUpdate          func(ctx context.Context, container string, updateConfig containertypes.UpdateConfig) (c2 containertypes.ContainerUpdateOKBody, err error)
	inspectFuncContainerUpdate   func(ctx context.Context, container string, updateConfig containertypes.UpdateConfig)
	afterContainerUpdateCounter  uint64
	beforeContainerUpdateCounter uint64
	ContainerUpdateMock          mCommonAPIClientMockContainerUpdate

	funcContainerWait          func(ctx context.Context, container string, condition containertypes.WaitCondition) (ch1 <-chan containertypes.ContainerWaitOKBody, ch2 <-chan error)
	inspectFuncContainerWait   func(ctx context.Context, container string, condition containertypes.WaitCondition)
	afterContainerWaitCounter  uint64
	beforeContainerWaitCounter uint64
	ContainerWaitMock          mCommonAPIClientMockContainerWait

	funcContainersPrune          func(ctx context.Context, pruneFilters filters.Args) (c2 types.ContainersPruneReport, err error)
	inspectFuncContainersPrune   func(ctx context.Context, pruneFilters filters.Args)
	afterContainersPruneCounter  uint64
	beforeContainersPruneCounter uint64
	ContainersPruneMock          mCommonAPIClientMockContainersPrune

	funcCopyFromContainer          func(ctx context.Context, container string, srcPath string) (r1 io.ReadCloser, c2 types.ContainerPathStat, err error)
	inspectFuncCopyFromContainer   func(ctx context.Context, container string, srcPath string)
	afterCopyFromContainerCounter  uint64
	beforeCopyFromContainerCounter uint64
	CopyFromContainerMock          mCommonAPIClientMockCopyFromContainer

	funcCopyToContainer          func(ctx context.Context, container string, path string, content io.Reader, options types.CopyToContainerOptions) (err error)
	inspectFuncCopyToContainer   func(ctx context.Context, container string, path string, content io.Reader, options types.CopyToContainerOptions)
	afterCopyToContainerCounter  uint64
	beforeCopyToContainerCounter uint64
	CopyToContainerMock          mCommonAPIClientMockCopyToContainer

	funcDaemonHost          func() (s1 string)
	inspectFuncDaemonHost   func()
	afterDaemonHostCounter  uint64
	beforeDaemonHostCounter uint64
	DaemonHostMock          mCommonAPIClientMockDaemonHost

	funcDialHijack          func(ctx context.Context, url string, proto string, meta map[string][]string) (c2 net.Conn, err error)
	inspectFuncDialHijack   func(ctx context.Context, url string, proto string, meta map[string][]string)
	afterDialHijackCounter  uint64
	beforeDialHijackCounter uint64
	DialHijackMock          mCommonAPIClientMockDialHijack

	funcDialer          func() (f1 func(context.Context) (net.Conn, error))
	inspectFuncDialer   func()
	afterDialerCounter  uint64
	beforeDialerCounter uint64
	DialerMock          mCommonAPIClientMockDialer

	funcDiskUsage          func(ctx context.Context) (d1 types.DiskUsage, err error)
	inspectFuncDiskUsage   func(ctx context.Context)
	afterDiskUsageCounter  uint64
	beforeDiskUsageCounter uint64
	DiskUsageMock          mCommonAPIClientMockDiskUsage

	funcDistributionInspect          func(ctx context.Context, image string, encodedRegistryAuth string) (d1 registry.DistributionInspect, err error)
	inspectFuncDistributionInspect   func(ctx context.Context, image string, encodedRegistryAuth string)
	afterDistributionInspectCounter  uint64
	beforeDistributionInspectCounter uint64
	DistributionInspectMock          mCommonAPIClientMockDistributionInspect

	funcEvents          func(ctx context.Context, options types.EventsOptions) (ch1 <-chan events.Message, ch2 <-chan error)
	inspectFuncEvents   func(ctx context.Context, options types.EventsOptions)
	afterEventsCounter  uint64
	beforeEventsCounter uint64
	EventsMock          mCommonAPIClientMockEvents

	funcHTTPClient          func() (cp1 *http.Client)
	inspectFuncHTTPClient   func()
	afterHTTPClientCounter  uint64
	beforeHTTPClientCounter uint64
	HTTPClientMock          mCommonAPIClientMockHTTPClient

	funcImageBuild          func(ctx context.Context, context io.Reader, options types.ImageBuildOptions) (i1 types.ImageBuildResponse, err error)
	inspectFuncImageBuild   func(ctx context.Context, context io.Reader, options types.ImageBuildOptions)
	afterImageBuildCounter  uint64
	beforeImageBuildCounter uint64
	ImageBuildMock          mCommonAPIClientMockImageBuild

	funcImageCreate          func(ctx context.Context, parentReference string, options types.ImageCreateOptions) (r1 io.ReadCloser, err error)
	inspectFuncImageCreate   func(ctx context.Context, parentReference string, options types.ImageCreateOptions)
	afterImageCreateCounter  uint64
	beforeImageCreateCounter uint64
	ImageCreateMock          mCommonAPIClientMockImageCreate

	funcImageHistory          func(ctx context.Context, image string) (ha1 []image.HistoryResponseItem, err error)
	inspectFuncImageHistory   func(ctx context.Context, image string)
	afterImageHistoryCounter  uint64
	beforeImageHistoryCounter uint64
	ImageHistoryMock          mCommonAPIClientMockImageHistory

	funcImageImport          func(ctx context.Context, source types.ImageImportSource, ref string, options types.ImageImportOptions) (r1 io.ReadCloser, err error)
	inspectFuncImageImport   func(ctx context.Context, source types.ImageImportSource, ref string, options types.ImageImportOptions)
	afterImageImportCounter  uint64
	beforeImageImportCounter uint64
	ImageImportMock          mCommonAPIClientMockImageImport

	funcImageInspectWithRaw          func(ctx context.Context, image string) (i1 types.ImageInspect, ba1 []byte, err error)
	inspectFuncImageInspectWithRaw   func(ctx context.Context, image string)
	afterImageInspectWithRawCounter  uint64
	beforeImageInspectWithRawCounter uint64
	ImageInspectWithRawMock          mCommonAPIClientMockImageInspectWithRaw

	funcImageList          func(ctx context.Context, options types.ImageListOptions) (ia1 []types.ImageSummary, err error)
	inspectFuncImageList   func(ctx context.Context, options types.ImageListOptions)
	afterImageListCounter  uint64
	beforeImageListCounter uint64
	ImageListMock          mCommonAPIClientMockImageList

	funcImageLoad          func(ctx context.Context, input io.Reader, quiet bool) (i1 types.ImageLoadResponse, err error)
	inspectFuncImageLoad   func(ctx context.Context, input io.Reader, quiet bool)
	afterImageLoadCounter  uint64
	beforeImageLoadCounter uint64
	ImageLoadMock          mCommonAPIClientMockImageLoad

	funcImagePull          func(ctx context.Context, ref string, options types.ImagePullOptions) (r1 io.ReadCloser, err error)
	inspectFuncImagePull   func(ctx context.Context, ref string, options types.ImagePullOptions)
	afterImagePullCounter  uint64
	beforeImagePullCounter uint64
	ImagePullMock          mCommonAPIClientMockImagePull

	funcImagePush          func(ctx context.Context, ref string, options types.ImagePushOptions) (r1 io.ReadCloser, err error)
	inspectFuncImagePush   func(ctx context.Context, ref string, options types.ImagePushOptions)
	afterImagePushCounter  uint64
	beforeImagePushCounter uint64
	ImagePushMock          mCommonAPIClientMockImagePush

	funcImageRemove          func(ctx context.Context, image string, options types.ImageRemoveOptions) (ia1 []types.ImageDeleteResponseItem, err error)
	inspectFuncImageRemove   func(ctx context.Context, image string, options types.ImageRemoveOptions)
	afterImageRemoveCounter  uint64
	beforeImageRemoveCounter uint64
	ImageRemoveMock          mCommonAPIClientMockImageRemove

	funcImageSave          func(ctx context.Context, images []string) (r1 io.ReadCloser, err error)
	inspectFuncImageSave   func(ctx context.Context, images []string)
	afterImageSaveCounter  uint64
	beforeImageSaveCounter uint64
	ImageSaveMock          mCommonAPIClientMockImageSave

	funcImageSearch          func(ctx context.Context, term string, options types.ImageSearchOptions) (sa1 []registry.SearchResult, err error)
	inspectFuncImageSearch   func(ctx context.Context, term string, options types.ImageSearchOptions)
	afterImageSearchCounter  uint64
	beforeImageSearchCounter uint64
	ImageSearchMock          mCommonAPIClientMockImageSearch

	funcImageTag          func(ctx context.Context, image string, ref string) (err error)
	inspectFuncImageTag   func(ctx context.Context, image string, ref string)
	afterImageTagCounter  uint64
	beforeImageTagCounter uint64
	ImageTagMock          mCommonAPIClientMockImageTag

	funcImagesPrune          func(ctx context.Context, pruneFilter filters.Args) (i1 types.ImagesPruneReport, err error)
	inspectFuncImagesPrune   func(ctx context.Context, pruneFilter filters.Args)
	afterImagesPruneCounter  uint64
	beforeImagesPruneCounter uint64
	ImagesPruneMock          mCommonAPIClientMockImagesPrune

	funcInfo          func(ctx context.Context) (i1 types.Info, err error)
	inspectFuncInfo   func(ctx context.Context)
	afterInfoCounter  uint64
	beforeInfoCounter uint64
	InfoMock          mCommonAPIClientMockInfo

	funcNegotiateAPIVersion          func(ctx context.Context)
	inspectFuncNegotiateAPIVersion   func(ctx context.Context)
	afterNegotiateAPIVersionCounter  uint64
	beforeNegotiateAPIVersionCounter uint64
	NegotiateAPIVersionMock          mCommonAPIClientMockNegotiateAPIVersion

	funcNegotiateAPIVersionPing          func(p1 types.Ping)
	inspectFuncNegotiateAPIVersionPing   func(p1 types.Ping)
	afterNegotiateAPIVersionPingCounter  uint64
	beforeNegotiateAPIVersionPingCounter uint64
	NegotiateAPIVersionPingMock          mCommonAPIClientMockNegotiateAPIVersionPing

	funcNetworkConnect          func(ctx context.Context, network string, container string, config *networktypes.EndpointSettings) (err error)
	inspectFuncNetworkConnect   func(ctx context.Context, network string, container string, config *networktypes.EndpointSettings)
	afterNetworkConnectCounter  uint64
	beforeNetworkConnectCounter uint64
	NetworkConnectMock          mCommonAPIClientMockNetworkConnect

	funcNetworkCreate          func(ctx context.Context, name string, options types.NetworkCreate) (n1 types.NetworkCreateResponse, err error)
	inspectFuncNetworkCreate   func(ctx context.Context, name string, options types.NetworkCreate)
	afterNetworkCreateCounter  uint64
	beforeNetworkCreateCounter uint64
	NetworkCreateMock          mCommonAPIClientMockNetworkCreate

	funcNetworkDisconnect          func(ctx context.Context, network string, container string, force bool) (err error)
	inspectFuncNetworkDisconnect   func(ctx context.Context, network string, container string, force bool)
	afterNetworkDisconnectCounter  uint64
	beforeNetworkDisconnectCounter uint64
	NetworkDisconnectMock          mCommonAPIClientMockNetworkDisconnect

	funcNetworkInspect          func(ctx context.Context, network string, options types.NetworkInspectOptions) (n1 types.NetworkResource, err error)
	inspectFuncNetworkInspect   func(ctx context.Context, network string, options types.NetworkInspectOptions)
	afterNetworkInspectCounter  uint64
	beforeNetworkInspectCounter uint64
	NetworkInspectMock          mCommonAPIClientMockNetworkInspect

	funcNetworkInspectWithRaw          func(ctx context.Context, network string, options types.NetworkInspectOptions) (n1 types.NetworkResource, ba1 []byte, err error)
	inspectFuncNetworkInspectWithRaw   func(ctx context.Context, network string, options types.NetworkInspectOptions)
	afterNetworkInspectWithRawCounter  uint64
	beforeNetworkInspectWithRawCounter uint64
	NetworkInspectWithRawMock          mCommonAPIClientMockNetworkInspectWithRaw

	funcNetworkList          func(ctx context.Context, options types.NetworkListOptions) (na1 []types.NetworkResource, err error)
	inspectFuncNetworkList   func(ctx context.Context, options types.NetworkListOptions)
	afterNetworkListCounter  uint64
	beforeNetworkListCounter uint64
	NetworkListMock          mCommonAPIClientMockNetworkList

	funcNetworkRemove          func(ctx context.Context, network string) (err error)
	inspectFuncNetworkRemove   func(ctx context.Context, network string)
	afterNetworkRemoveCounter  uint64
	beforeNetworkRemoveCounter uint64
	NetworkRemoveMock          mCommonAPIClientMockNetworkRemove

	funcNetworksPrune          func(ctx context.Context, pruneFilter filters.Args) (n1 types.NetworksPruneReport, err error)
	inspectFuncNetworksPrune   func(ctx context.Context, pruneFilter filters.Args)
	afterNetworksPruneCounter  uint64
	beforeNetworksPruneCounter uint64
	NetworksPruneMock          mCommonAPIClientMockNetworksPrune

	funcNodeInspectWithRaw          func(ctx context.Context, nodeID string) (n1 swarm.Node, ba1 []byte, err error)
	inspectFuncNodeInspectWithRaw   func(ctx context.Context, nodeID string)
	afterNodeInspectWithRawCounter  uint64
	beforeNodeInspectWithRawCounter uint64
	NodeInspectWithRawMock          mCommonAPIClientMockNodeInspectWithRaw

	funcNodeList          func(ctx context.Context, options types.NodeListOptions) (na1 []swarm.Node, err error)
	inspectFuncNodeList   func(ctx context.Context, options types.NodeListOptions)
	afterNodeListCounter  uint64
	beforeNodeListCounter uint64
	NodeListMock          mCommonAPIClientMockNodeList

	funcNodeRemove          func(ctx context.Context, nodeID string, options types.NodeRemoveOptions) (err error)
	inspectFuncNodeRemove   func(ctx context.Context, nodeID string, options types.NodeRemoveOptions)
	afterNodeRemoveCounter  uint64
	beforeNodeRemoveCounter uint64
	NodeRemoveMock          mCommonAPIClientMockNodeRemove

	funcNodeUpdate          func(ctx context.Context, nodeID string, version swarm.Version, node swarm.NodeSpec) (err error)
	inspectFuncNodeUpdate   func(ctx context.Context, nodeID string, version swarm.Version, node swarm.NodeSpec)
	afterNodeUpdateCounter  uint64
	beforeNodeUpdateCounter uint64
	NodeUpdateMock          mCommonAPIClientMockNodeUpdate

	funcPing          func(ctx context.Context) (p1 types.Ping, err error)
	inspectFuncPing   func(ctx context.Context)
	afterPingCounter  uint64
	beforePingCounter uint64
	PingMock          mCommonAPIClientMockPing

	funcPluginCreate          func(ctx context.Context, createContext io.Reader, options types.PluginCreateOptions) (err error)
	inspectFuncPluginCreate   func(ctx context.Context, createContext io.Reader, options types.PluginCreateOptions)
	afterPluginCreateCounter  uint64
	beforePluginCreateCounter uint64
	PluginCreateMock          mCommonAPIClientMockPluginCreate

	funcPluginDisable          func(ctx context.Context, name string, options types.PluginDisableOptions) (err error)
	inspectFuncPluginDisable   func(ctx context.Context, name string, options types.PluginDisableOptions)
	afterPluginDisableCounter  uint64
	beforePluginDisableCounter uint64
	PluginDisableMock          mCommonAPIClientMockPluginDisable

	funcPluginEnable          func(ctx context.Context, name string, options types.PluginEnableOptions) (err error)
	inspectFuncPluginEnable   func(ctx context.Context, name string, options types.PluginEnableOptions)
	afterPluginEnableCounter  uint64
	beforePluginEnableCounter uint64
	PluginEnableMock          mCommonAPIClientMockPluginEnable

	funcPluginInspectWithRaw          func(ctx context.Context, name string) (pp1 *types.Plugin, ba1 []byte, err error)
	inspectFuncPluginInspectWithRaw   func(ctx context.Context, name string)
	afterPluginInspectWithRawCounter  uint64
	beforePluginInspectWithRawCounter uint64
	PluginInspectWithRawMock          mCommonAPIClientMockPluginInspectWithRaw

	funcPluginInstall          func(ctx context.Context, name string, options types.PluginInstallOptions) (r1 io.ReadCloser, err error)
	inspectFuncPluginInstall   func(ctx context.Context, name string, options types.PluginInstallOptions)
	afterPluginInstallCounter  uint64
	beforePluginInstallCounter uint64
	PluginInstallMock          mCommonAPIClientMockPluginInstall

	funcPluginList          func(ctx context.Context, filter filters.Args) (p1 types.PluginsListResponse, err error)
	inspectFuncPluginList   func(ctx context.Context, filter filters.Args)
	afterPluginListCounter  uint64
	beforePluginListCounter uint64
	PluginListMock          mCommonAPIClientMockPluginList

	funcPluginPush          func(ctx context.Context, name string, registryAuth string) (r1 io.ReadCloser, err error)
	inspectFuncPluginPush   func(ctx context.Context, name string, registryAuth string)
	afterPluginPushCounter  uint64
	beforePluginPushCounter uint64
	PluginPushMock          mCommonAPIClientMockPluginPush

	funcPluginRemove          func(ctx context.Context, name string, options types.PluginRemoveOptions) (err error)
	inspectFuncPluginRemove   func(ctx context.Context, name string, options types.PluginRemoveOptions)
	afterPluginRemoveCounter  uint64
	beforePluginRemoveCounter uint64
	PluginRemoveMock          mCommonAPIClientMockPluginRemove

	funcPluginSet          func(ctx context.Context, name string, args []string) (err error)
	inspectFuncPluginSet   func(ctx context.Context, name string, args []string)
	afterPluginSetCounter  uint64
	beforePluginSetCounter uint64
	PluginSetMock          mCommonAPIClientMockPluginSet

	funcPluginUpgrade          func(ctx context.Context, name string, options types.PluginInstallOptions) (r1 io.ReadCloser, err error)
	inspectFuncPluginUpgrade   func(ctx context.Context, name string, options types.PluginInstallOptions)
	afterPluginUpgradeCounter  uint64
	beforePluginUpgradeCounter uint64
	PluginUpgradeMock          mCommonAPIClientMockPluginUpgrade

	funcRegistryLogin          func(ctx context.Context, auth types.AuthConfig) (a1 registry.AuthenticateOKBody, err error)
	inspectFuncRegistryLogin   func(ctx context.Context, auth types.AuthConfig)
	afterRegistryLoginCounter  uint64
	beforeRegistryLoginCounter uint64
	RegistryLoginMock          mCommonAPIClientMockRegistryLogin

	funcSecretCreate          func(ctx context.Context, secret swarm.SecretSpec) (s1 types.SecretCreateResponse, err error)
	inspectFuncSecretCreate   func(ctx context.Context, secret swarm.SecretSpec)
	afterSecretCreateCounter  uint64
	beforeSecretCreateCounter uint64
	SecretCreateMock          mCommonAPIClientMockSecretCreate

	funcSecretInspectWithRaw          func(ctx context.Context, name string) (s1 swarm.Secret, ba1 []byte, err error)
	inspectFuncSecretInspectWithRaw   func(ctx context.Context, name string)
	afterSecretInspectWithRawCounter  uint64
	beforeSecretInspectWithRawCounter uint64
	SecretInspectWithRawMock          mCommonAPIClientMockSecretInspectWithRaw

	funcSecretList          func(ctx context.Context, options types.SecretListOptions) (sa1 []swarm.Secret, err error)
	inspectFuncSecretList   func(ctx context.Context, options types.SecretListOptions)
	afterSecretListCounter  uint64
	beforeSecretListCounter uint64
	SecretListMock          mCommonAPIClientMockSecretList

	funcSecretRemove          func(ctx context.Context, id string) (err error)
	inspectFuncSecretRemove   func(ctx context.Context, id string)
	afterSecretRemoveCounter  uint64
	beforeSecretRemoveCounter uint64
	SecretRemoveMock          mCommonAPIClientMockSecretRemove

	funcSecretUpdate          func(ctx context.Context, id string, version swarm.Version, secret swarm.SecretSpec) (err error)
	inspectFuncSecretUpdate   func(ctx context.Context, id string, version swarm.Version, secret swarm.SecretSpec)
	afterSecretUpdateCounter  uint64
	beforeSecretUpdateCounter uint64
	SecretUpdateMock          mCommonAPIClientMockSecretUpdate

	funcServerVersion          func(ctx context.Context) (v1 types.Version, err error)
	inspectFuncServerVersion   func(ctx context.Context)
	afterServerVersionCounter  uint64
	beforeServerVersionCounter uint64
	ServerVersionMock          mCommonAPIClientMockServerVersion

	funcServiceCreate          func(ctx context.Context, service swarm.ServiceSpec, options types.ServiceCreateOptions) (s1 types.ServiceCreateResponse, err error)
	inspectFuncServiceCreate   func(ctx context.Context, service swarm.ServiceSpec, options types.ServiceCreateOptions)
	afterServiceCreateCounter  uint64
	beforeServiceCreateCounter uint64
	ServiceCreateMock          mCommonAPIClientMockServiceCreate

	funcServiceInspectWithRaw          func(ctx context.Context, serviceID string, options types.ServiceInspectOptions) (s1 swarm.Service, ba1 []byte, err error)
	inspectFuncServiceInspectWithRaw   func(ctx context.Context, serviceID string, options types.ServiceInspectOptions)
	afterServiceInspectWithRawCounter  uint64
	beforeServiceInspectWithRawCounter uint64
	ServiceInspectWithRawMock          mCommonAPIClientMockServiceInspectWithRaw

	funcServiceList          func(ctx context.Context, options types.ServiceListOptions) (sa1 []swarm.Service, err error)
	inspectFuncServiceList   func(ctx context.Context, options types.ServiceListOptions)
	afterServiceListCounter  uint64
	beforeServiceListCounter uint64
	ServiceListMock          mCommonAPIClientMockServiceList

	funcServiceLogs          func(ctx context.Context, serviceID string, options types.ContainerLogsOptions) (r1 io.ReadCloser, err error)
	inspectFuncServiceLogs   func(ctx context.Context, serviceID string, options types.ContainerLogsOptions)
	afterServiceLogsCounter  uint64
	beforeServiceLogsCounter uint64
	ServiceLogsMock          mCommonAPIClientMockServiceLogs

	funcServiceRemove          func(ctx context.Context, serviceID string) (err error)
	inspectFuncServiceRemove   func(ctx context.Context, serviceID string)
	afterServiceRemoveCounter  uint64
	beforeServiceRemoveCounter uint64
	ServiceRemoveMock          mCommonAPIClientMockServiceRemove

	funcServiceUpdate          func(ctx context.Context, serviceID string, version swarm.Version, service swarm.ServiceSpec, options types.ServiceUpdateOptions) (s1 types.ServiceUpdateResponse, err error)
	inspectFuncServiceUpdate   func(ctx context.Context, serviceID string, version swarm.Version, service swarm.ServiceSpec, options types.ServiceUpdateOptions)
	afterServiceUpdateCounter  uint64
	beforeServiceUpdateCounter uint64
	ServiceUpdateMock          mCommonAPIClientMockServiceUpdate

	funcSwarmGetUnlockKey          func(ctx context.Context) (s1 types.SwarmUnlockKeyResponse, err error)
	inspectFuncSwarmGetUnlockKey   func(ctx context.Context)
	afterSwarmGetUnlockKeyCounter  uint64
	beforeSwarmGetUnlockKeyCounter uint64
	SwarmGetUnlockKeyMock          mCommonAPIClientMockSwarmGetUnlockKey

	funcSwarmInit          func(ctx context.Context, req swarm.InitRequest) (s1 string, err error)
	inspectFuncSwarmInit   func(ctx context.Context, req swarm.InitRequest)
	afterSwarmInitCounter  uint64
	beforeSwarmInitCounter uint64
	SwarmInitMock          mCommonAPIClientMockSwarmInit

	funcSwarmInspect          func(ctx context.Context) (s1 swarm.Swarm, err error)
	inspectFuncSwarmInspect   func(ctx context.Context)
	afterSwarmInspectCounter  uint64
	beforeSwarmInspectCounter uint64
	SwarmInspectMock          mCommonAPIClientMockSwarmInspect

	funcSwarmJoin          func(ctx context.Context, req swarm.JoinRequest) (err error)
	inspectFuncSwarmJoin   func(ctx context.Context, req swarm.JoinRequest)
	afterSwarmJoinCounter  uint64
	beforeSwarmJoinCounter uint64
	SwarmJoinMock          mCommonAPIClientMockSwarmJoin

	funcSwarmLeave          func(ctx context.Context, force bool) (err error)
	inspectFuncSwarmLeave   func(ctx context.Context, force bool)
	afterSwarmLeaveCounter  uint64
	beforeSwarmLeaveCounter uint64
	SwarmLeaveMock          mCommonAPIClientMockSwarmLeave

	funcSwarmUnlock          func(ctx context.Context, req swarm.UnlockRequest) (err error)
	inspectFuncSwarmUnlock   func(ctx context.Context, req swarm.UnlockRequest)
	afterSwarmUnlockCounter  uint64
	beforeSwarmUnlockCounter uint64
	SwarmUnlockMock          mCommonAPIClientMockSwarmUnlock

	funcSwarmUpdate          func(ctx context.Context, version swarm.Version, swarm swarm.Spec, flags swarm.UpdateFlags) (err error)
	inspectFuncSwarmUpdate   func(ctx context.Context, version swarm.Version, swarm swarm.Spec, flags swarm.UpdateFlags)
	afterSwarmUpdateCounter  uint64
	beforeSwarmUpdateCounter uint64
	SwarmUpdateMock          mCommonAPIClientMockSwarmUpdate

	funcTaskInspectWithRaw          func(ctx context.Context, taskID string) (t1 swarm.Task, ba1 []byte, err error)
	inspectFuncTaskInspectWithRaw   func(ctx context.Context, taskID string)
	afterTaskInspectWithRawCounter  uint64
	beforeTaskInspectWithRawCounter uint64
	TaskInspectWithRawMock          mCommonAPIClientMockTaskInspectWithRaw

	funcTaskList          func(ctx context.Context, options types.TaskListOptions) (ta1 []swarm.Task, err error)
	inspectFuncTaskList   func(ctx context.Context, options types.TaskListOptions)
	afterTaskListCounter  uint64
	beforeTaskListCounter uint64
	TaskListMock          mCommonAPIClientMockTaskList

	funcTaskLogs          func(ctx context.Context, taskID string, options types.ContainerLogsOptions) (r1 io.ReadCloser, err error)
	inspectFuncTaskLogs   func(ctx context.Context, taskID string, options types.ContainerLogsOptions)
	afterTaskLogsCounter  uint64
	beforeTaskLogsCounter uint64
	TaskLogsMock          mCommonAPIClientMockTaskLogs

	funcVolumeCreate          func(ctx context.Context, options volumetypes.VolumeCreateBody) (v1 types.Volume, err error)
	inspectFuncVolumeCreate   func(ctx context.Context, options volumetypes.VolumeCreateBody)
	afterVolumeCreateCounter  uint64
	beforeVolumeCreateCounter uint64
	VolumeCreateMock          mCommonAPIClientMockVolumeCreate

	funcVolumeInspect          func(ctx context.Context, volumeID string) (v1 types.Volume, err error)
	inspectFuncVolumeInspect   func(ctx context.Context, volumeID string)
	afterVolumeInspectCounter  uint64
	beforeVolumeInspectCounter uint64
	VolumeInspectMock          mCommonAPIClientMockVolumeInspect

	funcVolumeInspectWithRaw          func(ctx context.Context, volumeID string) (v1 types.Volume, ba1 []byte, err error)
	inspectFuncVolumeInspectWithRaw   func(ctx context.Context, volumeID string)
	afterVolumeInspectWithRawCounter  uint64
	beforeVolumeInspectWithRawCounter uint64
	VolumeInspectWithRawMock          mCommonAPIClientMockVolumeInspectWithRaw

	funcVolumeList          func(ctx context.Context, filter filters.Args) (v1 volumetypes.VolumeListOKBody, err error)
	inspectFuncVolumeList   func(ctx context.Context, filter filters.Args)
	afterVolumeListCounter  uint64
	beforeVolumeListCounter uint64
	VolumeListMock          mCommonAPIClientMockVolumeList

	funcVolumeRemove          func(ctx context.Context, volumeID string, force bool) (err error)
	inspectFuncVolumeRemove   func(ctx context.Context, volumeID string, force bool)
	afterVolumeRemoveCounter  uint64
	beforeVolumeRemoveCounter uint64
	VolumeRemoveMock          mCommonAPIClientMockVolumeRemove

	funcVolumesPrune          func(ctx context.Context, pruneFilter filters.Args) (v1 types.VolumesPruneReport, err error)
	inspectFuncVolumesPrune   func(ctx context.Context, pruneFilter filters.Args)
	afterVolumesPruneCounter  uint64
	beforeVolumesPruneCounter uint64
	VolumesPruneMock          mCommonAPIClientMockVolumesPrune
}

// NewCommonAPIClientMock returns a mock for client.CommonAPIClient
func NewCommonAPIClientMock(t minimock.Tester) *CommonAPIClientMock {
	m := &CommonAPIClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.BuildCachePruneMock = mCommonAPIClientMockBuildCachePrune{mock: m}
	m.BuildCachePruneMock.callArgs = []*CommonAPIClientMockBuildCachePruneParams{}

	m.BuildCancelMock = mCommonAPIClientMockBuildCancel{mock: m}
	m.BuildCancelMock.callArgs = []*CommonAPIClientMockBuildCancelParams{}

	m.ClientVersionMock = mCommonAPIClientMockClientVersion{mock: m}

	m.CloseMock = mCommonAPIClientMockClose{mock: m}

	m.ConfigCreateMock = mCommonAPIClientMockConfigCreate{mock: m}
	m.ConfigCreateMock.callArgs = []*CommonAPIClientMockConfigCreateParams{}

	m.ConfigInspectWithRawMock = mCommonAPIClientMockConfigInspectWithRaw{mock: m}
	m.ConfigInspectWithRawMock.callArgs = []*CommonAPIClientMockConfigInspectWithRawParams{}

	m.ConfigListMock = mCommonAPIClientMockConfigList{mock: m}
	m.ConfigListMock.callArgs = []*CommonAPIClientMockConfigListParams{}

	m.ConfigRemoveMock = mCommonAPIClientMockConfigRemove{mock: m}
	m.ConfigRemoveMock.callArgs = []*CommonAPIClientMockConfigRemoveParams{}

	m.ConfigUpdateMock = mCommonAPIClientMockConfigUpdate{mock: m}
	m.ConfigUpdateMock.callArgs = []*CommonAPIClientMockConfigUpdateParams{}

	m.ContainerAttachMock = mCommonAPIClientMockContainerAttach{mock: m}
	m.ContainerAttachMock.callArgs = []*CommonAPIClientMockContainerAttachParams{}

	m.ContainerCommitMock = mCommonAPIClientMockContainerCommit{mock: m}
	m.ContainerCommitMock.callArgs = []*CommonAPIClientMockContainerCommitParams{}

	m.ContainerCreateMock = mCommonAPIClientMockContainerCreate{mock: m}
	m.ContainerCreateMock.callArgs = []*CommonAPIClientMockContainerCreateParams{}

	m.ContainerDiffMock = mCommonAPIClientMockContainerDiff{mock: m}
	m.ContainerDiffMock.callArgs = []*CommonAPIClientMockContainerDiffParams{}

	m.ContainerExecAttachMock = mCommonAPIClientMockContainerExecAttach{mock: m}
	m.ContainerExecAttachMock.callArgs = []*CommonAPIClientMockContainerExecAttachParams{}

	m.ContainerExecCreateMock = mCommonAPIClientMockContainerExecCreate{mock: m}
	m.ContainerExecCreateMock.callArgs = []*CommonAPIClientMockContainerExecCreateParams{}

	m.ContainerExecInspectMock = mCommonAPIClientMockContainerExecInspect{mock: m}
	m.ContainerExecInspectMock.callArgs = []*CommonAPIClientMockContainerExecInspectParams{}

	m.ContainerExecResizeMock = mCommonAPIClientMockContainerExecResize{mock: m}
	m.ContainerExecResizeMock.callArgs = []*CommonAPIClientMockContainerExecResizeParams{}

	m.ContainerExecStartMock = mCommonAPIClientMockContainerExecStart{mock: m}
	m.ContainerExecStartMock.callArgs = []*CommonAPIClientMockContainerExecStartParams{}

	m.ContainerExportMock = mCommonAPIClientMockContainerExport{mock: m}
	m.ContainerExportMock.callArgs = []*CommonAPIClientMockContainerExportParams{}

	m.ContainerInspectMock = mCommonAPIClientMockContainerInspect{mock: m}
	m.ContainerInspectMock.callArgs = []*CommonAPIClientMockContainerInspectParams{}

	m.ContainerInspectWithRawMock = mCommonAPIClientMockContainerInspectWithRaw{mock: m}
	m.ContainerInspectWithRawMock.callArgs = []*CommonAPIClientMockContainerInspectWithRawParams{}

	m.ContainerKillMock = mCommonAPIClientMockContainerKill{mock: m}
	m.ContainerKillMock.callArgs = []*CommonAPIClientMockContainerKillParams{}

	m.ContainerListMock = mCommonAPIClientMockContainerList{mock: m}
	m.ContainerListMock.callArgs = []*CommonAPIClientMockContainerListParams{}

	m.ContainerLogsMock = mCommonAPIClientMockContainerLogs{mock: m}
	m.ContainerLogsMock.callArgs = []*CommonAPIClientMockContainerLogsParams{}

	m.ContainerPauseMock = mCommonAPIClientMockContainerPause{mock: m}
	m.ContainerPauseMock.callArgs = []*CommonAPIClientMockContainerPauseParams{}

	m.ContainerRemoveMock = mCommonAPIClientMockContainerRemove{mock: m}
	m.ContainerRemoveMock.callArgs = []*CommonAPIClientMockContainerRemoveParams{}

	m.ContainerRenameMock = mCommonAPIClientMockContainerRename{mock: m}
	m.ContainerRenameMock.callArgs = []*CommonAPIClientMockContainerRenameParams{}

	m.ContainerResizeMock = mCommonAPIClientMockContainerResize{mock: m}
	m.ContainerResizeMock.callArgs = []*CommonAPIClientMockContainerResizeParams{}

	m.ContainerRestartMock = mCommonAPIClientMockContainerRestart{mock: m}
	m.ContainerRestartMock.callArgs = []*CommonAPIClientMockContainerRestartParams{}

	m.ContainerStartMock = mCommonAPIClientMockContainerStart{mock: m}
	m.ContainerStartMock.callArgs = []*CommonAPIClientMockContainerStartParams{}

	m.ContainerStatPathMock = mCommonAPIClientMockContainerStatPath{mock: m}
	m.ContainerStatPathMock.callArgs = []*CommonAPIClientMockContainerStatPathParams{}

	m.ContainerStatsMock = mCommonAPIClientMockContainerStats{mock: m}
	m.ContainerStatsMock.callArgs = []*CommonAPIClientMockContainerStatsParams{}

	m.ContainerStopMock = mCommonAPIClientMockContainerStop{mock: m}
	m.ContainerStopMock.callArgs = []*CommonAPIClientMockContainerStopParams{}

	m.ContainerTopMock = mCommonAPIClientMockContainerTop{mock: m}
	m.ContainerTopMock.callArgs = []*CommonAPIClientMockContainerTopParams{}

	m.ContainerUnpauseMock = mCommonAPIClientMockContainerUnpause{mock: m}
	m.ContainerUnpauseMock.callArgs = []*CommonAPIClientMockContainerUnpauseParams{}

	m.ContainerUpdateMock = mCommonAPIClientMockContainerUpdate{mock: m}
	m.ContainerUpdateMock.callArgs = []*CommonAPIClientMockContainerUpdateParams{}

	m.ContainerWaitMock = mCommonAPIClientMockContainerWait{mock: m}
	m.ContainerWaitMock.callArgs = []*CommonAPIClientMockContainerWaitParams{}

	m.ContainersPruneMock = mCommonAPIClientMockContainersPrune{mock: m}
	m.ContainersPruneMock.callArgs = []*CommonAPIClientMockContainersPruneParams{}

	m.CopyFromContainerMock = mCommonAPIClientMockCopyFromContainer{mock: m}
	m.CopyFromContainerMock.callArgs = []*CommonAPIClientMockCopyFromContainerParams{}

	m.CopyToContainerMock = mCommonAPIClientMockCopyToContainer{mock: m}
	m.CopyToContainerMock.callArgs = []*CommonAPIClientMockCopyToContainerParams{}

	m.DaemonHostMock = mCommonAPIClientMockDaemonHost{mock: m}

	m.DialHijackMock = mCommonAPIClientMockDialHijack{mock: m}
	m.DialHijackMock.callArgs = []*CommonAPIClientMockDialHijackParams{}

	m.DialerMock = mCommonAPIClientMockDialer{mock: m}

	m.DiskUsageMock = mCommonAPIClientMockDiskUsage{mock: m}
	m.DiskUsageMock.callArgs = []*CommonAPIClientMockDiskUsageParams{}

	m.DistributionInspectMock = mCommonAPIClientMockDistributionInspect{mock: m}
	m.DistributionInspectMock.callArgs = []*CommonAPIClientMockDistributionInspectParams{}

	m.EventsMock = mCommonAPIClientMockEvents{mock: m}
	m.EventsMock.callArgs = []*CommonAPIClientMockEventsParams{}

	m.HTTPClientMock = mCommonAPIClientMockHTTPClient{mock: m}

	m.ImageBuildMock = mCommonAPIClientMockImageBuild{mock: m}
	m.ImageBuildMock.callArgs = []*CommonAPIClientMockImageBuildParams{}

	m.ImageCreateMock = mCommonAPIClientMockImageCreate{mock: m}
	m.ImageCreateMock.callArgs = []*CommonAPIClientMockImageCreateParams{}

	m.ImageHistoryMock = mCommonAPIClientMockImageHistory{mock: m}
	m.ImageHistoryMock.callArgs = []*CommonAPIClientMockImageHistoryParams{}

	m.ImageImportMock = mCommonAPIClientMockImageImport{mock: m}
	m.ImageImportMock.callArgs = []*CommonAPIClientMockImageImportParams{}

	m.ImageInspectWithRawMock = mCommonAPIClientMockImageInspectWithRaw{mock: m}
	m.ImageInspectWithRawMock.callArgs = []*CommonAPIClientMockImageInspectWithRawParams{}

	m.ImageListMock = mCommonAPIClientMockImageList{mock: m}
	m.ImageListMock.callArgs = []*CommonAPIClientMockImageListParams{}

	m.ImageLoadMock = mCommonAPIClientMockImageLoad{mock: m}
	m.ImageLoadMock.callArgs = []*CommonAPIClientMockImageLoadParams{}

	m.ImagePullMock = mCommonAPIClientMockImagePull{mock: m}
	m.ImagePullMock.callArgs = []*CommonAPIClientMockImagePullParams{}

	m.ImagePushMock = mCommonAPIClientMockImagePush{mock: m}
	m.ImagePushMock.callArgs = []*CommonAPIClientMockImagePushParams{}

	m.ImageRemoveMock = mCommonAPIClientMockImageRemove{mock: m}
	m.ImageRemoveMock.callArgs = []*CommonAPIClientMockImageRemoveParams{}

	m.ImageSaveMock = mCommonAPIClientMockImageSave{mock: m}
	m.ImageSaveMock.callArgs = []*CommonAPIClientMockImageSaveParams{}

	m.ImageSearchMock = mCommonAPIClientMockImageSearch{mock: m}
	m.ImageSearchMock.callArgs = []*CommonAPIClientMockImageSearchParams{}

	m.ImageTagMock = mCommonAPIClientMockImageTag{mock: m}
	m.ImageTagMock.callArgs = []*CommonAPIClientMockImageTagParams{}

	m.ImagesPruneMock = mCommonAPIClientMockImagesPrune{mock: m}
	m.ImagesPruneMock.callArgs = []*CommonAPIClientMockImagesPruneParams{}

	m.InfoMock = mCommonAPIClientMockInfo{mock: m}
	m.InfoMock.callArgs = []*CommonAPIClientMockInfoParams{}

	m.NegotiateAPIVersionMock = mCommonAPIClientMockNegotiateAPIVersion{mock: m}
	m.NegotiateAPIVersionMock.callArgs = []*CommonAPIClientMockNegotiateAPIVersionParams{}

	m.NegotiateAPIVersionPingMock = mCommonAPIClientMockNegotiateAPIVersionPing{mock: m}
	m.NegotiateAPIVersionPingMock.callArgs = []*CommonAPIClientMockNegotiateAPIVersionPingParams{}

	m.NetworkConnectMock = mCommonAPIClientMockNetworkConnect{mock: m}
	m.NetworkConnectMock.callArgs = []*CommonAPIClientMockNetworkConnectParams{}

	m.NetworkCreateMock = mCommonAPIClientMockNetworkCreate{mock: m}
	m.NetworkCreateMock.callArgs = []*CommonAPIClientMockNetworkCreateParams{}

	m.NetworkDisconnectMock = mCommonAPIClientMockNetworkDisconnect{mock: m}
	m.NetworkDisconnectMock.callArgs = []*CommonAPIClientMockNetworkDisconnectParams{}

	m.NetworkInspectMock = mCommonAPIClientMockNetworkInspect{mock: m}
	m.NetworkInspectMock.callArgs = []*CommonAPIClientMockNetworkInspectParams{}

	m.NetworkInspectWithRawMock = mCommonAPIClientMockNetworkInspectWithRaw{mock: m}
	m.NetworkInspectWithRawMock.callArgs = []*CommonAPIClientMockNetworkInspectWithRawParams{}

	m.NetworkListMock = mCommonAPIClientMockNetworkList{mock: m}
	m.NetworkListMock.callArgs = []*CommonAPIClientMockNetworkListParams{}

	m.NetworkRemoveMock = mCommonAPIClientMockNetworkRemove{mock: m}
	m.NetworkRemoveMock.callArgs = []*CommonAPIClientMockNetworkRemoveParams{}

	m.NetworksPruneMock = mCommonAPIClientMockNetworksPrune{mock: m}
	m.NetworksPruneMock.callArgs = []*CommonAPIClientMockNetworksPruneParams{}

	m.NodeInspectWithRawMock = mCommonAPIClientMockNodeInspectWithRaw{mock: m}
	m.NodeInspectWithRawMock.callArgs = []*CommonAPIClientMockNodeInspectWithRawParams{}

	m.NodeListMock = mCommonAPIClientMockNodeList{mock: m}
	m.NodeListMock.callArgs = []*CommonAPIClientMockNodeListParams{}

	m.NodeRemoveMock = mCommonAPIClientMockNodeRemove{mock: m}
	m.NodeRemoveMock.callArgs = []*CommonAPIClientMockNodeRemoveParams{}

	m.NodeUpdateMock = mCommonAPIClientMockNodeUpdate{mock: m}
	m.NodeUpdateMock.callArgs = []*CommonAPIClientMockNodeUpdateParams{}

	m.PingMock = mCommonAPIClientMockPing{mock: m}
	m.PingMock.callArgs = []*CommonAPIClientMockPingParams{}

	m.PluginCreateMock = mCommonAPIClientMockPluginCreate{mock: m}
	m.PluginCreateMock.callArgs = []*CommonAPIClientMockPluginCreateParams{}

	m.PluginDisableMock = mCommonAPIClientMockPluginDisable{mock: m}
	m.PluginDisableMock.callArgs = []*CommonAPIClientMockPluginDisableParams{}

	m.PluginEnableMock = mCommonAPIClientMockPluginEnable{mock: m}
	m.PluginEnableMock.callArgs = []*CommonAPIClientMockPluginEnableParams{}

	m.PluginInspectWithRawMock = mCommonAPIClientMockPluginInspectWithRaw{mock: m}
	m.PluginInspectWithRawMock.callArgs = []*CommonAPIClientMockPluginInspectWithRawParams{}

	m.PluginInstallMock = mCommonAPIClientMockPluginInstall{mock: m}
	m.PluginInstallMock.callArgs = []*CommonAPIClientMockPluginInstallParams{}

	m.PluginListMock = mCommonAPIClientMockPluginList{mock: m}
	m.PluginListMock.callArgs = []*CommonAPIClientMockPluginListParams{}

	m.PluginPushMock = mCommonAPIClientMockPluginPush{mock: m}
	m.PluginPushMock.callArgs = []*CommonAPIClientMockPluginPushParams{}

	m.PluginRemoveMock = mCommonAPIClientMockPluginRemove{mock: m}
	m.PluginRemoveMock.callArgs = []*CommonAPIClientMockPluginRemoveParams{}

	m.PluginSetMock = mCommonAPIClientMockPluginSet{mock: m}
	m.PluginSetMock.callArgs = []*CommonAPIClientMockPluginSetParams{}

	m.PluginUpgradeMock = mCommonAPIClientMockPluginUpgrade{mock: m}
	m.PluginUpgradeMock.callArgs = []*CommonAPIClientMockPluginUpgradeParams{}

	m.RegistryLoginMock = mCommonAPIClientMockRegistryLogin{mock: m}
	m.RegistryLoginMock.callArgs = []*CommonAPIClientMockRegistryLoginParams{}

	m.SecretCreateMock = mCommonAPIClientMockSecretCreate{mock: m}
	m.SecretCreateMock.callArgs = []*CommonAPIClientMockSecretCreateParams{}

	m.SecretInspectWithRawMock = mCommonAPIClientMockSecretInspectWithRaw{mock: m}
	m.SecretInspectWithRawMock.callArgs = []*CommonAPIClientMockSecretInspectWithRawParams{}

	m.SecretListMock = mCommonAPIClientMockSecretList{mock: m}
	m.SecretListMock.callArgs = []*CommonAPIClientMockSecretListParams{}

	m.SecretRemoveMock = mCommonAPIClientMockSecretRemove{mock: m}
	m.SecretRemoveMock.callArgs = []*CommonAPIClientMockSecretRemoveParams{}

	m.SecretUpdateMock = mCommonAPIClientMockSecretUpdate{mock: m}
	m.SecretUpdateMock.callArgs = []*CommonAPIClientMockSecretUpdateParams{}

	m.ServerVersionMock = mCommonAPIClientMockServerVersion{mock: m}
	m.ServerVersionMock.callArgs = []*CommonAPIClientMockServerVersionParams{}

	m.ServiceCreateMock = mCommonAPIClientMockServiceCreate{mock: m}
	m.ServiceCreateMock.callArgs = []*CommonAPIClientMockServiceCreateParams{}

	m.ServiceInspectWithRawMock = mCommonAPIClientMockServiceInspectWithRaw{mock: m}
	m.ServiceInspectWithRawMock.callArgs = []*CommonAPIClientMockServiceInspectWithRawParams{}

	m.ServiceListMock = mCommonAPIClientMockServiceList{mock: m}
	m.ServiceListMock.callArgs = []*CommonAPIClientMockServiceListParams{}

	m.ServiceLogsMock = mCommonAPIClientMockServiceLogs{mock: m}
	m.ServiceLogsMock.callArgs = []*CommonAPIClientMockServiceLogsParams{}

	m.ServiceRemoveMock = mCommonAPIClientMockServiceRemove{mock: m}
	m.ServiceRemoveMock.callArgs = []*CommonAPIClientMockServiceRemoveParams{}

	m.ServiceUpdateMock = mCommonAPIClientMockServiceUpdate{mock: m}
	m.ServiceUpdateMock.callArgs = []*CommonAPIClientMockServiceUpdateParams{}

	m.SwarmGetUnlockKeyMock = mCommonAPIClientMockSwarmGetUnlockKey{mock: m}
	m.SwarmGetUnlockKeyMock.callArgs = []*CommonAPIClientMockSwarmGetUnlockKeyParams{}

	m.SwarmInitMock = mCommonAPIClientMockSwarmInit{mock: m}
	m.SwarmInitMock.callArgs = []*CommonAPIClientMockSwarmInitParams{}

	m.SwarmInspectMock = mCommonAPIClientMockSwarmInspect{mock: m}
	m.SwarmInspectMock.callArgs = []*CommonAPIClientMockSwarmInspectParams{}

	m.SwarmJoinMock = mCommonAPIClientMockSwarmJoin{mock: m}
	m.SwarmJoinMock.callArgs = []*CommonAPIClientMockSwarmJoinParams{}

	m.SwarmLeaveMock = mCommonAPIClientMockSwarmLeave{mock: m}
	m.SwarmLeaveMock.callArgs = []*CommonAPIClientMockSwarmLeaveParams{}

	m.SwarmUnlockMock = mCommonAPIClientMockSwarmUnlock{mock: m}
	m.SwarmUnlockMock.callArgs = []*CommonAPIClientMockSwarmUnlockParams{}

	m.SwarmUpdateMock = mCommonAPIClientMockSwarmUpdate{mock: m}
	m.SwarmUpdateMock.callArgs = []*CommonAPIClientMockSwarmUpdateParams{}

	m.TaskInspectWithRawMock = mCommonAPIClientMockTaskInspectWithRaw{mock: m}
	m.TaskInspectWithRawMock.callArgs = []*CommonAPIClientMockTaskInspectWithRawParams{}

	m.TaskListMock = mCommonAPIClientMockTaskList{mock: m}
	m.TaskListMock.callArgs = []*CommonAPIClientMockTaskListParams{}

	m.TaskLogsMock = mCommonAPIClientMockTaskLogs{mock: m}
	m.TaskLogsMock.callArgs = []*CommonAPIClientMockTaskLogsParams{}

	m.VolumeCreateMock = mCommonAPIClientMockVolumeCreate{mock: m}
	m.VolumeCreateMock.callArgs = []*CommonAPIClientMockVolumeCreateParams{}

	m.VolumeInspectMock = mCommonAPIClientMockVolumeInspect{mock: m}
	m.VolumeInspectMock.callArgs = []*CommonAPIClientMockVolumeInspectParams{}

	m.VolumeInspectWithRawMock = mCommonAPIClientMockVolumeInspectWithRaw{mock: m}
	m.VolumeInspectWithRawMock.callArgs = []*CommonAPIClientMockVolumeInspectWithRawParams{}

	m.VolumeListMock = mCommonAPIClientMockVolumeList{mock: m}
	m.VolumeListMock.callArgs = []*CommonAPIClientMockVolumeListParams{}

	m.VolumeRemoveMock = mCommonAPIClientMockVolumeRemove{mock: m}
	m.VolumeRemoveMock.callArgs = []*CommonAPIClientMockVolumeRemoveParams{}

	m.VolumesPruneMock = mCommonAPIClientMockVolumesPrune{mock: m}
	m.VolumesPruneMock.callArgs = []*CommonAPIClientMockVolumesPruneParams{}

	return m
}

type mCommonAPIClientMockBuildCachePrune struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockBuildCachePruneExpectation
	expectations       []*CommonAPIClientMockBuildCachePruneExpectation

	callArgs []*CommonAPIClientMockBuildCachePruneParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockBuildCachePruneExpectation specifies expectation struct of the CommonAPIClient.BuildCachePrune
type CommonAPIClientMockBuildCachePruneExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockBuildCachePruneParams
	results *CommonAPIClientMockBuildCachePruneResults
	Counter uint64
}

// CommonAPIClientMockBuildCachePruneParams contains parameters of the CommonAPIClient.BuildCachePrune
type CommonAPIClientMockBuildCachePruneParams struct {
	ctx  context.Context
	opts types.BuildCachePruneOptions
}

// CommonAPIClientMockBuildCachePruneResults contains results of the CommonAPIClient.BuildCachePrune
type CommonAPIClientMockBuildCachePruneResults struct {
	bp1 *types.BuildCachePruneReport
	err error
}

// Expect sets up expected params for CommonAPIClient.BuildCachePrune
func (mmBuildCachePrune *mCommonAPIClientMockBuildCachePrune) Expect(ctx context.Context, opts types.BuildCachePruneOptions) *mCommonAPIClientMockBuildCachePrune {
	if mmBuildCachePrune.mock.funcBuildCachePrune != nil {
		mmBuildCachePrune.mock.t.Fatalf("CommonAPIClientMock.BuildCachePrune mock is already set by Set")
	}

	if mmBuildCachePrune.defaultExpectation == nil {
		mmBuildCachePrune.defaultExpectation = &CommonAPIClientMockBuildCachePruneExpectation{}
	}

	mmBuildCachePrune.defaultExpectation.params = &CommonAPIClientMockBuildCachePruneParams{ctx, opts}
	for _, e := range mmBuildCachePrune.expectations {
		if minimock.Equal(e.params, mmBuildCachePrune.defaultExpectation.params) {
			mmBuildCachePrune.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmBuildCachePrune.defaultExpectation.params)
		}
	}

	return mmBuildCachePrune
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.BuildCachePrune
func (mmBuildCachePrune *mCommonAPIClientMockBuildCachePrune) Inspect(f func(ctx context.Context, opts types.BuildCachePruneOptions)) *mCommonAPIClientMockBuildCachePrune {
	if mmBuildCachePrune.mock.inspectFuncBuildCachePrune != nil {
		mmBuildCachePrune.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.BuildCachePrune")
	}

	mmBuildCachePrune.mock.inspectFuncBuildCachePrune = f

	return mmBuildCachePrune
}

// Return sets up results that will be returned by CommonAPIClient.BuildCachePrune
func (mmBuildCachePrune *mCommonAPIClientMockBuildCachePrune) Return(bp1 *types.BuildCachePruneReport, err error) *CommonAPIClientMock {
	if mmBuildCachePrune.mock.funcBuildCachePrune != nil {
		mmBuildCachePrune.mock.t.Fatalf("CommonAPIClientMock.BuildCachePrune mock is already set by Set")
	}

	if mmBuildCachePrune.defaultExpectation == nil {
		mmBuildCachePrune.defaultExpectation = &CommonAPIClientMockBuildCachePruneExpectation{mock: mmBuildCachePrune.mock}
	}
	mmBuildCachePrune.defaultExpectation.results = &CommonAPIClientMockBuildCachePruneResults{bp1, err}
	return mmBuildCachePrune.mock
}

//Set uses given function f to mock the CommonAPIClient.BuildCachePrune method
func (mmBuildCachePrune *mCommonAPIClientMockBuildCachePrune) Set(f func(ctx context.Context, opts types.BuildCachePruneOptions) (bp1 *types.BuildCachePruneReport, err error)) *CommonAPIClientMock {
	if mmBuildCachePrune.defaultExpectation != nil {
		mmBuildCachePrune.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.BuildCachePrune method")
	}

	if len(mmBuildCachePrune.expectations) > 0 {
		mmBuildCachePrune.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.BuildCachePrune method")
	}

	mmBuildCachePrune.mock.funcBuildCachePrune = f
	return mmBuildCachePrune.mock
}

// When sets expectation for the CommonAPIClient.BuildCachePrune which will trigger the result defined by the following
// Then helper
func (mmBuildCachePrune *mCommonAPIClientMockBuildCachePrune) When(ctx context.Context, opts types.BuildCachePruneOptions) *CommonAPIClientMockBuildCachePruneExpectation {
	if mmBuildCachePrune.mock.funcBuildCachePrune != nil {
		mmBuildCachePrune.mock.t.Fatalf("CommonAPIClientMock.BuildCachePrune mock is already set by Set")
	}

	expectation := &CommonAPIClientMockBuildCachePruneExpectation{
		mock:   mmBuildCachePrune.mock,
		params: &CommonAPIClientMockBuildCachePruneParams{ctx, opts},
	}
	mmBuildCachePrune.expectations = append(mmBuildCachePrune.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.BuildCachePrune return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockBuildCachePruneExpectation) Then(bp1 *types.BuildCachePruneReport, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockBuildCachePruneResults{bp1, err}
	return e.mock
}

// BuildCachePrune implements client.CommonAPIClient
func (mmBuildCachePrune *CommonAPIClientMock) BuildCachePrune(ctx context.Context, opts types.BuildCachePruneOptions) (bp1 *types.BuildCachePruneReport, err error) {
	mm_atomic.AddUint64(&mmBuildCachePrune.beforeBuildCachePruneCounter, 1)
	defer mm_atomic.AddUint64(&mmBuildCachePrune.afterBuildCachePruneCounter, 1)

	if mmBuildCachePrune.inspectFuncBuildCachePrune != nil {
		mmBuildCachePrune.inspectFuncBuildCachePrune(ctx, opts)
	}

	mm_params := &CommonAPIClientMockBuildCachePruneParams{ctx, opts}

	// Record call args
	mmBuildCachePrune.BuildCachePruneMock.mutex.Lock()
	mmBuildCachePrune.BuildCachePruneMock.callArgs = append(mmBuildCachePrune.BuildCachePruneMock.callArgs, mm_params)
	mmBuildCachePrune.BuildCachePruneMock.mutex.Unlock()

	for _, e := range mmBuildCachePrune.BuildCachePruneMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.bp1, e.results.err
		}
	}

	if mmBuildCachePrune.BuildCachePruneMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmBuildCachePrune.BuildCachePruneMock.defaultExpectation.Counter, 1)
		mm_want := mmBuildCachePrune.BuildCachePruneMock.defaultExpectation.params
		mm_got := CommonAPIClientMockBuildCachePruneParams{ctx, opts}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmBuildCachePrune.t.Errorf("CommonAPIClientMock.BuildCachePrune got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmBuildCachePrune.BuildCachePruneMock.defaultExpectation.results
		if mm_results == nil {
			mmBuildCachePrune.t.Fatal("No results are set for the CommonAPIClientMock.BuildCachePrune")
		}
		return (*mm_results).bp1, (*mm_results).err
	}
	if mmBuildCachePrune.funcBuildCachePrune != nil {
		return mmBuildCachePrune.funcBuildCachePrune(ctx, opts)
	}
	mmBuildCachePrune.t.Fatalf("Unexpected call to CommonAPIClientMock.BuildCachePrune. %v %v", ctx, opts)
	return
}

// BuildCachePruneAfterCounter returns a count of finished CommonAPIClientMock.BuildCachePrune invocations
func (mmBuildCachePrune *CommonAPIClientMock) BuildCachePruneAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBuildCachePrune.afterBuildCachePruneCounter)
}

// BuildCachePruneBeforeCounter returns a count of CommonAPIClientMock.BuildCachePrune invocations
func (mmBuildCachePrune *CommonAPIClientMock) BuildCachePruneBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBuildCachePrune.beforeBuildCachePruneCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.BuildCachePrune.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmBuildCachePrune *mCommonAPIClientMockBuildCachePrune) Calls() []*CommonAPIClientMockBuildCachePruneParams {
	mmBuildCachePrune.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockBuildCachePruneParams, len(mmBuildCachePrune.callArgs))
	copy(argCopy, mmBuildCachePrune.callArgs)

	mmBuildCachePrune.mutex.RUnlock()

	return argCopy
}

// MinimockBuildCachePruneDone returns true if the count of the BuildCachePrune invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockBuildCachePruneDone() bool {
	for _, e := range m.BuildCachePruneMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.BuildCachePruneMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterBuildCachePruneCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcBuildCachePrune != nil && mm_atomic.LoadUint64(&m.afterBuildCachePruneCounter) < 1 {
		return false
	}
	return true
}

// MinimockBuildCachePruneInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockBuildCachePruneInspect() {
	for _, e := range m.BuildCachePruneMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.BuildCachePrune with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.BuildCachePruneMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterBuildCachePruneCounter) < 1 {
		if m.BuildCachePruneMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.BuildCachePrune")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.BuildCachePrune with params: %#v", *m.BuildCachePruneMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcBuildCachePrune != nil && mm_atomic.LoadUint64(&m.afterBuildCachePruneCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.BuildCachePrune")
	}
}

type mCommonAPIClientMockBuildCancel struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockBuildCancelExpectation
	expectations       []*CommonAPIClientMockBuildCancelExpectation

	callArgs []*CommonAPIClientMockBuildCancelParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockBuildCancelExpectation specifies expectation struct of the CommonAPIClient.BuildCancel
type CommonAPIClientMockBuildCancelExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockBuildCancelParams
	results *CommonAPIClientMockBuildCancelResults
	Counter uint64
}

// CommonAPIClientMockBuildCancelParams contains parameters of the CommonAPIClient.BuildCancel
type CommonAPIClientMockBuildCancelParams struct {
	ctx context.Context
	id  string
}

// CommonAPIClientMockBuildCancelResults contains results of the CommonAPIClient.BuildCancel
type CommonAPIClientMockBuildCancelResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.BuildCancel
func (mmBuildCancel *mCommonAPIClientMockBuildCancel) Expect(ctx context.Context, id string) *mCommonAPIClientMockBuildCancel {
	if mmBuildCancel.mock.funcBuildCancel != nil {
		mmBuildCancel.mock.t.Fatalf("CommonAPIClientMock.BuildCancel mock is already set by Set")
	}

	if mmBuildCancel.defaultExpectation == nil {
		mmBuildCancel.defaultExpectation = &CommonAPIClientMockBuildCancelExpectation{}
	}

	mmBuildCancel.defaultExpectation.params = &CommonAPIClientMockBuildCancelParams{ctx, id}
	for _, e := range mmBuildCancel.expectations {
		if minimock.Equal(e.params, mmBuildCancel.defaultExpectation.params) {
			mmBuildCancel.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmBuildCancel.defaultExpectation.params)
		}
	}

	return mmBuildCancel
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.BuildCancel
func (mmBuildCancel *mCommonAPIClientMockBuildCancel) Inspect(f func(ctx context.Context, id string)) *mCommonAPIClientMockBuildCancel {
	if mmBuildCancel.mock.inspectFuncBuildCancel != nil {
		mmBuildCancel.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.BuildCancel")
	}

	mmBuildCancel.mock.inspectFuncBuildCancel = f

	return mmBuildCancel
}

// Return sets up results that will be returned by CommonAPIClient.BuildCancel
func (mmBuildCancel *mCommonAPIClientMockBuildCancel) Return(err error) *CommonAPIClientMock {
	if mmBuildCancel.mock.funcBuildCancel != nil {
		mmBuildCancel.mock.t.Fatalf("CommonAPIClientMock.BuildCancel mock is already set by Set")
	}

	if mmBuildCancel.defaultExpectation == nil {
		mmBuildCancel.defaultExpectation = &CommonAPIClientMockBuildCancelExpectation{mock: mmBuildCancel.mock}
	}
	mmBuildCancel.defaultExpectation.results = &CommonAPIClientMockBuildCancelResults{err}
	return mmBuildCancel.mock
}

//Set uses given function f to mock the CommonAPIClient.BuildCancel method
func (mmBuildCancel *mCommonAPIClientMockBuildCancel) Set(f func(ctx context.Context, id string) (err error)) *CommonAPIClientMock {
	if mmBuildCancel.defaultExpectation != nil {
		mmBuildCancel.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.BuildCancel method")
	}

	if len(mmBuildCancel.expectations) > 0 {
		mmBuildCancel.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.BuildCancel method")
	}

	mmBuildCancel.mock.funcBuildCancel = f
	return mmBuildCancel.mock
}

// When sets expectation for the CommonAPIClient.BuildCancel which will trigger the result defined by the following
// Then helper
func (mmBuildCancel *mCommonAPIClientMockBuildCancel) When(ctx context.Context, id string) *CommonAPIClientMockBuildCancelExpectation {
	if mmBuildCancel.mock.funcBuildCancel != nil {
		mmBuildCancel.mock.t.Fatalf("CommonAPIClientMock.BuildCancel mock is already set by Set")
	}

	expectation := &CommonAPIClientMockBuildCancelExpectation{
		mock:   mmBuildCancel.mock,
		params: &CommonAPIClientMockBuildCancelParams{ctx, id},
	}
	mmBuildCancel.expectations = append(mmBuildCancel.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.BuildCancel return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockBuildCancelExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockBuildCancelResults{err}
	return e.mock
}

// BuildCancel implements client.CommonAPIClient
func (mmBuildCancel *CommonAPIClientMock) BuildCancel(ctx context.Context, id string) (err error) {
	mm_atomic.AddUint64(&mmBuildCancel.beforeBuildCancelCounter, 1)
	defer mm_atomic.AddUint64(&mmBuildCancel.afterBuildCancelCounter, 1)

	if mmBuildCancel.inspectFuncBuildCancel != nil {
		mmBuildCancel.inspectFuncBuildCancel(ctx, id)
	}

	mm_params := &CommonAPIClientMockBuildCancelParams{ctx, id}

	// Record call args
	mmBuildCancel.BuildCancelMock.mutex.Lock()
	mmBuildCancel.BuildCancelMock.callArgs = append(mmBuildCancel.BuildCancelMock.callArgs, mm_params)
	mmBuildCancel.BuildCancelMock.mutex.Unlock()

	for _, e := range mmBuildCancel.BuildCancelMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmBuildCancel.BuildCancelMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmBuildCancel.BuildCancelMock.defaultExpectation.Counter, 1)
		mm_want := mmBuildCancel.BuildCancelMock.defaultExpectation.params
		mm_got := CommonAPIClientMockBuildCancelParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmBuildCancel.t.Errorf("CommonAPIClientMock.BuildCancel got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmBuildCancel.BuildCancelMock.defaultExpectation.results
		if mm_results == nil {
			mmBuildCancel.t.Fatal("No results are set for the CommonAPIClientMock.BuildCancel")
		}
		return (*mm_results).err
	}
	if mmBuildCancel.funcBuildCancel != nil {
		return mmBuildCancel.funcBuildCancel(ctx, id)
	}
	mmBuildCancel.t.Fatalf("Unexpected call to CommonAPIClientMock.BuildCancel. %v %v", ctx, id)
	return
}

// BuildCancelAfterCounter returns a count of finished CommonAPIClientMock.BuildCancel invocations
func (mmBuildCancel *CommonAPIClientMock) BuildCancelAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBuildCancel.afterBuildCancelCounter)
}

// BuildCancelBeforeCounter returns a count of CommonAPIClientMock.BuildCancel invocations
func (mmBuildCancel *CommonAPIClientMock) BuildCancelBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBuildCancel.beforeBuildCancelCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.BuildCancel.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmBuildCancel *mCommonAPIClientMockBuildCancel) Calls() []*CommonAPIClientMockBuildCancelParams {
	mmBuildCancel.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockBuildCancelParams, len(mmBuildCancel.callArgs))
	copy(argCopy, mmBuildCancel.callArgs)

	mmBuildCancel.mutex.RUnlock()

	return argCopy
}

// MinimockBuildCancelDone returns true if the count of the BuildCancel invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockBuildCancelDone() bool {
	for _, e := range m.BuildCancelMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.BuildCancelMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterBuildCancelCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcBuildCancel != nil && mm_atomic.LoadUint64(&m.afterBuildCancelCounter) < 1 {
		return false
	}
	return true
}

// MinimockBuildCancelInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockBuildCancelInspect() {
	for _, e := range m.BuildCancelMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.BuildCancel with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.BuildCancelMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterBuildCancelCounter) < 1 {
		if m.BuildCancelMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.BuildCancel")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.BuildCancel with params: %#v", *m.BuildCancelMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcBuildCancel != nil && mm_atomic.LoadUint64(&m.afterBuildCancelCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.BuildCancel")
	}
}

type mCommonAPIClientMockClientVersion struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockClientVersionExpectation
	expectations       []*CommonAPIClientMockClientVersionExpectation
}

// CommonAPIClientMockClientVersionExpectation specifies expectation struct of the CommonAPIClient.ClientVersion
type CommonAPIClientMockClientVersionExpectation struct {
	mock *CommonAPIClientMock

	results *CommonAPIClientMockClientVersionResults
	Counter uint64
}

// CommonAPIClientMockClientVersionResults contains results of the CommonAPIClient.ClientVersion
type CommonAPIClientMockClientVersionResults struct {
	s1 string
}

// Expect sets up expected params for CommonAPIClient.ClientVersion
func (mmClientVersion *mCommonAPIClientMockClientVersion) Expect() *mCommonAPIClientMockClientVersion {
	if mmClientVersion.mock.funcClientVersion != nil {
		mmClientVersion.mock.t.Fatalf("CommonAPIClientMock.ClientVersion mock is already set by Set")
	}

	if mmClientVersion.defaultExpectation == nil {
		mmClientVersion.defaultExpectation = &CommonAPIClientMockClientVersionExpectation{}
	}

	return mmClientVersion
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ClientVersion
func (mmClientVersion *mCommonAPIClientMockClientVersion) Inspect(f func()) *mCommonAPIClientMockClientVersion {
	if mmClientVersion.mock.inspectFuncClientVersion != nil {
		mmClientVersion.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ClientVersion")
	}

	mmClientVersion.mock.inspectFuncClientVersion = f

	return mmClientVersion
}

// Return sets up results that will be returned by CommonAPIClient.ClientVersion
func (mmClientVersion *mCommonAPIClientMockClientVersion) Return(s1 string) *CommonAPIClientMock {
	if mmClientVersion.mock.funcClientVersion != nil {
		mmClientVersion.mock.t.Fatalf("CommonAPIClientMock.ClientVersion mock is already set by Set")
	}

	if mmClientVersion.defaultExpectation == nil {
		mmClientVersion.defaultExpectation = &CommonAPIClientMockClientVersionExpectation{mock: mmClientVersion.mock}
	}
	mmClientVersion.defaultExpectation.results = &CommonAPIClientMockClientVersionResults{s1}
	return mmClientVersion.mock
}

//Set uses given function f to mock the CommonAPIClient.ClientVersion method
func (mmClientVersion *mCommonAPIClientMockClientVersion) Set(f func() (s1 string)) *CommonAPIClientMock {
	if mmClientVersion.defaultExpectation != nil {
		mmClientVersion.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ClientVersion method")
	}

	if len(mmClientVersion.expectations) > 0 {
		mmClientVersion.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ClientVersion method")
	}

	mmClientVersion.mock.funcClientVersion = f
	return mmClientVersion.mock
}

// ClientVersion implements client.CommonAPIClient
func (mmClientVersion *CommonAPIClientMock) ClientVersion() (s1 string) {
	mm_atomic.AddUint64(&mmClientVersion.beforeClientVersionCounter, 1)
	defer mm_atomic.AddUint64(&mmClientVersion.afterClientVersionCounter, 1)

	if mmClientVersion.inspectFuncClientVersion != nil {
		mmClientVersion.inspectFuncClientVersion()
	}

	if mmClientVersion.ClientVersionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmClientVersion.ClientVersionMock.defaultExpectation.Counter, 1)

		mm_results := mmClientVersion.ClientVersionMock.defaultExpectation.results
		if mm_results == nil {
			mmClientVersion.t.Fatal("No results are set for the CommonAPIClientMock.ClientVersion")
		}
		return (*mm_results).s1
	}
	if mmClientVersion.funcClientVersion != nil {
		return mmClientVersion.funcClientVersion()
	}
	mmClientVersion.t.Fatalf("Unexpected call to CommonAPIClientMock.ClientVersion.")
	return
}

// ClientVersionAfterCounter returns a count of finished CommonAPIClientMock.ClientVersion invocations
func (mmClientVersion *CommonAPIClientMock) ClientVersionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClientVersion.afterClientVersionCounter)
}

// ClientVersionBeforeCounter returns a count of CommonAPIClientMock.ClientVersion invocations
func (mmClientVersion *CommonAPIClientMock) ClientVersionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClientVersion.beforeClientVersionCounter)
}

// MinimockClientVersionDone returns true if the count of the ClientVersion invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockClientVersionDone() bool {
	for _, e := range m.ClientVersionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ClientVersionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterClientVersionCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClientVersion != nil && mm_atomic.LoadUint64(&m.afterClientVersionCounter) < 1 {
		return false
	}
	return true
}

// MinimockClientVersionInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockClientVersionInspect() {
	for _, e := range m.ClientVersionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CommonAPIClientMock.ClientVersion")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ClientVersionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterClientVersionCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ClientVersion")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClientVersion != nil && mm_atomic.LoadUint64(&m.afterClientVersionCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ClientVersion")
	}
}

type mCommonAPIClientMockClose struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockCloseExpectation
	expectations       []*CommonAPIClientMockCloseExpectation
}

// CommonAPIClientMockCloseExpectation specifies expectation struct of the CommonAPIClient.Close
type CommonAPIClientMockCloseExpectation struct {
	mock *CommonAPIClientMock

	results *CommonAPIClientMockCloseResults
	Counter uint64
}

// CommonAPIClientMockCloseResults contains results of the CommonAPIClient.Close
type CommonAPIClientMockCloseResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.Close
func (mmClose *mCommonAPIClientMockClose) Expect() *mCommonAPIClientMockClose {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("CommonAPIClientMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &CommonAPIClientMockCloseExpectation{}
	}

	return mmClose
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.Close
func (mmClose *mCommonAPIClientMockClose) Inspect(f func()) *mCommonAPIClientMockClose {
	if mmClose.mock.inspectFuncClose != nil {
		mmClose.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.Close")
	}

	mmClose.mock.inspectFuncClose = f

	return mmClose
}

// Return sets up results that will be returned by CommonAPIClient.Close
func (mmClose *mCommonAPIClientMockClose) Return(err error) *CommonAPIClientMock {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("CommonAPIClientMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &CommonAPIClientMockCloseExpectation{mock: mmClose.mock}
	}
	mmClose.defaultExpectation.results = &CommonAPIClientMockCloseResults{err}
	return mmClose.mock
}

//Set uses given function f to mock the CommonAPIClient.Close method
func (mmClose *mCommonAPIClientMockClose) Set(f func() (err error)) *CommonAPIClientMock {
	if mmClose.defaultExpectation != nil {
		mmClose.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.Close method")
	}

	if len(mmClose.expectations) > 0 {
		mmClose.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.Close method")
	}

	mmClose.mock.funcClose = f
	return mmClose.mock
}

// Close implements client.CommonAPIClient
func (mmClose *CommonAPIClientMock) Close() (err error) {
	mm_atomic.AddUint64(&mmClose.beforeCloseCounter, 1)
	defer mm_atomic.AddUint64(&mmClose.afterCloseCounter, 1)

	if mmClose.inspectFuncClose != nil {
		mmClose.inspectFuncClose()
	}

	if mmClose.CloseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmClose.CloseMock.defaultExpectation.Counter, 1)

		mm_results := mmClose.CloseMock.defaultExpectation.results
		if mm_results == nil {
			mmClose.t.Fatal("No results are set for the CommonAPIClientMock.Close")
		}
		return (*mm_results).err
	}
	if mmClose.funcClose != nil {
		return mmClose.funcClose()
	}
	mmClose.t.Fatalf("Unexpected call to CommonAPIClientMock.Close.")
	return
}

// CloseAfterCounter returns a count of finished CommonAPIClientMock.Close invocations
func (mmClose *CommonAPIClientMock) CloseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.afterCloseCounter)
}

// CloseBeforeCounter returns a count of CommonAPIClientMock.Close invocations
func (mmClose *CommonAPIClientMock) CloseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.beforeCloseCounter)
}

// MinimockCloseDone returns true if the count of the Close invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockCloseDone() bool {
	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CloseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClose != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		return false
	}
	return true
}

// MinimockCloseInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockCloseInspect() {
	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CommonAPIClientMock.Close")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CloseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.Close")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClose != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.Close")
	}
}

type mCommonAPIClientMockConfigCreate struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockConfigCreateExpectation
	expectations       []*CommonAPIClientMockConfigCreateExpectation

	callArgs []*CommonAPIClientMockConfigCreateParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockConfigCreateExpectation specifies expectation struct of the CommonAPIClient.ConfigCreate
type CommonAPIClientMockConfigCreateExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockConfigCreateParams
	results *CommonAPIClientMockConfigCreateResults
	Counter uint64
}

// CommonAPIClientMockConfigCreateParams contains parameters of the CommonAPIClient.ConfigCreate
type CommonAPIClientMockConfigCreateParams struct {
	ctx    context.Context
	config swarm.ConfigSpec
}

// CommonAPIClientMockConfigCreateResults contains results of the CommonAPIClient.ConfigCreate
type CommonAPIClientMockConfigCreateResults struct {
	c2  types.ConfigCreateResponse
	err error
}

// Expect sets up expected params for CommonAPIClient.ConfigCreate
func (mmConfigCreate *mCommonAPIClientMockConfigCreate) Expect(ctx context.Context, config swarm.ConfigSpec) *mCommonAPIClientMockConfigCreate {
	if mmConfigCreate.mock.funcConfigCreate != nil {
		mmConfigCreate.mock.t.Fatalf("CommonAPIClientMock.ConfigCreate mock is already set by Set")
	}

	if mmConfigCreate.defaultExpectation == nil {
		mmConfigCreate.defaultExpectation = &CommonAPIClientMockConfigCreateExpectation{}
	}

	mmConfigCreate.defaultExpectation.params = &CommonAPIClientMockConfigCreateParams{ctx, config}
	for _, e := range mmConfigCreate.expectations {
		if minimock.Equal(e.params, mmConfigCreate.defaultExpectation.params) {
			mmConfigCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmConfigCreate.defaultExpectation.params)
		}
	}

	return mmConfigCreate
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ConfigCreate
func (mmConfigCreate *mCommonAPIClientMockConfigCreate) Inspect(f func(ctx context.Context, config swarm.ConfigSpec)) *mCommonAPIClientMockConfigCreate {
	if mmConfigCreate.mock.inspectFuncConfigCreate != nil {
		mmConfigCreate.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ConfigCreate")
	}

	mmConfigCreate.mock.inspectFuncConfigCreate = f

	return mmConfigCreate
}

// Return sets up results that will be returned by CommonAPIClient.ConfigCreate
func (mmConfigCreate *mCommonAPIClientMockConfigCreate) Return(c2 types.ConfigCreateResponse, err error) *CommonAPIClientMock {
	if mmConfigCreate.mock.funcConfigCreate != nil {
		mmConfigCreate.mock.t.Fatalf("CommonAPIClientMock.ConfigCreate mock is already set by Set")
	}

	if mmConfigCreate.defaultExpectation == nil {
		mmConfigCreate.defaultExpectation = &CommonAPIClientMockConfigCreateExpectation{mock: mmConfigCreate.mock}
	}
	mmConfigCreate.defaultExpectation.results = &CommonAPIClientMockConfigCreateResults{c2, err}
	return mmConfigCreate.mock
}

//Set uses given function f to mock the CommonAPIClient.ConfigCreate method
func (mmConfigCreate *mCommonAPIClientMockConfigCreate) Set(f func(ctx context.Context, config swarm.ConfigSpec) (c2 types.ConfigCreateResponse, err error)) *CommonAPIClientMock {
	if mmConfigCreate.defaultExpectation != nil {
		mmConfigCreate.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ConfigCreate method")
	}

	if len(mmConfigCreate.expectations) > 0 {
		mmConfigCreate.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ConfigCreate method")
	}

	mmConfigCreate.mock.funcConfigCreate = f
	return mmConfigCreate.mock
}

// When sets expectation for the CommonAPIClient.ConfigCreate which will trigger the result defined by the following
// Then helper
func (mmConfigCreate *mCommonAPIClientMockConfigCreate) When(ctx context.Context, config swarm.ConfigSpec) *CommonAPIClientMockConfigCreateExpectation {
	if mmConfigCreate.mock.funcConfigCreate != nil {
		mmConfigCreate.mock.t.Fatalf("CommonAPIClientMock.ConfigCreate mock is already set by Set")
	}

	expectation := &CommonAPIClientMockConfigCreateExpectation{
		mock:   mmConfigCreate.mock,
		params: &CommonAPIClientMockConfigCreateParams{ctx, config},
	}
	mmConfigCreate.expectations = append(mmConfigCreate.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ConfigCreate return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockConfigCreateExpectation) Then(c2 types.ConfigCreateResponse, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockConfigCreateResults{c2, err}
	return e.mock
}

// ConfigCreate implements client.CommonAPIClient
func (mmConfigCreate *CommonAPIClientMock) ConfigCreate(ctx context.Context, config swarm.ConfigSpec) (c2 types.ConfigCreateResponse, err error) {
	mm_atomic.AddUint64(&mmConfigCreate.beforeConfigCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmConfigCreate.afterConfigCreateCounter, 1)

	if mmConfigCreate.inspectFuncConfigCreate != nil {
		mmConfigCreate.inspectFuncConfigCreate(ctx, config)
	}

	mm_params := &CommonAPIClientMockConfigCreateParams{ctx, config}

	// Record call args
	mmConfigCreate.ConfigCreateMock.mutex.Lock()
	mmConfigCreate.ConfigCreateMock.callArgs = append(mmConfigCreate.ConfigCreateMock.callArgs, mm_params)
	mmConfigCreate.ConfigCreateMock.mutex.Unlock()

	for _, e := range mmConfigCreate.ConfigCreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.c2, e.results.err
		}
	}

	if mmConfigCreate.ConfigCreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmConfigCreate.ConfigCreateMock.defaultExpectation.Counter, 1)
		mm_want := mmConfigCreate.ConfigCreateMock.defaultExpectation.params
		mm_got := CommonAPIClientMockConfigCreateParams{ctx, config}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmConfigCreate.t.Errorf("CommonAPIClientMock.ConfigCreate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmConfigCreate.ConfigCreateMock.defaultExpectation.results
		if mm_results == nil {
			mmConfigCreate.t.Fatal("No results are set for the CommonAPIClientMock.ConfigCreate")
		}
		return (*mm_results).c2, (*mm_results).err
	}
	if mmConfigCreate.funcConfigCreate != nil {
		return mmConfigCreate.funcConfigCreate(ctx, config)
	}
	mmConfigCreate.t.Fatalf("Unexpected call to CommonAPIClientMock.ConfigCreate. %v %v", ctx, config)
	return
}

// ConfigCreateAfterCounter returns a count of finished CommonAPIClientMock.ConfigCreate invocations
func (mmConfigCreate *CommonAPIClientMock) ConfigCreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConfigCreate.afterConfigCreateCounter)
}

// ConfigCreateBeforeCounter returns a count of CommonAPIClientMock.ConfigCreate invocations
func (mmConfigCreate *CommonAPIClientMock) ConfigCreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConfigCreate.beforeConfigCreateCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ConfigCreate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmConfigCreate *mCommonAPIClientMockConfigCreate) Calls() []*CommonAPIClientMockConfigCreateParams {
	mmConfigCreate.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockConfigCreateParams, len(mmConfigCreate.callArgs))
	copy(argCopy, mmConfigCreate.callArgs)

	mmConfigCreate.mutex.RUnlock()

	return argCopy
}

// MinimockConfigCreateDone returns true if the count of the ConfigCreate invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockConfigCreateDone() bool {
	for _, e := range m.ConfigCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ConfigCreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterConfigCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcConfigCreate != nil && mm_atomic.LoadUint64(&m.afterConfigCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockConfigCreateInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockConfigCreateInspect() {
	for _, e := range m.ConfigCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ConfigCreate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ConfigCreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterConfigCreateCounter) < 1 {
		if m.ConfigCreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ConfigCreate")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ConfigCreate with params: %#v", *m.ConfigCreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcConfigCreate != nil && mm_atomic.LoadUint64(&m.afterConfigCreateCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ConfigCreate")
	}
}

type mCommonAPIClientMockConfigInspectWithRaw struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockConfigInspectWithRawExpectation
	expectations       []*CommonAPIClientMockConfigInspectWithRawExpectation

	callArgs []*CommonAPIClientMockConfigInspectWithRawParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockConfigInspectWithRawExpectation specifies expectation struct of the CommonAPIClient.ConfigInspectWithRaw
type CommonAPIClientMockConfigInspectWithRawExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockConfigInspectWithRawParams
	results *CommonAPIClientMockConfigInspectWithRawResults
	Counter uint64
}

// CommonAPIClientMockConfigInspectWithRawParams contains parameters of the CommonAPIClient.ConfigInspectWithRaw
type CommonAPIClientMockConfigInspectWithRawParams struct {
	ctx  context.Context
	name string
}

// CommonAPIClientMockConfigInspectWithRawResults contains results of the CommonAPIClient.ConfigInspectWithRaw
type CommonAPIClientMockConfigInspectWithRawResults struct {
	c2  swarm.Config
	ba1 []byte
	err error
}

// Expect sets up expected params for CommonAPIClient.ConfigInspectWithRaw
func (mmConfigInspectWithRaw *mCommonAPIClientMockConfigInspectWithRaw) Expect(ctx context.Context, name string) *mCommonAPIClientMockConfigInspectWithRaw {
	if mmConfigInspectWithRaw.mock.funcConfigInspectWithRaw != nil {
		mmConfigInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.ConfigInspectWithRaw mock is already set by Set")
	}

	if mmConfigInspectWithRaw.defaultExpectation == nil {
		mmConfigInspectWithRaw.defaultExpectation = &CommonAPIClientMockConfigInspectWithRawExpectation{}
	}

	mmConfigInspectWithRaw.defaultExpectation.params = &CommonAPIClientMockConfigInspectWithRawParams{ctx, name}
	for _, e := range mmConfigInspectWithRaw.expectations {
		if minimock.Equal(e.params, mmConfigInspectWithRaw.defaultExpectation.params) {
			mmConfigInspectWithRaw.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmConfigInspectWithRaw.defaultExpectation.params)
		}
	}

	return mmConfigInspectWithRaw
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ConfigInspectWithRaw
func (mmConfigInspectWithRaw *mCommonAPIClientMockConfigInspectWithRaw) Inspect(f func(ctx context.Context, name string)) *mCommonAPIClientMockConfigInspectWithRaw {
	if mmConfigInspectWithRaw.mock.inspectFuncConfigInspectWithRaw != nil {
		mmConfigInspectWithRaw.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ConfigInspectWithRaw")
	}

	mmConfigInspectWithRaw.mock.inspectFuncConfigInspectWithRaw = f

	return mmConfigInspectWithRaw
}

// Return sets up results that will be returned by CommonAPIClient.ConfigInspectWithRaw
func (mmConfigInspectWithRaw *mCommonAPIClientMockConfigInspectWithRaw) Return(c2 swarm.Config, ba1 []byte, err error) *CommonAPIClientMock {
	if mmConfigInspectWithRaw.mock.funcConfigInspectWithRaw != nil {
		mmConfigInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.ConfigInspectWithRaw mock is already set by Set")
	}

	if mmConfigInspectWithRaw.defaultExpectation == nil {
		mmConfigInspectWithRaw.defaultExpectation = &CommonAPIClientMockConfigInspectWithRawExpectation{mock: mmConfigInspectWithRaw.mock}
	}
	mmConfigInspectWithRaw.defaultExpectation.results = &CommonAPIClientMockConfigInspectWithRawResults{c2, ba1, err}
	return mmConfigInspectWithRaw.mock
}

//Set uses given function f to mock the CommonAPIClient.ConfigInspectWithRaw method
func (mmConfigInspectWithRaw *mCommonAPIClientMockConfigInspectWithRaw) Set(f func(ctx context.Context, name string) (c2 swarm.Config, ba1 []byte, err error)) *CommonAPIClientMock {
	if mmConfigInspectWithRaw.defaultExpectation != nil {
		mmConfigInspectWithRaw.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ConfigInspectWithRaw method")
	}

	if len(mmConfigInspectWithRaw.expectations) > 0 {
		mmConfigInspectWithRaw.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ConfigInspectWithRaw method")
	}

	mmConfigInspectWithRaw.mock.funcConfigInspectWithRaw = f
	return mmConfigInspectWithRaw.mock
}

// When sets expectation for the CommonAPIClient.ConfigInspectWithRaw which will trigger the result defined by the following
// Then helper
func (mmConfigInspectWithRaw *mCommonAPIClientMockConfigInspectWithRaw) When(ctx context.Context, name string) *CommonAPIClientMockConfigInspectWithRawExpectation {
	if mmConfigInspectWithRaw.mock.funcConfigInspectWithRaw != nil {
		mmConfigInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.ConfigInspectWithRaw mock is already set by Set")
	}

	expectation := &CommonAPIClientMockConfigInspectWithRawExpectation{
		mock:   mmConfigInspectWithRaw.mock,
		params: &CommonAPIClientMockConfigInspectWithRawParams{ctx, name},
	}
	mmConfigInspectWithRaw.expectations = append(mmConfigInspectWithRaw.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ConfigInspectWithRaw return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockConfigInspectWithRawExpectation) Then(c2 swarm.Config, ba1 []byte, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockConfigInspectWithRawResults{c2, ba1, err}
	return e.mock
}

// ConfigInspectWithRaw implements client.CommonAPIClient
func (mmConfigInspectWithRaw *CommonAPIClientMock) ConfigInspectWithRaw(ctx context.Context, name string) (c2 swarm.Config, ba1 []byte, err error) {
	mm_atomic.AddUint64(&mmConfigInspectWithRaw.beforeConfigInspectWithRawCounter, 1)
	defer mm_atomic.AddUint64(&mmConfigInspectWithRaw.afterConfigInspectWithRawCounter, 1)

	if mmConfigInspectWithRaw.inspectFuncConfigInspectWithRaw != nil {
		mmConfigInspectWithRaw.inspectFuncConfigInspectWithRaw(ctx, name)
	}

	mm_params := &CommonAPIClientMockConfigInspectWithRawParams{ctx, name}

	// Record call args
	mmConfigInspectWithRaw.ConfigInspectWithRawMock.mutex.Lock()
	mmConfigInspectWithRaw.ConfigInspectWithRawMock.callArgs = append(mmConfigInspectWithRaw.ConfigInspectWithRawMock.callArgs, mm_params)
	mmConfigInspectWithRaw.ConfigInspectWithRawMock.mutex.Unlock()

	for _, e := range mmConfigInspectWithRaw.ConfigInspectWithRawMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.c2, e.results.ba1, e.results.err
		}
	}

	if mmConfigInspectWithRaw.ConfigInspectWithRawMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmConfigInspectWithRaw.ConfigInspectWithRawMock.defaultExpectation.Counter, 1)
		mm_want := mmConfigInspectWithRaw.ConfigInspectWithRawMock.defaultExpectation.params
		mm_got := CommonAPIClientMockConfigInspectWithRawParams{ctx, name}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmConfigInspectWithRaw.t.Errorf("CommonAPIClientMock.ConfigInspectWithRaw got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmConfigInspectWithRaw.ConfigInspectWithRawMock.defaultExpectation.results
		if mm_results == nil {
			mmConfigInspectWithRaw.t.Fatal("No results are set for the CommonAPIClientMock.ConfigInspectWithRaw")
		}
		return (*mm_results).c2, (*mm_results).ba1, (*mm_results).err
	}
	if mmConfigInspectWithRaw.funcConfigInspectWithRaw != nil {
		return mmConfigInspectWithRaw.funcConfigInspectWithRaw(ctx, name)
	}
	mmConfigInspectWithRaw.t.Fatalf("Unexpected call to CommonAPIClientMock.ConfigInspectWithRaw. %v %v", ctx, name)
	return
}

// ConfigInspectWithRawAfterCounter returns a count of finished CommonAPIClientMock.ConfigInspectWithRaw invocations
func (mmConfigInspectWithRaw *CommonAPIClientMock) ConfigInspectWithRawAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConfigInspectWithRaw.afterConfigInspectWithRawCounter)
}

// ConfigInspectWithRawBeforeCounter returns a count of CommonAPIClientMock.ConfigInspectWithRaw invocations
func (mmConfigInspectWithRaw *CommonAPIClientMock) ConfigInspectWithRawBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConfigInspectWithRaw.beforeConfigInspectWithRawCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ConfigInspectWithRaw.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmConfigInspectWithRaw *mCommonAPIClientMockConfigInspectWithRaw) Calls() []*CommonAPIClientMockConfigInspectWithRawParams {
	mmConfigInspectWithRaw.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockConfigInspectWithRawParams, len(mmConfigInspectWithRaw.callArgs))
	copy(argCopy, mmConfigInspectWithRaw.callArgs)

	mmConfigInspectWithRaw.mutex.RUnlock()

	return argCopy
}

// MinimockConfigInspectWithRawDone returns true if the count of the ConfigInspectWithRaw invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockConfigInspectWithRawDone() bool {
	for _, e := range m.ConfigInspectWithRawMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ConfigInspectWithRawMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterConfigInspectWithRawCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcConfigInspectWithRaw != nil && mm_atomic.LoadUint64(&m.afterConfigInspectWithRawCounter) < 1 {
		return false
	}
	return true
}

// MinimockConfigInspectWithRawInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockConfigInspectWithRawInspect() {
	for _, e := range m.ConfigInspectWithRawMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ConfigInspectWithRaw with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ConfigInspectWithRawMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterConfigInspectWithRawCounter) < 1 {
		if m.ConfigInspectWithRawMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ConfigInspectWithRaw")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ConfigInspectWithRaw with params: %#v", *m.ConfigInspectWithRawMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcConfigInspectWithRaw != nil && mm_atomic.LoadUint64(&m.afterConfigInspectWithRawCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ConfigInspectWithRaw")
	}
}

type mCommonAPIClientMockConfigList struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockConfigListExpectation
	expectations       []*CommonAPIClientMockConfigListExpectation

	callArgs []*CommonAPIClientMockConfigListParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockConfigListExpectation specifies expectation struct of the CommonAPIClient.ConfigList
type CommonAPIClientMockConfigListExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockConfigListParams
	results *CommonAPIClientMockConfigListResults
	Counter uint64
}

// CommonAPIClientMockConfigListParams contains parameters of the CommonAPIClient.ConfigList
type CommonAPIClientMockConfigListParams struct {
	ctx     context.Context
	options types.ConfigListOptions
}

// CommonAPIClientMockConfigListResults contains results of the CommonAPIClient.ConfigList
type CommonAPIClientMockConfigListResults struct {
	ca1 []swarm.Config
	err error
}

// Expect sets up expected params for CommonAPIClient.ConfigList
func (mmConfigList *mCommonAPIClientMockConfigList) Expect(ctx context.Context, options types.ConfigListOptions) *mCommonAPIClientMockConfigList {
	if mmConfigList.mock.funcConfigList != nil {
		mmConfigList.mock.t.Fatalf("CommonAPIClientMock.ConfigList mock is already set by Set")
	}

	if mmConfigList.defaultExpectation == nil {
		mmConfigList.defaultExpectation = &CommonAPIClientMockConfigListExpectation{}
	}

	mmConfigList.defaultExpectation.params = &CommonAPIClientMockConfigListParams{ctx, options}
	for _, e := range mmConfigList.expectations {
		if minimock.Equal(e.params, mmConfigList.defaultExpectation.params) {
			mmConfigList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmConfigList.defaultExpectation.params)
		}
	}

	return mmConfigList
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ConfigList
func (mmConfigList *mCommonAPIClientMockConfigList) Inspect(f func(ctx context.Context, options types.ConfigListOptions)) *mCommonAPIClientMockConfigList {
	if mmConfigList.mock.inspectFuncConfigList != nil {
		mmConfigList.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ConfigList")
	}

	mmConfigList.mock.inspectFuncConfigList = f

	return mmConfigList
}

// Return sets up results that will be returned by CommonAPIClient.ConfigList
func (mmConfigList *mCommonAPIClientMockConfigList) Return(ca1 []swarm.Config, err error) *CommonAPIClientMock {
	if mmConfigList.mock.funcConfigList != nil {
		mmConfigList.mock.t.Fatalf("CommonAPIClientMock.ConfigList mock is already set by Set")
	}

	if mmConfigList.defaultExpectation == nil {
		mmConfigList.defaultExpectation = &CommonAPIClientMockConfigListExpectation{mock: mmConfigList.mock}
	}
	mmConfigList.defaultExpectation.results = &CommonAPIClientMockConfigListResults{ca1, err}
	return mmConfigList.mock
}

//Set uses given function f to mock the CommonAPIClient.ConfigList method
func (mmConfigList *mCommonAPIClientMockConfigList) Set(f func(ctx context.Context, options types.ConfigListOptions) (ca1 []swarm.Config, err error)) *CommonAPIClientMock {
	if mmConfigList.defaultExpectation != nil {
		mmConfigList.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ConfigList method")
	}

	if len(mmConfigList.expectations) > 0 {
		mmConfigList.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ConfigList method")
	}

	mmConfigList.mock.funcConfigList = f
	return mmConfigList.mock
}

// When sets expectation for the CommonAPIClient.ConfigList which will trigger the result defined by the following
// Then helper
func (mmConfigList *mCommonAPIClientMockConfigList) When(ctx context.Context, options types.ConfigListOptions) *CommonAPIClientMockConfigListExpectation {
	if mmConfigList.mock.funcConfigList != nil {
		mmConfigList.mock.t.Fatalf("CommonAPIClientMock.ConfigList mock is already set by Set")
	}

	expectation := &CommonAPIClientMockConfigListExpectation{
		mock:   mmConfigList.mock,
		params: &CommonAPIClientMockConfigListParams{ctx, options},
	}
	mmConfigList.expectations = append(mmConfigList.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ConfigList return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockConfigListExpectation) Then(ca1 []swarm.Config, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockConfigListResults{ca1, err}
	return e.mock
}

// ConfigList implements client.CommonAPIClient
func (mmConfigList *CommonAPIClientMock) ConfigList(ctx context.Context, options types.ConfigListOptions) (ca1 []swarm.Config, err error) {
	mm_atomic.AddUint64(&mmConfigList.beforeConfigListCounter, 1)
	defer mm_atomic.AddUint64(&mmConfigList.afterConfigListCounter, 1)

	if mmConfigList.inspectFuncConfigList != nil {
		mmConfigList.inspectFuncConfigList(ctx, options)
	}

	mm_params := &CommonAPIClientMockConfigListParams{ctx, options}

	// Record call args
	mmConfigList.ConfigListMock.mutex.Lock()
	mmConfigList.ConfigListMock.callArgs = append(mmConfigList.ConfigListMock.callArgs, mm_params)
	mmConfigList.ConfigListMock.mutex.Unlock()

	for _, e := range mmConfigList.ConfigListMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ca1, e.results.err
		}
	}

	if mmConfigList.ConfigListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmConfigList.ConfigListMock.defaultExpectation.Counter, 1)
		mm_want := mmConfigList.ConfigListMock.defaultExpectation.params
		mm_got := CommonAPIClientMockConfigListParams{ctx, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmConfigList.t.Errorf("CommonAPIClientMock.ConfigList got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmConfigList.ConfigListMock.defaultExpectation.results
		if mm_results == nil {
			mmConfigList.t.Fatal("No results are set for the CommonAPIClientMock.ConfigList")
		}
		return (*mm_results).ca1, (*mm_results).err
	}
	if mmConfigList.funcConfigList != nil {
		return mmConfigList.funcConfigList(ctx, options)
	}
	mmConfigList.t.Fatalf("Unexpected call to CommonAPIClientMock.ConfigList. %v %v", ctx, options)
	return
}

// ConfigListAfterCounter returns a count of finished CommonAPIClientMock.ConfigList invocations
func (mmConfigList *CommonAPIClientMock) ConfigListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConfigList.afterConfigListCounter)
}

// ConfigListBeforeCounter returns a count of CommonAPIClientMock.ConfigList invocations
func (mmConfigList *CommonAPIClientMock) ConfigListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConfigList.beforeConfigListCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ConfigList.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmConfigList *mCommonAPIClientMockConfigList) Calls() []*CommonAPIClientMockConfigListParams {
	mmConfigList.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockConfigListParams, len(mmConfigList.callArgs))
	copy(argCopy, mmConfigList.callArgs)

	mmConfigList.mutex.RUnlock()

	return argCopy
}

// MinimockConfigListDone returns true if the count of the ConfigList invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockConfigListDone() bool {
	for _, e := range m.ConfigListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ConfigListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterConfigListCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcConfigList != nil && mm_atomic.LoadUint64(&m.afterConfigListCounter) < 1 {
		return false
	}
	return true
}

// MinimockConfigListInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockConfigListInspect() {
	for _, e := range m.ConfigListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ConfigList with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ConfigListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterConfigListCounter) < 1 {
		if m.ConfigListMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ConfigList")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ConfigList with params: %#v", *m.ConfigListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcConfigList != nil && mm_atomic.LoadUint64(&m.afterConfigListCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ConfigList")
	}
}

type mCommonAPIClientMockConfigRemove struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockConfigRemoveExpectation
	expectations       []*CommonAPIClientMockConfigRemoveExpectation

	callArgs []*CommonAPIClientMockConfigRemoveParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockConfigRemoveExpectation specifies expectation struct of the CommonAPIClient.ConfigRemove
type CommonAPIClientMockConfigRemoveExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockConfigRemoveParams
	results *CommonAPIClientMockConfigRemoveResults
	Counter uint64
}

// CommonAPIClientMockConfigRemoveParams contains parameters of the CommonAPIClient.ConfigRemove
type CommonAPIClientMockConfigRemoveParams struct {
	ctx context.Context
	id  string
}

// CommonAPIClientMockConfigRemoveResults contains results of the CommonAPIClient.ConfigRemove
type CommonAPIClientMockConfigRemoveResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.ConfigRemove
func (mmConfigRemove *mCommonAPIClientMockConfigRemove) Expect(ctx context.Context, id string) *mCommonAPIClientMockConfigRemove {
	if mmConfigRemove.mock.funcConfigRemove != nil {
		mmConfigRemove.mock.t.Fatalf("CommonAPIClientMock.ConfigRemove mock is already set by Set")
	}

	if mmConfigRemove.defaultExpectation == nil {
		mmConfigRemove.defaultExpectation = &CommonAPIClientMockConfigRemoveExpectation{}
	}

	mmConfigRemove.defaultExpectation.params = &CommonAPIClientMockConfigRemoveParams{ctx, id}
	for _, e := range mmConfigRemove.expectations {
		if minimock.Equal(e.params, mmConfigRemove.defaultExpectation.params) {
			mmConfigRemove.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmConfigRemove.defaultExpectation.params)
		}
	}

	return mmConfigRemove
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ConfigRemove
func (mmConfigRemove *mCommonAPIClientMockConfigRemove) Inspect(f func(ctx context.Context, id string)) *mCommonAPIClientMockConfigRemove {
	if mmConfigRemove.mock.inspectFuncConfigRemove != nil {
		mmConfigRemove.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ConfigRemove")
	}

	mmConfigRemove.mock.inspectFuncConfigRemove = f

	return mmConfigRemove
}

// Return sets up results that will be returned by CommonAPIClient.ConfigRemove
func (mmConfigRemove *mCommonAPIClientMockConfigRemove) Return(err error) *CommonAPIClientMock {
	if mmConfigRemove.mock.funcConfigRemove != nil {
		mmConfigRemove.mock.t.Fatalf("CommonAPIClientMock.ConfigRemove mock is already set by Set")
	}

	if mmConfigRemove.defaultExpectation == nil {
		mmConfigRemove.defaultExpectation = &CommonAPIClientMockConfigRemoveExpectation{mock: mmConfigRemove.mock}
	}
	mmConfigRemove.defaultExpectation.results = &CommonAPIClientMockConfigRemoveResults{err}
	return mmConfigRemove.mock
}

//Set uses given function f to mock the CommonAPIClient.ConfigRemove method
func (mmConfigRemove *mCommonAPIClientMockConfigRemove) Set(f func(ctx context.Context, id string) (err error)) *CommonAPIClientMock {
	if mmConfigRemove.defaultExpectation != nil {
		mmConfigRemove.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ConfigRemove method")
	}

	if len(mmConfigRemove.expectations) > 0 {
		mmConfigRemove.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ConfigRemove method")
	}

	mmConfigRemove.mock.funcConfigRemove = f
	return mmConfigRemove.mock
}

// When sets expectation for the CommonAPIClient.ConfigRemove which will trigger the result defined by the following
// Then helper
func (mmConfigRemove *mCommonAPIClientMockConfigRemove) When(ctx context.Context, id string) *CommonAPIClientMockConfigRemoveExpectation {
	if mmConfigRemove.mock.funcConfigRemove != nil {
		mmConfigRemove.mock.t.Fatalf("CommonAPIClientMock.ConfigRemove mock is already set by Set")
	}

	expectation := &CommonAPIClientMockConfigRemoveExpectation{
		mock:   mmConfigRemove.mock,
		params: &CommonAPIClientMockConfigRemoveParams{ctx, id},
	}
	mmConfigRemove.expectations = append(mmConfigRemove.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ConfigRemove return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockConfigRemoveExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockConfigRemoveResults{err}
	return e.mock
}

// ConfigRemove implements client.CommonAPIClient
func (mmConfigRemove *CommonAPIClientMock) ConfigRemove(ctx context.Context, id string) (err error) {
	mm_atomic.AddUint64(&mmConfigRemove.beforeConfigRemoveCounter, 1)
	defer mm_atomic.AddUint64(&mmConfigRemove.afterConfigRemoveCounter, 1)

	if mmConfigRemove.inspectFuncConfigRemove != nil {
		mmConfigRemove.inspectFuncConfigRemove(ctx, id)
	}

	mm_params := &CommonAPIClientMockConfigRemoveParams{ctx, id}

	// Record call args
	mmConfigRemove.ConfigRemoveMock.mutex.Lock()
	mmConfigRemove.ConfigRemoveMock.callArgs = append(mmConfigRemove.ConfigRemoveMock.callArgs, mm_params)
	mmConfigRemove.ConfigRemoveMock.mutex.Unlock()

	for _, e := range mmConfigRemove.ConfigRemoveMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmConfigRemove.ConfigRemoveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmConfigRemove.ConfigRemoveMock.defaultExpectation.Counter, 1)
		mm_want := mmConfigRemove.ConfigRemoveMock.defaultExpectation.params
		mm_got := CommonAPIClientMockConfigRemoveParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmConfigRemove.t.Errorf("CommonAPIClientMock.ConfigRemove got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmConfigRemove.ConfigRemoveMock.defaultExpectation.results
		if mm_results == nil {
			mmConfigRemove.t.Fatal("No results are set for the CommonAPIClientMock.ConfigRemove")
		}
		return (*mm_results).err
	}
	if mmConfigRemove.funcConfigRemove != nil {
		return mmConfigRemove.funcConfigRemove(ctx, id)
	}
	mmConfigRemove.t.Fatalf("Unexpected call to CommonAPIClientMock.ConfigRemove. %v %v", ctx, id)
	return
}

// ConfigRemoveAfterCounter returns a count of finished CommonAPIClientMock.ConfigRemove invocations
func (mmConfigRemove *CommonAPIClientMock) ConfigRemoveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConfigRemove.afterConfigRemoveCounter)
}

// ConfigRemoveBeforeCounter returns a count of CommonAPIClientMock.ConfigRemove invocations
func (mmConfigRemove *CommonAPIClientMock) ConfigRemoveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConfigRemove.beforeConfigRemoveCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ConfigRemove.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmConfigRemove *mCommonAPIClientMockConfigRemove) Calls() []*CommonAPIClientMockConfigRemoveParams {
	mmConfigRemove.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockConfigRemoveParams, len(mmConfigRemove.callArgs))
	copy(argCopy, mmConfigRemove.callArgs)

	mmConfigRemove.mutex.RUnlock()

	return argCopy
}

// MinimockConfigRemoveDone returns true if the count of the ConfigRemove invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockConfigRemoveDone() bool {
	for _, e := range m.ConfigRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ConfigRemoveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterConfigRemoveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcConfigRemove != nil && mm_atomic.LoadUint64(&m.afterConfigRemoveCounter) < 1 {
		return false
	}
	return true
}

// MinimockConfigRemoveInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockConfigRemoveInspect() {
	for _, e := range m.ConfigRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ConfigRemove with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ConfigRemoveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterConfigRemoveCounter) < 1 {
		if m.ConfigRemoveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ConfigRemove")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ConfigRemove with params: %#v", *m.ConfigRemoveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcConfigRemove != nil && mm_atomic.LoadUint64(&m.afterConfigRemoveCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ConfigRemove")
	}
}

type mCommonAPIClientMockConfigUpdate struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockConfigUpdateExpectation
	expectations       []*CommonAPIClientMockConfigUpdateExpectation

	callArgs []*CommonAPIClientMockConfigUpdateParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockConfigUpdateExpectation specifies expectation struct of the CommonAPIClient.ConfigUpdate
type CommonAPIClientMockConfigUpdateExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockConfigUpdateParams
	results *CommonAPIClientMockConfigUpdateResults
	Counter uint64
}

// CommonAPIClientMockConfigUpdateParams contains parameters of the CommonAPIClient.ConfigUpdate
type CommonAPIClientMockConfigUpdateParams struct {
	ctx     context.Context
	id      string
	version swarm.Version
	config  swarm.ConfigSpec
}

// CommonAPIClientMockConfigUpdateResults contains results of the CommonAPIClient.ConfigUpdate
type CommonAPIClientMockConfigUpdateResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.ConfigUpdate
func (mmConfigUpdate *mCommonAPIClientMockConfigUpdate) Expect(ctx context.Context, id string, version swarm.Version, config swarm.ConfigSpec) *mCommonAPIClientMockConfigUpdate {
	if mmConfigUpdate.mock.funcConfigUpdate != nil {
		mmConfigUpdate.mock.t.Fatalf("CommonAPIClientMock.ConfigUpdate mock is already set by Set")
	}

	if mmConfigUpdate.defaultExpectation == nil {
		mmConfigUpdate.defaultExpectation = &CommonAPIClientMockConfigUpdateExpectation{}
	}

	mmConfigUpdate.defaultExpectation.params = &CommonAPIClientMockConfigUpdateParams{ctx, id, version, config}
	for _, e := range mmConfigUpdate.expectations {
		if minimock.Equal(e.params, mmConfigUpdate.defaultExpectation.params) {
			mmConfigUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmConfigUpdate.defaultExpectation.params)
		}
	}

	return mmConfigUpdate
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ConfigUpdate
func (mmConfigUpdate *mCommonAPIClientMockConfigUpdate) Inspect(f func(ctx context.Context, id string, version swarm.Version, config swarm.ConfigSpec)) *mCommonAPIClientMockConfigUpdate {
	if mmConfigUpdate.mock.inspectFuncConfigUpdate != nil {
		mmConfigUpdate.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ConfigUpdate")
	}

	mmConfigUpdate.mock.inspectFuncConfigUpdate = f

	return mmConfigUpdate
}

// Return sets up results that will be returned by CommonAPIClient.ConfigUpdate
func (mmConfigUpdate *mCommonAPIClientMockConfigUpdate) Return(err error) *CommonAPIClientMock {
	if mmConfigUpdate.mock.funcConfigUpdate != nil {
		mmConfigUpdate.mock.t.Fatalf("CommonAPIClientMock.ConfigUpdate mock is already set by Set")
	}

	if mmConfigUpdate.defaultExpectation == nil {
		mmConfigUpdate.defaultExpectation = &CommonAPIClientMockConfigUpdateExpectation{mock: mmConfigUpdate.mock}
	}
	mmConfigUpdate.defaultExpectation.results = &CommonAPIClientMockConfigUpdateResults{err}
	return mmConfigUpdate.mock
}

//Set uses given function f to mock the CommonAPIClient.ConfigUpdate method
func (mmConfigUpdate *mCommonAPIClientMockConfigUpdate) Set(f func(ctx context.Context, id string, version swarm.Version, config swarm.ConfigSpec) (err error)) *CommonAPIClientMock {
	if mmConfigUpdate.defaultExpectation != nil {
		mmConfigUpdate.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ConfigUpdate method")
	}

	if len(mmConfigUpdate.expectations) > 0 {
		mmConfigUpdate.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ConfigUpdate method")
	}

	mmConfigUpdate.mock.funcConfigUpdate = f
	return mmConfigUpdate.mock
}

// When sets expectation for the CommonAPIClient.ConfigUpdate which will trigger the result defined by the following
// Then helper
func (mmConfigUpdate *mCommonAPIClientMockConfigUpdate) When(ctx context.Context, id string, version swarm.Version, config swarm.ConfigSpec) *CommonAPIClientMockConfigUpdateExpectation {
	if mmConfigUpdate.mock.funcConfigUpdate != nil {
		mmConfigUpdate.mock.t.Fatalf("CommonAPIClientMock.ConfigUpdate mock is already set by Set")
	}

	expectation := &CommonAPIClientMockConfigUpdateExpectation{
		mock:   mmConfigUpdate.mock,
		params: &CommonAPIClientMockConfigUpdateParams{ctx, id, version, config},
	}
	mmConfigUpdate.expectations = append(mmConfigUpdate.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ConfigUpdate return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockConfigUpdateExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockConfigUpdateResults{err}
	return e.mock
}

// ConfigUpdate implements client.CommonAPIClient
func (mmConfigUpdate *CommonAPIClientMock) ConfigUpdate(ctx context.Context, id string, version swarm.Version, config swarm.ConfigSpec) (err error) {
	mm_atomic.AddUint64(&mmConfigUpdate.beforeConfigUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmConfigUpdate.afterConfigUpdateCounter, 1)

	if mmConfigUpdate.inspectFuncConfigUpdate != nil {
		mmConfigUpdate.inspectFuncConfigUpdate(ctx, id, version, config)
	}

	mm_params := &CommonAPIClientMockConfigUpdateParams{ctx, id, version, config}

	// Record call args
	mmConfigUpdate.ConfigUpdateMock.mutex.Lock()
	mmConfigUpdate.ConfigUpdateMock.callArgs = append(mmConfigUpdate.ConfigUpdateMock.callArgs, mm_params)
	mmConfigUpdate.ConfigUpdateMock.mutex.Unlock()

	for _, e := range mmConfigUpdate.ConfigUpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmConfigUpdate.ConfigUpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmConfigUpdate.ConfigUpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmConfigUpdate.ConfigUpdateMock.defaultExpectation.params
		mm_got := CommonAPIClientMockConfigUpdateParams{ctx, id, version, config}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmConfigUpdate.t.Errorf("CommonAPIClientMock.ConfigUpdate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmConfigUpdate.ConfigUpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmConfigUpdate.t.Fatal("No results are set for the CommonAPIClientMock.ConfigUpdate")
		}
		return (*mm_results).err
	}
	if mmConfigUpdate.funcConfigUpdate != nil {
		return mmConfigUpdate.funcConfigUpdate(ctx, id, version, config)
	}
	mmConfigUpdate.t.Fatalf("Unexpected call to CommonAPIClientMock.ConfigUpdate. %v %v %v %v", ctx, id, version, config)
	return
}

// ConfigUpdateAfterCounter returns a count of finished CommonAPIClientMock.ConfigUpdate invocations
func (mmConfigUpdate *CommonAPIClientMock) ConfigUpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConfigUpdate.afterConfigUpdateCounter)
}

// ConfigUpdateBeforeCounter returns a count of CommonAPIClientMock.ConfigUpdate invocations
func (mmConfigUpdate *CommonAPIClientMock) ConfigUpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConfigUpdate.beforeConfigUpdateCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ConfigUpdate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmConfigUpdate *mCommonAPIClientMockConfigUpdate) Calls() []*CommonAPIClientMockConfigUpdateParams {
	mmConfigUpdate.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockConfigUpdateParams, len(mmConfigUpdate.callArgs))
	copy(argCopy, mmConfigUpdate.callArgs)

	mmConfigUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockConfigUpdateDone returns true if the count of the ConfigUpdate invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockConfigUpdateDone() bool {
	for _, e := range m.ConfigUpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ConfigUpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterConfigUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcConfigUpdate != nil && mm_atomic.LoadUint64(&m.afterConfigUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockConfigUpdateInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockConfigUpdateInspect() {
	for _, e := range m.ConfigUpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ConfigUpdate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ConfigUpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterConfigUpdateCounter) < 1 {
		if m.ConfigUpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ConfigUpdate")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ConfigUpdate with params: %#v", *m.ConfigUpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcConfigUpdate != nil && mm_atomic.LoadUint64(&m.afterConfigUpdateCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ConfigUpdate")
	}
}

type mCommonAPIClientMockContainerAttach struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerAttachExpectation
	expectations       []*CommonAPIClientMockContainerAttachExpectation

	callArgs []*CommonAPIClientMockContainerAttachParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerAttachExpectation specifies expectation struct of the CommonAPIClient.ContainerAttach
type CommonAPIClientMockContainerAttachExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerAttachParams
	results *CommonAPIClientMockContainerAttachResults
	Counter uint64
}

// CommonAPIClientMockContainerAttachParams contains parameters of the CommonAPIClient.ContainerAttach
type CommonAPIClientMockContainerAttachParams struct {
	ctx       context.Context
	container string
	options   types.ContainerAttachOptions
}

// CommonAPIClientMockContainerAttachResults contains results of the CommonAPIClient.ContainerAttach
type CommonAPIClientMockContainerAttachResults struct {
	h1  types.HijackedResponse
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerAttach
func (mmContainerAttach *mCommonAPIClientMockContainerAttach) Expect(ctx context.Context, container string, options types.ContainerAttachOptions) *mCommonAPIClientMockContainerAttach {
	if mmContainerAttach.mock.funcContainerAttach != nil {
		mmContainerAttach.mock.t.Fatalf("CommonAPIClientMock.ContainerAttach mock is already set by Set")
	}

	if mmContainerAttach.defaultExpectation == nil {
		mmContainerAttach.defaultExpectation = &CommonAPIClientMockContainerAttachExpectation{}
	}

	mmContainerAttach.defaultExpectation.params = &CommonAPIClientMockContainerAttachParams{ctx, container, options}
	for _, e := range mmContainerAttach.expectations {
		if minimock.Equal(e.params, mmContainerAttach.defaultExpectation.params) {
			mmContainerAttach.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerAttach.defaultExpectation.params)
		}
	}

	return mmContainerAttach
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerAttach
func (mmContainerAttach *mCommonAPIClientMockContainerAttach) Inspect(f func(ctx context.Context, container string, options types.ContainerAttachOptions)) *mCommonAPIClientMockContainerAttach {
	if mmContainerAttach.mock.inspectFuncContainerAttach != nil {
		mmContainerAttach.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerAttach")
	}

	mmContainerAttach.mock.inspectFuncContainerAttach = f

	return mmContainerAttach
}

// Return sets up results that will be returned by CommonAPIClient.ContainerAttach
func (mmContainerAttach *mCommonAPIClientMockContainerAttach) Return(h1 types.HijackedResponse, err error) *CommonAPIClientMock {
	if mmContainerAttach.mock.funcContainerAttach != nil {
		mmContainerAttach.mock.t.Fatalf("CommonAPIClientMock.ContainerAttach mock is already set by Set")
	}

	if mmContainerAttach.defaultExpectation == nil {
		mmContainerAttach.defaultExpectation = &CommonAPIClientMockContainerAttachExpectation{mock: mmContainerAttach.mock}
	}
	mmContainerAttach.defaultExpectation.results = &CommonAPIClientMockContainerAttachResults{h1, err}
	return mmContainerAttach.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerAttach method
func (mmContainerAttach *mCommonAPIClientMockContainerAttach) Set(f func(ctx context.Context, container string, options types.ContainerAttachOptions) (h1 types.HijackedResponse, err error)) *CommonAPIClientMock {
	if mmContainerAttach.defaultExpectation != nil {
		mmContainerAttach.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerAttach method")
	}

	if len(mmContainerAttach.expectations) > 0 {
		mmContainerAttach.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerAttach method")
	}

	mmContainerAttach.mock.funcContainerAttach = f
	return mmContainerAttach.mock
}

// When sets expectation for the CommonAPIClient.ContainerAttach which will trigger the result defined by the following
// Then helper
func (mmContainerAttach *mCommonAPIClientMockContainerAttach) When(ctx context.Context, container string, options types.ContainerAttachOptions) *CommonAPIClientMockContainerAttachExpectation {
	if mmContainerAttach.mock.funcContainerAttach != nil {
		mmContainerAttach.mock.t.Fatalf("CommonAPIClientMock.ContainerAttach mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerAttachExpectation{
		mock:   mmContainerAttach.mock,
		params: &CommonAPIClientMockContainerAttachParams{ctx, container, options},
	}
	mmContainerAttach.expectations = append(mmContainerAttach.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerAttach return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerAttachExpectation) Then(h1 types.HijackedResponse, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerAttachResults{h1, err}
	return e.mock
}

// ContainerAttach implements client.CommonAPIClient
func (mmContainerAttach *CommonAPIClientMock) ContainerAttach(ctx context.Context, container string, options types.ContainerAttachOptions) (h1 types.HijackedResponse, err error) {
	mm_atomic.AddUint64(&mmContainerAttach.beforeContainerAttachCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerAttach.afterContainerAttachCounter, 1)

	if mmContainerAttach.inspectFuncContainerAttach != nil {
		mmContainerAttach.inspectFuncContainerAttach(ctx, container, options)
	}

	mm_params := &CommonAPIClientMockContainerAttachParams{ctx, container, options}

	// Record call args
	mmContainerAttach.ContainerAttachMock.mutex.Lock()
	mmContainerAttach.ContainerAttachMock.callArgs = append(mmContainerAttach.ContainerAttachMock.callArgs, mm_params)
	mmContainerAttach.ContainerAttachMock.mutex.Unlock()

	for _, e := range mmContainerAttach.ContainerAttachMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.h1, e.results.err
		}
	}

	if mmContainerAttach.ContainerAttachMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerAttach.ContainerAttachMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerAttach.ContainerAttachMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerAttachParams{ctx, container, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerAttach.t.Errorf("CommonAPIClientMock.ContainerAttach got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerAttach.ContainerAttachMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerAttach.t.Fatal("No results are set for the CommonAPIClientMock.ContainerAttach")
		}
		return (*mm_results).h1, (*mm_results).err
	}
	if mmContainerAttach.funcContainerAttach != nil {
		return mmContainerAttach.funcContainerAttach(ctx, container, options)
	}
	mmContainerAttach.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerAttach. %v %v %v", ctx, container, options)
	return
}

// ContainerAttachAfterCounter returns a count of finished CommonAPIClientMock.ContainerAttach invocations
func (mmContainerAttach *CommonAPIClientMock) ContainerAttachAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerAttach.afterContainerAttachCounter)
}

// ContainerAttachBeforeCounter returns a count of CommonAPIClientMock.ContainerAttach invocations
func (mmContainerAttach *CommonAPIClientMock) ContainerAttachBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerAttach.beforeContainerAttachCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerAttach.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerAttach *mCommonAPIClientMockContainerAttach) Calls() []*CommonAPIClientMockContainerAttachParams {
	mmContainerAttach.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerAttachParams, len(mmContainerAttach.callArgs))
	copy(argCopy, mmContainerAttach.callArgs)

	mmContainerAttach.mutex.RUnlock()

	return argCopy
}

// MinimockContainerAttachDone returns true if the count of the ContainerAttach invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerAttachDone() bool {
	for _, e := range m.ContainerAttachMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerAttachMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerAttachCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerAttach != nil && mm_atomic.LoadUint64(&m.afterContainerAttachCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerAttachInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerAttachInspect() {
	for _, e := range m.ContainerAttachMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerAttach with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerAttachMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerAttachCounter) < 1 {
		if m.ContainerAttachMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerAttach")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerAttach with params: %#v", *m.ContainerAttachMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerAttach != nil && mm_atomic.LoadUint64(&m.afterContainerAttachCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerAttach")
	}
}

type mCommonAPIClientMockContainerCommit struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerCommitExpectation
	expectations       []*CommonAPIClientMockContainerCommitExpectation

	callArgs []*CommonAPIClientMockContainerCommitParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerCommitExpectation specifies expectation struct of the CommonAPIClient.ContainerCommit
type CommonAPIClientMockContainerCommitExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerCommitParams
	results *CommonAPIClientMockContainerCommitResults
	Counter uint64
}

// CommonAPIClientMockContainerCommitParams contains parameters of the CommonAPIClient.ContainerCommit
type CommonAPIClientMockContainerCommitParams struct {
	ctx       context.Context
	container string
	options   types.ContainerCommitOptions
}

// CommonAPIClientMockContainerCommitResults contains results of the CommonAPIClient.ContainerCommit
type CommonAPIClientMockContainerCommitResults struct {
	i1  types.IDResponse
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerCommit
func (mmContainerCommit *mCommonAPIClientMockContainerCommit) Expect(ctx context.Context, container string, options types.ContainerCommitOptions) *mCommonAPIClientMockContainerCommit {
	if mmContainerCommit.mock.funcContainerCommit != nil {
		mmContainerCommit.mock.t.Fatalf("CommonAPIClientMock.ContainerCommit mock is already set by Set")
	}

	if mmContainerCommit.defaultExpectation == nil {
		mmContainerCommit.defaultExpectation = &CommonAPIClientMockContainerCommitExpectation{}
	}

	mmContainerCommit.defaultExpectation.params = &CommonAPIClientMockContainerCommitParams{ctx, container, options}
	for _, e := range mmContainerCommit.expectations {
		if minimock.Equal(e.params, mmContainerCommit.defaultExpectation.params) {
			mmContainerCommit.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerCommit.defaultExpectation.params)
		}
	}

	return mmContainerCommit
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerCommit
func (mmContainerCommit *mCommonAPIClientMockContainerCommit) Inspect(f func(ctx context.Context, container string, options types.ContainerCommitOptions)) *mCommonAPIClientMockContainerCommit {
	if mmContainerCommit.mock.inspectFuncContainerCommit != nil {
		mmContainerCommit.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerCommit")
	}

	mmContainerCommit.mock.inspectFuncContainerCommit = f

	return mmContainerCommit
}

// Return sets up results that will be returned by CommonAPIClient.ContainerCommit
func (mmContainerCommit *mCommonAPIClientMockContainerCommit) Return(i1 types.IDResponse, err error) *CommonAPIClientMock {
	if mmContainerCommit.mock.funcContainerCommit != nil {
		mmContainerCommit.mock.t.Fatalf("CommonAPIClientMock.ContainerCommit mock is already set by Set")
	}

	if mmContainerCommit.defaultExpectation == nil {
		mmContainerCommit.defaultExpectation = &CommonAPIClientMockContainerCommitExpectation{mock: mmContainerCommit.mock}
	}
	mmContainerCommit.defaultExpectation.results = &CommonAPIClientMockContainerCommitResults{i1, err}
	return mmContainerCommit.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerCommit method
func (mmContainerCommit *mCommonAPIClientMockContainerCommit) Set(f func(ctx context.Context, container string, options types.ContainerCommitOptions) (i1 types.IDResponse, err error)) *CommonAPIClientMock {
	if mmContainerCommit.defaultExpectation != nil {
		mmContainerCommit.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerCommit method")
	}

	if len(mmContainerCommit.expectations) > 0 {
		mmContainerCommit.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerCommit method")
	}

	mmContainerCommit.mock.funcContainerCommit = f
	return mmContainerCommit.mock
}

// When sets expectation for the CommonAPIClient.ContainerCommit which will trigger the result defined by the following
// Then helper
func (mmContainerCommit *mCommonAPIClientMockContainerCommit) When(ctx context.Context, container string, options types.ContainerCommitOptions) *CommonAPIClientMockContainerCommitExpectation {
	if mmContainerCommit.mock.funcContainerCommit != nil {
		mmContainerCommit.mock.t.Fatalf("CommonAPIClientMock.ContainerCommit mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerCommitExpectation{
		mock:   mmContainerCommit.mock,
		params: &CommonAPIClientMockContainerCommitParams{ctx, container, options},
	}
	mmContainerCommit.expectations = append(mmContainerCommit.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerCommit return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerCommitExpectation) Then(i1 types.IDResponse, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerCommitResults{i1, err}
	return e.mock
}

// ContainerCommit implements client.CommonAPIClient
func (mmContainerCommit *CommonAPIClientMock) ContainerCommit(ctx context.Context, container string, options types.ContainerCommitOptions) (i1 types.IDResponse, err error) {
	mm_atomic.AddUint64(&mmContainerCommit.beforeContainerCommitCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerCommit.afterContainerCommitCounter, 1)

	if mmContainerCommit.inspectFuncContainerCommit != nil {
		mmContainerCommit.inspectFuncContainerCommit(ctx, container, options)
	}

	mm_params := &CommonAPIClientMockContainerCommitParams{ctx, container, options}

	// Record call args
	mmContainerCommit.ContainerCommitMock.mutex.Lock()
	mmContainerCommit.ContainerCommitMock.callArgs = append(mmContainerCommit.ContainerCommitMock.callArgs, mm_params)
	mmContainerCommit.ContainerCommitMock.mutex.Unlock()

	for _, e := range mmContainerCommit.ContainerCommitMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmContainerCommit.ContainerCommitMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerCommit.ContainerCommitMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerCommit.ContainerCommitMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerCommitParams{ctx, container, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerCommit.t.Errorf("CommonAPIClientMock.ContainerCommit got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerCommit.ContainerCommitMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerCommit.t.Fatal("No results are set for the CommonAPIClientMock.ContainerCommit")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmContainerCommit.funcContainerCommit != nil {
		return mmContainerCommit.funcContainerCommit(ctx, container, options)
	}
	mmContainerCommit.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerCommit. %v %v %v", ctx, container, options)
	return
}

// ContainerCommitAfterCounter returns a count of finished CommonAPIClientMock.ContainerCommit invocations
func (mmContainerCommit *CommonAPIClientMock) ContainerCommitAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerCommit.afterContainerCommitCounter)
}

// ContainerCommitBeforeCounter returns a count of CommonAPIClientMock.ContainerCommit invocations
func (mmContainerCommit *CommonAPIClientMock) ContainerCommitBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerCommit.beforeContainerCommitCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerCommit.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerCommit *mCommonAPIClientMockContainerCommit) Calls() []*CommonAPIClientMockContainerCommitParams {
	mmContainerCommit.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerCommitParams, len(mmContainerCommit.callArgs))
	copy(argCopy, mmContainerCommit.callArgs)

	mmContainerCommit.mutex.RUnlock()

	return argCopy
}

// MinimockContainerCommitDone returns true if the count of the ContainerCommit invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerCommitDone() bool {
	for _, e := range m.ContainerCommitMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerCommitMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerCommitCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerCommit != nil && mm_atomic.LoadUint64(&m.afterContainerCommitCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerCommitInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerCommitInspect() {
	for _, e := range m.ContainerCommitMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerCommit with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerCommitMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerCommitCounter) < 1 {
		if m.ContainerCommitMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerCommit")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerCommit with params: %#v", *m.ContainerCommitMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerCommit != nil && mm_atomic.LoadUint64(&m.afterContainerCommitCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerCommit")
	}
}

type mCommonAPIClientMockContainerCreate struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerCreateExpectation
	expectations       []*CommonAPIClientMockContainerCreateExpectation

	callArgs []*CommonAPIClientMockContainerCreateParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerCreateExpectation specifies expectation struct of the CommonAPIClient.ContainerCreate
type CommonAPIClientMockContainerCreateExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerCreateParams
	results *CommonAPIClientMockContainerCreateResults
	Counter uint64
}

// CommonAPIClientMockContainerCreateParams contains parameters of the CommonAPIClient.ContainerCreate
type CommonAPIClientMockContainerCreateParams struct {
	ctx              context.Context
	config           *containertypes.Config
	hostConfig       *containertypes.HostConfig
	networkingConfig *networktypes.NetworkingConfig
	containerName    string
}

// CommonAPIClientMockContainerCreateResults contains results of the CommonAPIClient.ContainerCreate
type CommonAPIClientMockContainerCreateResults struct {
	c2  containertypes.ContainerCreateCreatedBody
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerCreate
func (mmContainerCreate *mCommonAPIClientMockContainerCreate) Expect(ctx context.Context, config *containertypes.Config, hostConfig *containertypes.HostConfig, networkingConfig *networktypes.NetworkingConfig, containerName string) *mCommonAPIClientMockContainerCreate {
	if mmContainerCreate.mock.funcContainerCreate != nil {
		mmContainerCreate.mock.t.Fatalf("CommonAPIClientMock.ContainerCreate mock is already set by Set")
	}

	if mmContainerCreate.defaultExpectation == nil {
		mmContainerCreate.defaultExpectation = &CommonAPIClientMockContainerCreateExpectation{}
	}

	mmContainerCreate.defaultExpectation.params = &CommonAPIClientMockContainerCreateParams{ctx, config, hostConfig, networkingConfig, containerName}
	for _, e := range mmContainerCreate.expectations {
		if minimock.Equal(e.params, mmContainerCreate.defaultExpectation.params) {
			mmContainerCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerCreate.defaultExpectation.params)
		}
	}

	return mmContainerCreate
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerCreate
func (mmContainerCreate *mCommonAPIClientMockContainerCreate) Inspect(f func(ctx context.Context, config *containertypes.Config, hostConfig *containertypes.HostConfig, networkingConfig *networktypes.NetworkingConfig, containerName string)) *mCommonAPIClientMockContainerCreate {
	if mmContainerCreate.mock.inspectFuncContainerCreate != nil {
		mmContainerCreate.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerCreate")
	}

	mmContainerCreate.mock.inspectFuncContainerCreate = f

	return mmContainerCreate
}

// Return sets up results that will be returned by CommonAPIClient.ContainerCreate
func (mmContainerCreate *mCommonAPIClientMockContainerCreate) Return(c2 containertypes.ContainerCreateCreatedBody, err error) *CommonAPIClientMock {
	if mmContainerCreate.mock.funcContainerCreate != nil {
		mmContainerCreate.mock.t.Fatalf("CommonAPIClientMock.ContainerCreate mock is already set by Set")
	}

	if mmContainerCreate.defaultExpectation == nil {
		mmContainerCreate.defaultExpectation = &CommonAPIClientMockContainerCreateExpectation{mock: mmContainerCreate.mock}
	}
	mmContainerCreate.defaultExpectation.results = &CommonAPIClientMockContainerCreateResults{c2, err}
	return mmContainerCreate.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerCreate method
func (mmContainerCreate *mCommonAPIClientMockContainerCreate) Set(f func(ctx context.Context, config *containertypes.Config, hostConfig *containertypes.HostConfig, networkingConfig *networktypes.NetworkingConfig, containerName string) (c2 containertypes.ContainerCreateCreatedBody, err error)) *CommonAPIClientMock {
	if mmContainerCreate.defaultExpectation != nil {
		mmContainerCreate.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerCreate method")
	}

	if len(mmContainerCreate.expectations) > 0 {
		mmContainerCreate.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerCreate method")
	}

	mmContainerCreate.mock.funcContainerCreate = f
	return mmContainerCreate.mock
}

// When sets expectation for the CommonAPIClient.ContainerCreate which will trigger the result defined by the following
// Then helper
func (mmContainerCreate *mCommonAPIClientMockContainerCreate) When(ctx context.Context, config *containertypes.Config, hostConfig *containertypes.HostConfig, networkingConfig *networktypes.NetworkingConfig, containerName string) *CommonAPIClientMockContainerCreateExpectation {
	if mmContainerCreate.mock.funcContainerCreate != nil {
		mmContainerCreate.mock.t.Fatalf("CommonAPIClientMock.ContainerCreate mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerCreateExpectation{
		mock:   mmContainerCreate.mock,
		params: &CommonAPIClientMockContainerCreateParams{ctx, config, hostConfig, networkingConfig, containerName},
	}
	mmContainerCreate.expectations = append(mmContainerCreate.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerCreate return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerCreateExpectation) Then(c2 containertypes.ContainerCreateCreatedBody, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerCreateResults{c2, err}
	return e.mock
}

// ContainerCreate implements client.CommonAPIClient
func (mmContainerCreate *CommonAPIClientMock) ContainerCreate(ctx context.Context, config *containertypes.Config, hostConfig *containertypes.HostConfig, networkingConfig *networktypes.NetworkingConfig, containerName string) (c2 containertypes.ContainerCreateCreatedBody, err error) {
	mm_atomic.AddUint64(&mmContainerCreate.beforeContainerCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerCreate.afterContainerCreateCounter, 1)

	if mmContainerCreate.inspectFuncContainerCreate != nil {
		mmContainerCreate.inspectFuncContainerCreate(ctx, config, hostConfig, networkingConfig, containerName)
	}

	mm_params := &CommonAPIClientMockContainerCreateParams{ctx, config, hostConfig, networkingConfig, containerName}

	// Record call args
	mmContainerCreate.ContainerCreateMock.mutex.Lock()
	mmContainerCreate.ContainerCreateMock.callArgs = append(mmContainerCreate.ContainerCreateMock.callArgs, mm_params)
	mmContainerCreate.ContainerCreateMock.mutex.Unlock()

	for _, e := range mmContainerCreate.ContainerCreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.c2, e.results.err
		}
	}

	if mmContainerCreate.ContainerCreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerCreate.ContainerCreateMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerCreate.ContainerCreateMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerCreateParams{ctx, config, hostConfig, networkingConfig, containerName}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerCreate.t.Errorf("CommonAPIClientMock.ContainerCreate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerCreate.ContainerCreateMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerCreate.t.Fatal("No results are set for the CommonAPIClientMock.ContainerCreate")
		}
		return (*mm_results).c2, (*mm_results).err
	}
	if mmContainerCreate.funcContainerCreate != nil {
		return mmContainerCreate.funcContainerCreate(ctx, config, hostConfig, networkingConfig, containerName)
	}
	mmContainerCreate.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerCreate. %v %v %v %v %v", ctx, config, hostConfig, networkingConfig, containerName)
	return
}

// ContainerCreateAfterCounter returns a count of finished CommonAPIClientMock.ContainerCreate invocations
func (mmContainerCreate *CommonAPIClientMock) ContainerCreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerCreate.afterContainerCreateCounter)
}

// ContainerCreateBeforeCounter returns a count of CommonAPIClientMock.ContainerCreate invocations
func (mmContainerCreate *CommonAPIClientMock) ContainerCreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerCreate.beforeContainerCreateCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerCreate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerCreate *mCommonAPIClientMockContainerCreate) Calls() []*CommonAPIClientMockContainerCreateParams {
	mmContainerCreate.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerCreateParams, len(mmContainerCreate.callArgs))
	copy(argCopy, mmContainerCreate.callArgs)

	mmContainerCreate.mutex.RUnlock()

	return argCopy
}

// MinimockContainerCreateDone returns true if the count of the ContainerCreate invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerCreateDone() bool {
	for _, e := range m.ContainerCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerCreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerCreate != nil && mm_atomic.LoadUint64(&m.afterContainerCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerCreateInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerCreateInspect() {
	for _, e := range m.ContainerCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerCreate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerCreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerCreateCounter) < 1 {
		if m.ContainerCreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerCreate")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerCreate with params: %#v", *m.ContainerCreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerCreate != nil && mm_atomic.LoadUint64(&m.afterContainerCreateCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerCreate")
	}
}

type mCommonAPIClientMockContainerDiff struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerDiffExpectation
	expectations       []*CommonAPIClientMockContainerDiffExpectation

	callArgs []*CommonAPIClientMockContainerDiffParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerDiffExpectation specifies expectation struct of the CommonAPIClient.ContainerDiff
type CommonAPIClientMockContainerDiffExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerDiffParams
	results *CommonAPIClientMockContainerDiffResults
	Counter uint64
}

// CommonAPIClientMockContainerDiffParams contains parameters of the CommonAPIClient.ContainerDiff
type CommonAPIClientMockContainerDiffParams struct {
	ctx       context.Context
	container string
}

// CommonAPIClientMockContainerDiffResults contains results of the CommonAPIClient.ContainerDiff
type CommonAPIClientMockContainerDiffResults struct {
	ca1 []containertypes.ContainerChangeResponseItem
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerDiff
func (mmContainerDiff *mCommonAPIClientMockContainerDiff) Expect(ctx context.Context, container string) *mCommonAPIClientMockContainerDiff {
	if mmContainerDiff.mock.funcContainerDiff != nil {
		mmContainerDiff.mock.t.Fatalf("CommonAPIClientMock.ContainerDiff mock is already set by Set")
	}

	if mmContainerDiff.defaultExpectation == nil {
		mmContainerDiff.defaultExpectation = &CommonAPIClientMockContainerDiffExpectation{}
	}

	mmContainerDiff.defaultExpectation.params = &CommonAPIClientMockContainerDiffParams{ctx, container}
	for _, e := range mmContainerDiff.expectations {
		if minimock.Equal(e.params, mmContainerDiff.defaultExpectation.params) {
			mmContainerDiff.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerDiff.defaultExpectation.params)
		}
	}

	return mmContainerDiff
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerDiff
func (mmContainerDiff *mCommonAPIClientMockContainerDiff) Inspect(f func(ctx context.Context, container string)) *mCommonAPIClientMockContainerDiff {
	if mmContainerDiff.mock.inspectFuncContainerDiff != nil {
		mmContainerDiff.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerDiff")
	}

	mmContainerDiff.mock.inspectFuncContainerDiff = f

	return mmContainerDiff
}

// Return sets up results that will be returned by CommonAPIClient.ContainerDiff
func (mmContainerDiff *mCommonAPIClientMockContainerDiff) Return(ca1 []containertypes.ContainerChangeResponseItem, err error) *CommonAPIClientMock {
	if mmContainerDiff.mock.funcContainerDiff != nil {
		mmContainerDiff.mock.t.Fatalf("CommonAPIClientMock.ContainerDiff mock is already set by Set")
	}

	if mmContainerDiff.defaultExpectation == nil {
		mmContainerDiff.defaultExpectation = &CommonAPIClientMockContainerDiffExpectation{mock: mmContainerDiff.mock}
	}
	mmContainerDiff.defaultExpectation.results = &CommonAPIClientMockContainerDiffResults{ca1, err}
	return mmContainerDiff.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerDiff method
func (mmContainerDiff *mCommonAPIClientMockContainerDiff) Set(f func(ctx context.Context, container string) (ca1 []containertypes.ContainerChangeResponseItem, err error)) *CommonAPIClientMock {
	if mmContainerDiff.defaultExpectation != nil {
		mmContainerDiff.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerDiff method")
	}

	if len(mmContainerDiff.expectations) > 0 {
		mmContainerDiff.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerDiff method")
	}

	mmContainerDiff.mock.funcContainerDiff = f
	return mmContainerDiff.mock
}

// When sets expectation for the CommonAPIClient.ContainerDiff which will trigger the result defined by the following
// Then helper
func (mmContainerDiff *mCommonAPIClientMockContainerDiff) When(ctx context.Context, container string) *CommonAPIClientMockContainerDiffExpectation {
	if mmContainerDiff.mock.funcContainerDiff != nil {
		mmContainerDiff.mock.t.Fatalf("CommonAPIClientMock.ContainerDiff mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerDiffExpectation{
		mock:   mmContainerDiff.mock,
		params: &CommonAPIClientMockContainerDiffParams{ctx, container},
	}
	mmContainerDiff.expectations = append(mmContainerDiff.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerDiff return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerDiffExpectation) Then(ca1 []containertypes.ContainerChangeResponseItem, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerDiffResults{ca1, err}
	return e.mock
}

// ContainerDiff implements client.CommonAPIClient
func (mmContainerDiff *CommonAPIClientMock) ContainerDiff(ctx context.Context, container string) (ca1 []containertypes.ContainerChangeResponseItem, err error) {
	mm_atomic.AddUint64(&mmContainerDiff.beforeContainerDiffCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerDiff.afterContainerDiffCounter, 1)

	if mmContainerDiff.inspectFuncContainerDiff != nil {
		mmContainerDiff.inspectFuncContainerDiff(ctx, container)
	}

	mm_params := &CommonAPIClientMockContainerDiffParams{ctx, container}

	// Record call args
	mmContainerDiff.ContainerDiffMock.mutex.Lock()
	mmContainerDiff.ContainerDiffMock.callArgs = append(mmContainerDiff.ContainerDiffMock.callArgs, mm_params)
	mmContainerDiff.ContainerDiffMock.mutex.Unlock()

	for _, e := range mmContainerDiff.ContainerDiffMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ca1, e.results.err
		}
	}

	if mmContainerDiff.ContainerDiffMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerDiff.ContainerDiffMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerDiff.ContainerDiffMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerDiffParams{ctx, container}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerDiff.t.Errorf("CommonAPIClientMock.ContainerDiff got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerDiff.ContainerDiffMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerDiff.t.Fatal("No results are set for the CommonAPIClientMock.ContainerDiff")
		}
		return (*mm_results).ca1, (*mm_results).err
	}
	if mmContainerDiff.funcContainerDiff != nil {
		return mmContainerDiff.funcContainerDiff(ctx, container)
	}
	mmContainerDiff.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerDiff. %v %v", ctx, container)
	return
}

// ContainerDiffAfterCounter returns a count of finished CommonAPIClientMock.ContainerDiff invocations
func (mmContainerDiff *CommonAPIClientMock) ContainerDiffAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerDiff.afterContainerDiffCounter)
}

// ContainerDiffBeforeCounter returns a count of CommonAPIClientMock.ContainerDiff invocations
func (mmContainerDiff *CommonAPIClientMock) ContainerDiffBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerDiff.beforeContainerDiffCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerDiff.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerDiff *mCommonAPIClientMockContainerDiff) Calls() []*CommonAPIClientMockContainerDiffParams {
	mmContainerDiff.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerDiffParams, len(mmContainerDiff.callArgs))
	copy(argCopy, mmContainerDiff.callArgs)

	mmContainerDiff.mutex.RUnlock()

	return argCopy
}

// MinimockContainerDiffDone returns true if the count of the ContainerDiff invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerDiffDone() bool {
	for _, e := range m.ContainerDiffMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerDiffMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerDiffCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerDiff != nil && mm_atomic.LoadUint64(&m.afterContainerDiffCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerDiffInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerDiffInspect() {
	for _, e := range m.ContainerDiffMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerDiff with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerDiffMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerDiffCounter) < 1 {
		if m.ContainerDiffMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerDiff")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerDiff with params: %#v", *m.ContainerDiffMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerDiff != nil && mm_atomic.LoadUint64(&m.afterContainerDiffCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerDiff")
	}
}

type mCommonAPIClientMockContainerExecAttach struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerExecAttachExpectation
	expectations       []*CommonAPIClientMockContainerExecAttachExpectation

	callArgs []*CommonAPIClientMockContainerExecAttachParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerExecAttachExpectation specifies expectation struct of the CommonAPIClient.ContainerExecAttach
type CommonAPIClientMockContainerExecAttachExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerExecAttachParams
	results *CommonAPIClientMockContainerExecAttachResults
	Counter uint64
}

// CommonAPIClientMockContainerExecAttachParams contains parameters of the CommonAPIClient.ContainerExecAttach
type CommonAPIClientMockContainerExecAttachParams struct {
	ctx    context.Context
	execID string
	config types.ExecStartCheck
}

// CommonAPIClientMockContainerExecAttachResults contains results of the CommonAPIClient.ContainerExecAttach
type CommonAPIClientMockContainerExecAttachResults struct {
	h1  types.HijackedResponse
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerExecAttach
func (mmContainerExecAttach *mCommonAPIClientMockContainerExecAttach) Expect(ctx context.Context, execID string, config types.ExecStartCheck) *mCommonAPIClientMockContainerExecAttach {
	if mmContainerExecAttach.mock.funcContainerExecAttach != nil {
		mmContainerExecAttach.mock.t.Fatalf("CommonAPIClientMock.ContainerExecAttach mock is already set by Set")
	}

	if mmContainerExecAttach.defaultExpectation == nil {
		mmContainerExecAttach.defaultExpectation = &CommonAPIClientMockContainerExecAttachExpectation{}
	}

	mmContainerExecAttach.defaultExpectation.params = &CommonAPIClientMockContainerExecAttachParams{ctx, execID, config}
	for _, e := range mmContainerExecAttach.expectations {
		if minimock.Equal(e.params, mmContainerExecAttach.defaultExpectation.params) {
			mmContainerExecAttach.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerExecAttach.defaultExpectation.params)
		}
	}

	return mmContainerExecAttach
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerExecAttach
func (mmContainerExecAttach *mCommonAPIClientMockContainerExecAttach) Inspect(f func(ctx context.Context, execID string, config types.ExecStartCheck)) *mCommonAPIClientMockContainerExecAttach {
	if mmContainerExecAttach.mock.inspectFuncContainerExecAttach != nil {
		mmContainerExecAttach.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerExecAttach")
	}

	mmContainerExecAttach.mock.inspectFuncContainerExecAttach = f

	return mmContainerExecAttach
}

// Return sets up results that will be returned by CommonAPIClient.ContainerExecAttach
func (mmContainerExecAttach *mCommonAPIClientMockContainerExecAttach) Return(h1 types.HijackedResponse, err error) *CommonAPIClientMock {
	if mmContainerExecAttach.mock.funcContainerExecAttach != nil {
		mmContainerExecAttach.mock.t.Fatalf("CommonAPIClientMock.ContainerExecAttach mock is already set by Set")
	}

	if mmContainerExecAttach.defaultExpectation == nil {
		mmContainerExecAttach.defaultExpectation = &CommonAPIClientMockContainerExecAttachExpectation{mock: mmContainerExecAttach.mock}
	}
	mmContainerExecAttach.defaultExpectation.results = &CommonAPIClientMockContainerExecAttachResults{h1, err}
	return mmContainerExecAttach.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerExecAttach method
func (mmContainerExecAttach *mCommonAPIClientMockContainerExecAttach) Set(f func(ctx context.Context, execID string, config types.ExecStartCheck) (h1 types.HijackedResponse, err error)) *CommonAPIClientMock {
	if mmContainerExecAttach.defaultExpectation != nil {
		mmContainerExecAttach.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerExecAttach method")
	}

	if len(mmContainerExecAttach.expectations) > 0 {
		mmContainerExecAttach.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerExecAttach method")
	}

	mmContainerExecAttach.mock.funcContainerExecAttach = f
	return mmContainerExecAttach.mock
}

// When sets expectation for the CommonAPIClient.ContainerExecAttach which will trigger the result defined by the following
// Then helper
func (mmContainerExecAttach *mCommonAPIClientMockContainerExecAttach) When(ctx context.Context, execID string, config types.ExecStartCheck) *CommonAPIClientMockContainerExecAttachExpectation {
	if mmContainerExecAttach.mock.funcContainerExecAttach != nil {
		mmContainerExecAttach.mock.t.Fatalf("CommonAPIClientMock.ContainerExecAttach mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerExecAttachExpectation{
		mock:   mmContainerExecAttach.mock,
		params: &CommonAPIClientMockContainerExecAttachParams{ctx, execID, config},
	}
	mmContainerExecAttach.expectations = append(mmContainerExecAttach.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerExecAttach return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerExecAttachExpectation) Then(h1 types.HijackedResponse, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerExecAttachResults{h1, err}
	return e.mock
}

// ContainerExecAttach implements client.CommonAPIClient
func (mmContainerExecAttach *CommonAPIClientMock) ContainerExecAttach(ctx context.Context, execID string, config types.ExecStartCheck) (h1 types.HijackedResponse, err error) {
	mm_atomic.AddUint64(&mmContainerExecAttach.beforeContainerExecAttachCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerExecAttach.afterContainerExecAttachCounter, 1)

	if mmContainerExecAttach.inspectFuncContainerExecAttach != nil {
		mmContainerExecAttach.inspectFuncContainerExecAttach(ctx, execID, config)
	}

	mm_params := &CommonAPIClientMockContainerExecAttachParams{ctx, execID, config}

	// Record call args
	mmContainerExecAttach.ContainerExecAttachMock.mutex.Lock()
	mmContainerExecAttach.ContainerExecAttachMock.callArgs = append(mmContainerExecAttach.ContainerExecAttachMock.callArgs, mm_params)
	mmContainerExecAttach.ContainerExecAttachMock.mutex.Unlock()

	for _, e := range mmContainerExecAttach.ContainerExecAttachMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.h1, e.results.err
		}
	}

	if mmContainerExecAttach.ContainerExecAttachMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerExecAttach.ContainerExecAttachMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerExecAttach.ContainerExecAttachMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerExecAttachParams{ctx, execID, config}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerExecAttach.t.Errorf("CommonAPIClientMock.ContainerExecAttach got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerExecAttach.ContainerExecAttachMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerExecAttach.t.Fatal("No results are set for the CommonAPIClientMock.ContainerExecAttach")
		}
		return (*mm_results).h1, (*mm_results).err
	}
	if mmContainerExecAttach.funcContainerExecAttach != nil {
		return mmContainerExecAttach.funcContainerExecAttach(ctx, execID, config)
	}
	mmContainerExecAttach.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerExecAttach. %v %v %v", ctx, execID, config)
	return
}

// ContainerExecAttachAfterCounter returns a count of finished CommonAPIClientMock.ContainerExecAttach invocations
func (mmContainerExecAttach *CommonAPIClientMock) ContainerExecAttachAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerExecAttach.afterContainerExecAttachCounter)
}

// ContainerExecAttachBeforeCounter returns a count of CommonAPIClientMock.ContainerExecAttach invocations
func (mmContainerExecAttach *CommonAPIClientMock) ContainerExecAttachBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerExecAttach.beforeContainerExecAttachCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerExecAttach.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerExecAttach *mCommonAPIClientMockContainerExecAttach) Calls() []*CommonAPIClientMockContainerExecAttachParams {
	mmContainerExecAttach.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerExecAttachParams, len(mmContainerExecAttach.callArgs))
	copy(argCopy, mmContainerExecAttach.callArgs)

	mmContainerExecAttach.mutex.RUnlock()

	return argCopy
}

// MinimockContainerExecAttachDone returns true if the count of the ContainerExecAttach invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerExecAttachDone() bool {
	for _, e := range m.ContainerExecAttachMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerExecAttachMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerExecAttachCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerExecAttach != nil && mm_atomic.LoadUint64(&m.afterContainerExecAttachCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerExecAttachInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerExecAttachInspect() {
	for _, e := range m.ContainerExecAttachMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerExecAttach with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerExecAttachMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerExecAttachCounter) < 1 {
		if m.ContainerExecAttachMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerExecAttach")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerExecAttach with params: %#v", *m.ContainerExecAttachMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerExecAttach != nil && mm_atomic.LoadUint64(&m.afterContainerExecAttachCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerExecAttach")
	}
}

type mCommonAPIClientMockContainerExecCreate struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerExecCreateExpectation
	expectations       []*CommonAPIClientMockContainerExecCreateExpectation

	callArgs []*CommonAPIClientMockContainerExecCreateParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerExecCreateExpectation specifies expectation struct of the CommonAPIClient.ContainerExecCreate
type CommonAPIClientMockContainerExecCreateExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerExecCreateParams
	results *CommonAPIClientMockContainerExecCreateResults
	Counter uint64
}

// CommonAPIClientMockContainerExecCreateParams contains parameters of the CommonAPIClient.ContainerExecCreate
type CommonAPIClientMockContainerExecCreateParams struct {
	ctx       context.Context
	container string
	config    types.ExecConfig
}

// CommonAPIClientMockContainerExecCreateResults contains results of the CommonAPIClient.ContainerExecCreate
type CommonAPIClientMockContainerExecCreateResults struct {
	i1  types.IDResponse
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerExecCreate
func (mmContainerExecCreate *mCommonAPIClientMockContainerExecCreate) Expect(ctx context.Context, container string, config types.ExecConfig) *mCommonAPIClientMockContainerExecCreate {
	if mmContainerExecCreate.mock.funcContainerExecCreate != nil {
		mmContainerExecCreate.mock.t.Fatalf("CommonAPIClientMock.ContainerExecCreate mock is already set by Set")
	}

	if mmContainerExecCreate.defaultExpectation == nil {
		mmContainerExecCreate.defaultExpectation = &CommonAPIClientMockContainerExecCreateExpectation{}
	}

	mmContainerExecCreate.defaultExpectation.params = &CommonAPIClientMockContainerExecCreateParams{ctx, container, config}
	for _, e := range mmContainerExecCreate.expectations {
		if minimock.Equal(e.params, mmContainerExecCreate.defaultExpectation.params) {
			mmContainerExecCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerExecCreate.defaultExpectation.params)
		}
	}

	return mmContainerExecCreate
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerExecCreate
func (mmContainerExecCreate *mCommonAPIClientMockContainerExecCreate) Inspect(f func(ctx context.Context, container string, config types.ExecConfig)) *mCommonAPIClientMockContainerExecCreate {
	if mmContainerExecCreate.mock.inspectFuncContainerExecCreate != nil {
		mmContainerExecCreate.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerExecCreate")
	}

	mmContainerExecCreate.mock.inspectFuncContainerExecCreate = f

	return mmContainerExecCreate
}

// Return sets up results that will be returned by CommonAPIClient.ContainerExecCreate
func (mmContainerExecCreate *mCommonAPIClientMockContainerExecCreate) Return(i1 types.IDResponse, err error) *CommonAPIClientMock {
	if mmContainerExecCreate.mock.funcContainerExecCreate != nil {
		mmContainerExecCreate.mock.t.Fatalf("CommonAPIClientMock.ContainerExecCreate mock is already set by Set")
	}

	if mmContainerExecCreate.defaultExpectation == nil {
		mmContainerExecCreate.defaultExpectation = &CommonAPIClientMockContainerExecCreateExpectation{mock: mmContainerExecCreate.mock}
	}
	mmContainerExecCreate.defaultExpectation.results = &CommonAPIClientMockContainerExecCreateResults{i1, err}
	return mmContainerExecCreate.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerExecCreate method
func (mmContainerExecCreate *mCommonAPIClientMockContainerExecCreate) Set(f func(ctx context.Context, container string, config types.ExecConfig) (i1 types.IDResponse, err error)) *CommonAPIClientMock {
	if mmContainerExecCreate.defaultExpectation != nil {
		mmContainerExecCreate.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerExecCreate method")
	}

	if len(mmContainerExecCreate.expectations) > 0 {
		mmContainerExecCreate.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerExecCreate method")
	}

	mmContainerExecCreate.mock.funcContainerExecCreate = f
	return mmContainerExecCreate.mock
}

// When sets expectation for the CommonAPIClient.ContainerExecCreate which will trigger the result defined by the following
// Then helper
func (mmContainerExecCreate *mCommonAPIClientMockContainerExecCreate) When(ctx context.Context, container string, config types.ExecConfig) *CommonAPIClientMockContainerExecCreateExpectation {
	if mmContainerExecCreate.mock.funcContainerExecCreate != nil {
		mmContainerExecCreate.mock.t.Fatalf("CommonAPIClientMock.ContainerExecCreate mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerExecCreateExpectation{
		mock:   mmContainerExecCreate.mock,
		params: &CommonAPIClientMockContainerExecCreateParams{ctx, container, config},
	}
	mmContainerExecCreate.expectations = append(mmContainerExecCreate.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerExecCreate return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerExecCreateExpectation) Then(i1 types.IDResponse, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerExecCreateResults{i1, err}
	return e.mock
}

// ContainerExecCreate implements client.CommonAPIClient
func (mmContainerExecCreate *CommonAPIClientMock) ContainerExecCreate(ctx context.Context, container string, config types.ExecConfig) (i1 types.IDResponse, err error) {
	mm_atomic.AddUint64(&mmContainerExecCreate.beforeContainerExecCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerExecCreate.afterContainerExecCreateCounter, 1)

	if mmContainerExecCreate.inspectFuncContainerExecCreate != nil {
		mmContainerExecCreate.inspectFuncContainerExecCreate(ctx, container, config)
	}

	mm_params := &CommonAPIClientMockContainerExecCreateParams{ctx, container, config}

	// Record call args
	mmContainerExecCreate.ContainerExecCreateMock.mutex.Lock()
	mmContainerExecCreate.ContainerExecCreateMock.callArgs = append(mmContainerExecCreate.ContainerExecCreateMock.callArgs, mm_params)
	mmContainerExecCreate.ContainerExecCreateMock.mutex.Unlock()

	for _, e := range mmContainerExecCreate.ContainerExecCreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmContainerExecCreate.ContainerExecCreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerExecCreate.ContainerExecCreateMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerExecCreate.ContainerExecCreateMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerExecCreateParams{ctx, container, config}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerExecCreate.t.Errorf("CommonAPIClientMock.ContainerExecCreate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerExecCreate.ContainerExecCreateMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerExecCreate.t.Fatal("No results are set for the CommonAPIClientMock.ContainerExecCreate")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmContainerExecCreate.funcContainerExecCreate != nil {
		return mmContainerExecCreate.funcContainerExecCreate(ctx, container, config)
	}
	mmContainerExecCreate.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerExecCreate. %v %v %v", ctx, container, config)
	return
}

// ContainerExecCreateAfterCounter returns a count of finished CommonAPIClientMock.ContainerExecCreate invocations
func (mmContainerExecCreate *CommonAPIClientMock) ContainerExecCreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerExecCreate.afterContainerExecCreateCounter)
}

// ContainerExecCreateBeforeCounter returns a count of CommonAPIClientMock.ContainerExecCreate invocations
func (mmContainerExecCreate *CommonAPIClientMock) ContainerExecCreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerExecCreate.beforeContainerExecCreateCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerExecCreate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerExecCreate *mCommonAPIClientMockContainerExecCreate) Calls() []*CommonAPIClientMockContainerExecCreateParams {
	mmContainerExecCreate.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerExecCreateParams, len(mmContainerExecCreate.callArgs))
	copy(argCopy, mmContainerExecCreate.callArgs)

	mmContainerExecCreate.mutex.RUnlock()

	return argCopy
}

// MinimockContainerExecCreateDone returns true if the count of the ContainerExecCreate invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerExecCreateDone() bool {
	for _, e := range m.ContainerExecCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerExecCreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerExecCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerExecCreate != nil && mm_atomic.LoadUint64(&m.afterContainerExecCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerExecCreateInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerExecCreateInspect() {
	for _, e := range m.ContainerExecCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerExecCreate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerExecCreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerExecCreateCounter) < 1 {
		if m.ContainerExecCreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerExecCreate")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerExecCreate with params: %#v", *m.ContainerExecCreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerExecCreate != nil && mm_atomic.LoadUint64(&m.afterContainerExecCreateCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerExecCreate")
	}
}

type mCommonAPIClientMockContainerExecInspect struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerExecInspectExpectation
	expectations       []*CommonAPIClientMockContainerExecInspectExpectation

	callArgs []*CommonAPIClientMockContainerExecInspectParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerExecInspectExpectation specifies expectation struct of the CommonAPIClient.ContainerExecInspect
type CommonAPIClientMockContainerExecInspectExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerExecInspectParams
	results *CommonAPIClientMockContainerExecInspectResults
	Counter uint64
}

// CommonAPIClientMockContainerExecInspectParams contains parameters of the CommonAPIClient.ContainerExecInspect
type CommonAPIClientMockContainerExecInspectParams struct {
	ctx    context.Context
	execID string
}

// CommonAPIClientMockContainerExecInspectResults contains results of the CommonAPIClient.ContainerExecInspect
type CommonAPIClientMockContainerExecInspectResults struct {
	c2  types.ContainerExecInspect
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerExecInspect
func (mmContainerExecInspect *mCommonAPIClientMockContainerExecInspect) Expect(ctx context.Context, execID string) *mCommonAPIClientMockContainerExecInspect {
	if mmContainerExecInspect.mock.funcContainerExecInspect != nil {
		mmContainerExecInspect.mock.t.Fatalf("CommonAPIClientMock.ContainerExecInspect mock is already set by Set")
	}

	if mmContainerExecInspect.defaultExpectation == nil {
		mmContainerExecInspect.defaultExpectation = &CommonAPIClientMockContainerExecInspectExpectation{}
	}

	mmContainerExecInspect.defaultExpectation.params = &CommonAPIClientMockContainerExecInspectParams{ctx, execID}
	for _, e := range mmContainerExecInspect.expectations {
		if minimock.Equal(e.params, mmContainerExecInspect.defaultExpectation.params) {
			mmContainerExecInspect.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerExecInspect.defaultExpectation.params)
		}
	}

	return mmContainerExecInspect
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerExecInspect
func (mmContainerExecInspect *mCommonAPIClientMockContainerExecInspect) Inspect(f func(ctx context.Context, execID string)) *mCommonAPIClientMockContainerExecInspect {
	if mmContainerExecInspect.mock.inspectFuncContainerExecInspect != nil {
		mmContainerExecInspect.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerExecInspect")
	}

	mmContainerExecInspect.mock.inspectFuncContainerExecInspect = f

	return mmContainerExecInspect
}

// Return sets up results that will be returned by CommonAPIClient.ContainerExecInspect
func (mmContainerExecInspect *mCommonAPIClientMockContainerExecInspect) Return(c2 types.ContainerExecInspect, err error) *CommonAPIClientMock {
	if mmContainerExecInspect.mock.funcContainerExecInspect != nil {
		mmContainerExecInspect.mock.t.Fatalf("CommonAPIClientMock.ContainerExecInspect mock is already set by Set")
	}

	if mmContainerExecInspect.defaultExpectation == nil {
		mmContainerExecInspect.defaultExpectation = &CommonAPIClientMockContainerExecInspectExpectation{mock: mmContainerExecInspect.mock}
	}
	mmContainerExecInspect.defaultExpectation.results = &CommonAPIClientMockContainerExecInspectResults{c2, err}
	return mmContainerExecInspect.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerExecInspect method
func (mmContainerExecInspect *mCommonAPIClientMockContainerExecInspect) Set(f func(ctx context.Context, execID string) (c2 types.ContainerExecInspect, err error)) *CommonAPIClientMock {
	if mmContainerExecInspect.defaultExpectation != nil {
		mmContainerExecInspect.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerExecInspect method")
	}

	if len(mmContainerExecInspect.expectations) > 0 {
		mmContainerExecInspect.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerExecInspect method")
	}

	mmContainerExecInspect.mock.funcContainerExecInspect = f
	return mmContainerExecInspect.mock
}

// When sets expectation for the CommonAPIClient.ContainerExecInspect which will trigger the result defined by the following
// Then helper
func (mmContainerExecInspect *mCommonAPIClientMockContainerExecInspect) When(ctx context.Context, execID string) *CommonAPIClientMockContainerExecInspectExpectation {
	if mmContainerExecInspect.mock.funcContainerExecInspect != nil {
		mmContainerExecInspect.mock.t.Fatalf("CommonAPIClientMock.ContainerExecInspect mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerExecInspectExpectation{
		mock:   mmContainerExecInspect.mock,
		params: &CommonAPIClientMockContainerExecInspectParams{ctx, execID},
	}
	mmContainerExecInspect.expectations = append(mmContainerExecInspect.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerExecInspect return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerExecInspectExpectation) Then(c2 types.ContainerExecInspect, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerExecInspectResults{c2, err}
	return e.mock
}

// ContainerExecInspect implements client.CommonAPIClient
func (mmContainerExecInspect *CommonAPIClientMock) ContainerExecInspect(ctx context.Context, execID string) (c2 types.ContainerExecInspect, err error) {
	mm_atomic.AddUint64(&mmContainerExecInspect.beforeContainerExecInspectCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerExecInspect.afterContainerExecInspectCounter, 1)

	if mmContainerExecInspect.inspectFuncContainerExecInspect != nil {
		mmContainerExecInspect.inspectFuncContainerExecInspect(ctx, execID)
	}

	mm_params := &CommonAPIClientMockContainerExecInspectParams{ctx, execID}

	// Record call args
	mmContainerExecInspect.ContainerExecInspectMock.mutex.Lock()
	mmContainerExecInspect.ContainerExecInspectMock.callArgs = append(mmContainerExecInspect.ContainerExecInspectMock.callArgs, mm_params)
	mmContainerExecInspect.ContainerExecInspectMock.mutex.Unlock()

	for _, e := range mmContainerExecInspect.ContainerExecInspectMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.c2, e.results.err
		}
	}

	if mmContainerExecInspect.ContainerExecInspectMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerExecInspect.ContainerExecInspectMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerExecInspect.ContainerExecInspectMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerExecInspectParams{ctx, execID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerExecInspect.t.Errorf("CommonAPIClientMock.ContainerExecInspect got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerExecInspect.ContainerExecInspectMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerExecInspect.t.Fatal("No results are set for the CommonAPIClientMock.ContainerExecInspect")
		}
		return (*mm_results).c2, (*mm_results).err
	}
	if mmContainerExecInspect.funcContainerExecInspect != nil {
		return mmContainerExecInspect.funcContainerExecInspect(ctx, execID)
	}
	mmContainerExecInspect.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerExecInspect. %v %v", ctx, execID)
	return
}

// ContainerExecInspectAfterCounter returns a count of finished CommonAPIClientMock.ContainerExecInspect invocations
func (mmContainerExecInspect *CommonAPIClientMock) ContainerExecInspectAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerExecInspect.afterContainerExecInspectCounter)
}

// ContainerExecInspectBeforeCounter returns a count of CommonAPIClientMock.ContainerExecInspect invocations
func (mmContainerExecInspect *CommonAPIClientMock) ContainerExecInspectBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerExecInspect.beforeContainerExecInspectCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerExecInspect.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerExecInspect *mCommonAPIClientMockContainerExecInspect) Calls() []*CommonAPIClientMockContainerExecInspectParams {
	mmContainerExecInspect.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerExecInspectParams, len(mmContainerExecInspect.callArgs))
	copy(argCopy, mmContainerExecInspect.callArgs)

	mmContainerExecInspect.mutex.RUnlock()

	return argCopy
}

// MinimockContainerExecInspectDone returns true if the count of the ContainerExecInspect invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerExecInspectDone() bool {
	for _, e := range m.ContainerExecInspectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerExecInspectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerExecInspectCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerExecInspect != nil && mm_atomic.LoadUint64(&m.afterContainerExecInspectCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerExecInspectInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerExecInspectInspect() {
	for _, e := range m.ContainerExecInspectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerExecInspect with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerExecInspectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerExecInspectCounter) < 1 {
		if m.ContainerExecInspectMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerExecInspect")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerExecInspect with params: %#v", *m.ContainerExecInspectMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerExecInspect != nil && mm_atomic.LoadUint64(&m.afterContainerExecInspectCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerExecInspect")
	}
}

type mCommonAPIClientMockContainerExecResize struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerExecResizeExpectation
	expectations       []*CommonAPIClientMockContainerExecResizeExpectation

	callArgs []*CommonAPIClientMockContainerExecResizeParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerExecResizeExpectation specifies expectation struct of the CommonAPIClient.ContainerExecResize
type CommonAPIClientMockContainerExecResizeExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerExecResizeParams
	results *CommonAPIClientMockContainerExecResizeResults
	Counter uint64
}

// CommonAPIClientMockContainerExecResizeParams contains parameters of the CommonAPIClient.ContainerExecResize
type CommonAPIClientMockContainerExecResizeParams struct {
	ctx     context.Context
	execID  string
	options types.ResizeOptions
}

// CommonAPIClientMockContainerExecResizeResults contains results of the CommonAPIClient.ContainerExecResize
type CommonAPIClientMockContainerExecResizeResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerExecResize
func (mmContainerExecResize *mCommonAPIClientMockContainerExecResize) Expect(ctx context.Context, execID string, options types.ResizeOptions) *mCommonAPIClientMockContainerExecResize {
	if mmContainerExecResize.mock.funcContainerExecResize != nil {
		mmContainerExecResize.mock.t.Fatalf("CommonAPIClientMock.ContainerExecResize mock is already set by Set")
	}

	if mmContainerExecResize.defaultExpectation == nil {
		mmContainerExecResize.defaultExpectation = &CommonAPIClientMockContainerExecResizeExpectation{}
	}

	mmContainerExecResize.defaultExpectation.params = &CommonAPIClientMockContainerExecResizeParams{ctx, execID, options}
	for _, e := range mmContainerExecResize.expectations {
		if minimock.Equal(e.params, mmContainerExecResize.defaultExpectation.params) {
			mmContainerExecResize.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerExecResize.defaultExpectation.params)
		}
	}

	return mmContainerExecResize
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerExecResize
func (mmContainerExecResize *mCommonAPIClientMockContainerExecResize) Inspect(f func(ctx context.Context, execID string, options types.ResizeOptions)) *mCommonAPIClientMockContainerExecResize {
	if mmContainerExecResize.mock.inspectFuncContainerExecResize != nil {
		mmContainerExecResize.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerExecResize")
	}

	mmContainerExecResize.mock.inspectFuncContainerExecResize = f

	return mmContainerExecResize
}

// Return sets up results that will be returned by CommonAPIClient.ContainerExecResize
func (mmContainerExecResize *mCommonAPIClientMockContainerExecResize) Return(err error) *CommonAPIClientMock {
	if mmContainerExecResize.mock.funcContainerExecResize != nil {
		mmContainerExecResize.mock.t.Fatalf("CommonAPIClientMock.ContainerExecResize mock is already set by Set")
	}

	if mmContainerExecResize.defaultExpectation == nil {
		mmContainerExecResize.defaultExpectation = &CommonAPIClientMockContainerExecResizeExpectation{mock: mmContainerExecResize.mock}
	}
	mmContainerExecResize.defaultExpectation.results = &CommonAPIClientMockContainerExecResizeResults{err}
	return mmContainerExecResize.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerExecResize method
func (mmContainerExecResize *mCommonAPIClientMockContainerExecResize) Set(f func(ctx context.Context, execID string, options types.ResizeOptions) (err error)) *CommonAPIClientMock {
	if mmContainerExecResize.defaultExpectation != nil {
		mmContainerExecResize.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerExecResize method")
	}

	if len(mmContainerExecResize.expectations) > 0 {
		mmContainerExecResize.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerExecResize method")
	}

	mmContainerExecResize.mock.funcContainerExecResize = f
	return mmContainerExecResize.mock
}

// When sets expectation for the CommonAPIClient.ContainerExecResize which will trigger the result defined by the following
// Then helper
func (mmContainerExecResize *mCommonAPIClientMockContainerExecResize) When(ctx context.Context, execID string, options types.ResizeOptions) *CommonAPIClientMockContainerExecResizeExpectation {
	if mmContainerExecResize.mock.funcContainerExecResize != nil {
		mmContainerExecResize.mock.t.Fatalf("CommonAPIClientMock.ContainerExecResize mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerExecResizeExpectation{
		mock:   mmContainerExecResize.mock,
		params: &CommonAPIClientMockContainerExecResizeParams{ctx, execID, options},
	}
	mmContainerExecResize.expectations = append(mmContainerExecResize.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerExecResize return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerExecResizeExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerExecResizeResults{err}
	return e.mock
}

// ContainerExecResize implements client.CommonAPIClient
func (mmContainerExecResize *CommonAPIClientMock) ContainerExecResize(ctx context.Context, execID string, options types.ResizeOptions) (err error) {
	mm_atomic.AddUint64(&mmContainerExecResize.beforeContainerExecResizeCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerExecResize.afterContainerExecResizeCounter, 1)

	if mmContainerExecResize.inspectFuncContainerExecResize != nil {
		mmContainerExecResize.inspectFuncContainerExecResize(ctx, execID, options)
	}

	mm_params := &CommonAPIClientMockContainerExecResizeParams{ctx, execID, options}

	// Record call args
	mmContainerExecResize.ContainerExecResizeMock.mutex.Lock()
	mmContainerExecResize.ContainerExecResizeMock.callArgs = append(mmContainerExecResize.ContainerExecResizeMock.callArgs, mm_params)
	mmContainerExecResize.ContainerExecResizeMock.mutex.Unlock()

	for _, e := range mmContainerExecResize.ContainerExecResizeMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmContainerExecResize.ContainerExecResizeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerExecResize.ContainerExecResizeMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerExecResize.ContainerExecResizeMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerExecResizeParams{ctx, execID, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerExecResize.t.Errorf("CommonAPIClientMock.ContainerExecResize got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerExecResize.ContainerExecResizeMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerExecResize.t.Fatal("No results are set for the CommonAPIClientMock.ContainerExecResize")
		}
		return (*mm_results).err
	}
	if mmContainerExecResize.funcContainerExecResize != nil {
		return mmContainerExecResize.funcContainerExecResize(ctx, execID, options)
	}
	mmContainerExecResize.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerExecResize. %v %v %v", ctx, execID, options)
	return
}

// ContainerExecResizeAfterCounter returns a count of finished CommonAPIClientMock.ContainerExecResize invocations
func (mmContainerExecResize *CommonAPIClientMock) ContainerExecResizeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerExecResize.afterContainerExecResizeCounter)
}

// ContainerExecResizeBeforeCounter returns a count of CommonAPIClientMock.ContainerExecResize invocations
func (mmContainerExecResize *CommonAPIClientMock) ContainerExecResizeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerExecResize.beforeContainerExecResizeCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerExecResize.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerExecResize *mCommonAPIClientMockContainerExecResize) Calls() []*CommonAPIClientMockContainerExecResizeParams {
	mmContainerExecResize.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerExecResizeParams, len(mmContainerExecResize.callArgs))
	copy(argCopy, mmContainerExecResize.callArgs)

	mmContainerExecResize.mutex.RUnlock()

	return argCopy
}

// MinimockContainerExecResizeDone returns true if the count of the ContainerExecResize invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerExecResizeDone() bool {
	for _, e := range m.ContainerExecResizeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerExecResizeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerExecResizeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerExecResize != nil && mm_atomic.LoadUint64(&m.afterContainerExecResizeCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerExecResizeInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerExecResizeInspect() {
	for _, e := range m.ContainerExecResizeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerExecResize with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerExecResizeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerExecResizeCounter) < 1 {
		if m.ContainerExecResizeMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerExecResize")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerExecResize with params: %#v", *m.ContainerExecResizeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerExecResize != nil && mm_atomic.LoadUint64(&m.afterContainerExecResizeCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerExecResize")
	}
}

type mCommonAPIClientMockContainerExecStart struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerExecStartExpectation
	expectations       []*CommonAPIClientMockContainerExecStartExpectation

	callArgs []*CommonAPIClientMockContainerExecStartParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerExecStartExpectation specifies expectation struct of the CommonAPIClient.ContainerExecStart
type CommonAPIClientMockContainerExecStartExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerExecStartParams
	results *CommonAPIClientMockContainerExecStartResults
	Counter uint64
}

// CommonAPIClientMockContainerExecStartParams contains parameters of the CommonAPIClient.ContainerExecStart
type CommonAPIClientMockContainerExecStartParams struct {
	ctx    context.Context
	execID string
	config types.ExecStartCheck
}

// CommonAPIClientMockContainerExecStartResults contains results of the CommonAPIClient.ContainerExecStart
type CommonAPIClientMockContainerExecStartResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerExecStart
func (mmContainerExecStart *mCommonAPIClientMockContainerExecStart) Expect(ctx context.Context, execID string, config types.ExecStartCheck) *mCommonAPIClientMockContainerExecStart {
	if mmContainerExecStart.mock.funcContainerExecStart != nil {
		mmContainerExecStart.mock.t.Fatalf("CommonAPIClientMock.ContainerExecStart mock is already set by Set")
	}

	if mmContainerExecStart.defaultExpectation == nil {
		mmContainerExecStart.defaultExpectation = &CommonAPIClientMockContainerExecStartExpectation{}
	}

	mmContainerExecStart.defaultExpectation.params = &CommonAPIClientMockContainerExecStartParams{ctx, execID, config}
	for _, e := range mmContainerExecStart.expectations {
		if minimock.Equal(e.params, mmContainerExecStart.defaultExpectation.params) {
			mmContainerExecStart.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerExecStart.defaultExpectation.params)
		}
	}

	return mmContainerExecStart
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerExecStart
func (mmContainerExecStart *mCommonAPIClientMockContainerExecStart) Inspect(f func(ctx context.Context, execID string, config types.ExecStartCheck)) *mCommonAPIClientMockContainerExecStart {
	if mmContainerExecStart.mock.inspectFuncContainerExecStart != nil {
		mmContainerExecStart.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerExecStart")
	}

	mmContainerExecStart.mock.inspectFuncContainerExecStart = f

	return mmContainerExecStart
}

// Return sets up results that will be returned by CommonAPIClient.ContainerExecStart
func (mmContainerExecStart *mCommonAPIClientMockContainerExecStart) Return(err error) *CommonAPIClientMock {
	if mmContainerExecStart.mock.funcContainerExecStart != nil {
		mmContainerExecStart.mock.t.Fatalf("CommonAPIClientMock.ContainerExecStart mock is already set by Set")
	}

	if mmContainerExecStart.defaultExpectation == nil {
		mmContainerExecStart.defaultExpectation = &CommonAPIClientMockContainerExecStartExpectation{mock: mmContainerExecStart.mock}
	}
	mmContainerExecStart.defaultExpectation.results = &CommonAPIClientMockContainerExecStartResults{err}
	return mmContainerExecStart.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerExecStart method
func (mmContainerExecStart *mCommonAPIClientMockContainerExecStart) Set(f func(ctx context.Context, execID string, config types.ExecStartCheck) (err error)) *CommonAPIClientMock {
	if mmContainerExecStart.defaultExpectation != nil {
		mmContainerExecStart.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerExecStart method")
	}

	if len(mmContainerExecStart.expectations) > 0 {
		mmContainerExecStart.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerExecStart method")
	}

	mmContainerExecStart.mock.funcContainerExecStart = f
	return mmContainerExecStart.mock
}

// When sets expectation for the CommonAPIClient.ContainerExecStart which will trigger the result defined by the following
// Then helper
func (mmContainerExecStart *mCommonAPIClientMockContainerExecStart) When(ctx context.Context, execID string, config types.ExecStartCheck) *CommonAPIClientMockContainerExecStartExpectation {
	if mmContainerExecStart.mock.funcContainerExecStart != nil {
		mmContainerExecStart.mock.t.Fatalf("CommonAPIClientMock.ContainerExecStart mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerExecStartExpectation{
		mock:   mmContainerExecStart.mock,
		params: &CommonAPIClientMockContainerExecStartParams{ctx, execID, config},
	}
	mmContainerExecStart.expectations = append(mmContainerExecStart.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerExecStart return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerExecStartExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerExecStartResults{err}
	return e.mock
}

// ContainerExecStart implements client.CommonAPIClient
func (mmContainerExecStart *CommonAPIClientMock) ContainerExecStart(ctx context.Context, execID string, config types.ExecStartCheck) (err error) {
	mm_atomic.AddUint64(&mmContainerExecStart.beforeContainerExecStartCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerExecStart.afterContainerExecStartCounter, 1)

	if mmContainerExecStart.inspectFuncContainerExecStart != nil {
		mmContainerExecStart.inspectFuncContainerExecStart(ctx, execID, config)
	}

	mm_params := &CommonAPIClientMockContainerExecStartParams{ctx, execID, config}

	// Record call args
	mmContainerExecStart.ContainerExecStartMock.mutex.Lock()
	mmContainerExecStart.ContainerExecStartMock.callArgs = append(mmContainerExecStart.ContainerExecStartMock.callArgs, mm_params)
	mmContainerExecStart.ContainerExecStartMock.mutex.Unlock()

	for _, e := range mmContainerExecStart.ContainerExecStartMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmContainerExecStart.ContainerExecStartMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerExecStart.ContainerExecStartMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerExecStart.ContainerExecStartMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerExecStartParams{ctx, execID, config}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerExecStart.t.Errorf("CommonAPIClientMock.ContainerExecStart got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerExecStart.ContainerExecStartMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerExecStart.t.Fatal("No results are set for the CommonAPIClientMock.ContainerExecStart")
		}
		return (*mm_results).err
	}
	if mmContainerExecStart.funcContainerExecStart != nil {
		return mmContainerExecStart.funcContainerExecStart(ctx, execID, config)
	}
	mmContainerExecStart.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerExecStart. %v %v %v", ctx, execID, config)
	return
}

// ContainerExecStartAfterCounter returns a count of finished CommonAPIClientMock.ContainerExecStart invocations
func (mmContainerExecStart *CommonAPIClientMock) ContainerExecStartAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerExecStart.afterContainerExecStartCounter)
}

// ContainerExecStartBeforeCounter returns a count of CommonAPIClientMock.ContainerExecStart invocations
func (mmContainerExecStart *CommonAPIClientMock) ContainerExecStartBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerExecStart.beforeContainerExecStartCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerExecStart.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerExecStart *mCommonAPIClientMockContainerExecStart) Calls() []*CommonAPIClientMockContainerExecStartParams {
	mmContainerExecStart.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerExecStartParams, len(mmContainerExecStart.callArgs))
	copy(argCopy, mmContainerExecStart.callArgs)

	mmContainerExecStart.mutex.RUnlock()

	return argCopy
}

// MinimockContainerExecStartDone returns true if the count of the ContainerExecStart invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerExecStartDone() bool {
	for _, e := range m.ContainerExecStartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerExecStartMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerExecStartCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerExecStart != nil && mm_atomic.LoadUint64(&m.afterContainerExecStartCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerExecStartInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerExecStartInspect() {
	for _, e := range m.ContainerExecStartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerExecStart with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerExecStartMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerExecStartCounter) < 1 {
		if m.ContainerExecStartMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerExecStart")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerExecStart with params: %#v", *m.ContainerExecStartMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerExecStart != nil && mm_atomic.LoadUint64(&m.afterContainerExecStartCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerExecStart")
	}
}

type mCommonAPIClientMockContainerExport struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerExportExpectation
	expectations       []*CommonAPIClientMockContainerExportExpectation

	callArgs []*CommonAPIClientMockContainerExportParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerExportExpectation specifies expectation struct of the CommonAPIClient.ContainerExport
type CommonAPIClientMockContainerExportExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerExportParams
	results *CommonAPIClientMockContainerExportResults
	Counter uint64
}

// CommonAPIClientMockContainerExportParams contains parameters of the CommonAPIClient.ContainerExport
type CommonAPIClientMockContainerExportParams struct {
	ctx       context.Context
	container string
}

// CommonAPIClientMockContainerExportResults contains results of the CommonAPIClient.ContainerExport
type CommonAPIClientMockContainerExportResults struct {
	r1  io.ReadCloser
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerExport
func (mmContainerExport *mCommonAPIClientMockContainerExport) Expect(ctx context.Context, container string) *mCommonAPIClientMockContainerExport {
	if mmContainerExport.mock.funcContainerExport != nil {
		mmContainerExport.mock.t.Fatalf("CommonAPIClientMock.ContainerExport mock is already set by Set")
	}

	if mmContainerExport.defaultExpectation == nil {
		mmContainerExport.defaultExpectation = &CommonAPIClientMockContainerExportExpectation{}
	}

	mmContainerExport.defaultExpectation.params = &CommonAPIClientMockContainerExportParams{ctx, container}
	for _, e := range mmContainerExport.expectations {
		if minimock.Equal(e.params, mmContainerExport.defaultExpectation.params) {
			mmContainerExport.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerExport.defaultExpectation.params)
		}
	}

	return mmContainerExport
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerExport
func (mmContainerExport *mCommonAPIClientMockContainerExport) Inspect(f func(ctx context.Context, container string)) *mCommonAPIClientMockContainerExport {
	if mmContainerExport.mock.inspectFuncContainerExport != nil {
		mmContainerExport.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerExport")
	}

	mmContainerExport.mock.inspectFuncContainerExport = f

	return mmContainerExport
}

// Return sets up results that will be returned by CommonAPIClient.ContainerExport
func (mmContainerExport *mCommonAPIClientMockContainerExport) Return(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	if mmContainerExport.mock.funcContainerExport != nil {
		mmContainerExport.mock.t.Fatalf("CommonAPIClientMock.ContainerExport mock is already set by Set")
	}

	if mmContainerExport.defaultExpectation == nil {
		mmContainerExport.defaultExpectation = &CommonAPIClientMockContainerExportExpectation{mock: mmContainerExport.mock}
	}
	mmContainerExport.defaultExpectation.results = &CommonAPIClientMockContainerExportResults{r1, err}
	return mmContainerExport.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerExport method
func (mmContainerExport *mCommonAPIClientMockContainerExport) Set(f func(ctx context.Context, container string) (r1 io.ReadCloser, err error)) *CommonAPIClientMock {
	if mmContainerExport.defaultExpectation != nil {
		mmContainerExport.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerExport method")
	}

	if len(mmContainerExport.expectations) > 0 {
		mmContainerExport.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerExport method")
	}

	mmContainerExport.mock.funcContainerExport = f
	return mmContainerExport.mock
}

// When sets expectation for the CommonAPIClient.ContainerExport which will trigger the result defined by the following
// Then helper
func (mmContainerExport *mCommonAPIClientMockContainerExport) When(ctx context.Context, container string) *CommonAPIClientMockContainerExportExpectation {
	if mmContainerExport.mock.funcContainerExport != nil {
		mmContainerExport.mock.t.Fatalf("CommonAPIClientMock.ContainerExport mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerExportExpectation{
		mock:   mmContainerExport.mock,
		params: &CommonAPIClientMockContainerExportParams{ctx, container},
	}
	mmContainerExport.expectations = append(mmContainerExport.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerExport return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerExportExpectation) Then(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerExportResults{r1, err}
	return e.mock
}

// ContainerExport implements client.CommonAPIClient
func (mmContainerExport *CommonAPIClientMock) ContainerExport(ctx context.Context, container string) (r1 io.ReadCloser, err error) {
	mm_atomic.AddUint64(&mmContainerExport.beforeContainerExportCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerExport.afterContainerExportCounter, 1)

	if mmContainerExport.inspectFuncContainerExport != nil {
		mmContainerExport.inspectFuncContainerExport(ctx, container)
	}

	mm_params := &CommonAPIClientMockContainerExportParams{ctx, container}

	// Record call args
	mmContainerExport.ContainerExportMock.mutex.Lock()
	mmContainerExport.ContainerExportMock.callArgs = append(mmContainerExport.ContainerExportMock.callArgs, mm_params)
	mmContainerExport.ContainerExportMock.mutex.Unlock()

	for _, e := range mmContainerExport.ContainerExportMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmContainerExport.ContainerExportMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerExport.ContainerExportMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerExport.ContainerExportMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerExportParams{ctx, container}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerExport.t.Errorf("CommonAPIClientMock.ContainerExport got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerExport.ContainerExportMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerExport.t.Fatal("No results are set for the CommonAPIClientMock.ContainerExport")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmContainerExport.funcContainerExport != nil {
		return mmContainerExport.funcContainerExport(ctx, container)
	}
	mmContainerExport.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerExport. %v %v", ctx, container)
	return
}

// ContainerExportAfterCounter returns a count of finished CommonAPIClientMock.ContainerExport invocations
func (mmContainerExport *CommonAPIClientMock) ContainerExportAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerExport.afterContainerExportCounter)
}

// ContainerExportBeforeCounter returns a count of CommonAPIClientMock.ContainerExport invocations
func (mmContainerExport *CommonAPIClientMock) ContainerExportBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerExport.beforeContainerExportCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerExport.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerExport *mCommonAPIClientMockContainerExport) Calls() []*CommonAPIClientMockContainerExportParams {
	mmContainerExport.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerExportParams, len(mmContainerExport.callArgs))
	copy(argCopy, mmContainerExport.callArgs)

	mmContainerExport.mutex.RUnlock()

	return argCopy
}

// MinimockContainerExportDone returns true if the count of the ContainerExport invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerExportDone() bool {
	for _, e := range m.ContainerExportMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerExportMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerExportCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerExport != nil && mm_atomic.LoadUint64(&m.afterContainerExportCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerExportInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerExportInspect() {
	for _, e := range m.ContainerExportMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerExport with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerExportMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerExportCounter) < 1 {
		if m.ContainerExportMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerExport")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerExport with params: %#v", *m.ContainerExportMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerExport != nil && mm_atomic.LoadUint64(&m.afterContainerExportCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerExport")
	}
}

type mCommonAPIClientMockContainerInspect struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerInspectExpectation
	expectations       []*CommonAPIClientMockContainerInspectExpectation

	callArgs []*CommonAPIClientMockContainerInspectParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerInspectExpectation specifies expectation struct of the CommonAPIClient.ContainerInspect
type CommonAPIClientMockContainerInspectExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerInspectParams
	results *CommonAPIClientMockContainerInspectResults
	Counter uint64
}

// CommonAPIClientMockContainerInspectParams contains parameters of the CommonAPIClient.ContainerInspect
type CommonAPIClientMockContainerInspectParams struct {
	ctx       context.Context
	container string
}

// CommonAPIClientMockContainerInspectResults contains results of the CommonAPIClient.ContainerInspect
type CommonAPIClientMockContainerInspectResults struct {
	c2  types.ContainerJSON
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerInspect
func (mmContainerInspect *mCommonAPIClientMockContainerInspect) Expect(ctx context.Context, container string) *mCommonAPIClientMockContainerInspect {
	if mmContainerInspect.mock.funcContainerInspect != nil {
		mmContainerInspect.mock.t.Fatalf("CommonAPIClientMock.ContainerInspect mock is already set by Set")
	}

	if mmContainerInspect.defaultExpectation == nil {
		mmContainerInspect.defaultExpectation = &CommonAPIClientMockContainerInspectExpectation{}
	}

	mmContainerInspect.defaultExpectation.params = &CommonAPIClientMockContainerInspectParams{ctx, container}
	for _, e := range mmContainerInspect.expectations {
		if minimock.Equal(e.params, mmContainerInspect.defaultExpectation.params) {
			mmContainerInspect.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerInspect.defaultExpectation.params)
		}
	}

	return mmContainerInspect
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerInspect
func (mmContainerInspect *mCommonAPIClientMockContainerInspect) Inspect(f func(ctx context.Context, container string)) *mCommonAPIClientMockContainerInspect {
	if mmContainerInspect.mock.inspectFuncContainerInspect != nil {
		mmContainerInspect.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerInspect")
	}

	mmContainerInspect.mock.inspectFuncContainerInspect = f

	return mmContainerInspect
}

// Return sets up results that will be returned by CommonAPIClient.ContainerInspect
func (mmContainerInspect *mCommonAPIClientMockContainerInspect) Return(c2 types.ContainerJSON, err error) *CommonAPIClientMock {
	if mmContainerInspect.mock.funcContainerInspect != nil {
		mmContainerInspect.mock.t.Fatalf("CommonAPIClientMock.ContainerInspect mock is already set by Set")
	}

	if mmContainerInspect.defaultExpectation == nil {
		mmContainerInspect.defaultExpectation = &CommonAPIClientMockContainerInspectExpectation{mock: mmContainerInspect.mock}
	}
	mmContainerInspect.defaultExpectation.results = &CommonAPIClientMockContainerInspectResults{c2, err}
	return mmContainerInspect.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerInspect method
func (mmContainerInspect *mCommonAPIClientMockContainerInspect) Set(f func(ctx context.Context, container string) (c2 types.ContainerJSON, err error)) *CommonAPIClientMock {
	if mmContainerInspect.defaultExpectation != nil {
		mmContainerInspect.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerInspect method")
	}

	if len(mmContainerInspect.expectations) > 0 {
		mmContainerInspect.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerInspect method")
	}

	mmContainerInspect.mock.funcContainerInspect = f
	return mmContainerInspect.mock
}

// When sets expectation for the CommonAPIClient.ContainerInspect which will trigger the result defined by the following
// Then helper
func (mmContainerInspect *mCommonAPIClientMockContainerInspect) When(ctx context.Context, container string) *CommonAPIClientMockContainerInspectExpectation {
	if mmContainerInspect.mock.funcContainerInspect != nil {
		mmContainerInspect.mock.t.Fatalf("CommonAPIClientMock.ContainerInspect mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerInspectExpectation{
		mock:   mmContainerInspect.mock,
		params: &CommonAPIClientMockContainerInspectParams{ctx, container},
	}
	mmContainerInspect.expectations = append(mmContainerInspect.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerInspect return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerInspectExpectation) Then(c2 types.ContainerJSON, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerInspectResults{c2, err}
	return e.mock
}

// ContainerInspect implements client.CommonAPIClient
func (mmContainerInspect *CommonAPIClientMock) ContainerInspect(ctx context.Context, container string) (c2 types.ContainerJSON, err error) {
	mm_atomic.AddUint64(&mmContainerInspect.beforeContainerInspectCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerInspect.afterContainerInspectCounter, 1)

	if mmContainerInspect.inspectFuncContainerInspect != nil {
		mmContainerInspect.inspectFuncContainerInspect(ctx, container)
	}

	mm_params := &CommonAPIClientMockContainerInspectParams{ctx, container}

	// Record call args
	mmContainerInspect.ContainerInspectMock.mutex.Lock()
	mmContainerInspect.ContainerInspectMock.callArgs = append(mmContainerInspect.ContainerInspectMock.callArgs, mm_params)
	mmContainerInspect.ContainerInspectMock.mutex.Unlock()

	for _, e := range mmContainerInspect.ContainerInspectMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.c2, e.results.err
		}
	}

	if mmContainerInspect.ContainerInspectMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerInspect.ContainerInspectMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerInspect.ContainerInspectMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerInspectParams{ctx, container}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerInspect.t.Errorf("CommonAPIClientMock.ContainerInspect got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerInspect.ContainerInspectMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerInspect.t.Fatal("No results are set for the CommonAPIClientMock.ContainerInspect")
		}
		return (*mm_results).c2, (*mm_results).err
	}
	if mmContainerInspect.funcContainerInspect != nil {
		return mmContainerInspect.funcContainerInspect(ctx, container)
	}
	mmContainerInspect.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerInspect. %v %v", ctx, container)
	return
}

// ContainerInspectAfterCounter returns a count of finished CommonAPIClientMock.ContainerInspect invocations
func (mmContainerInspect *CommonAPIClientMock) ContainerInspectAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerInspect.afterContainerInspectCounter)
}

// ContainerInspectBeforeCounter returns a count of CommonAPIClientMock.ContainerInspect invocations
func (mmContainerInspect *CommonAPIClientMock) ContainerInspectBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerInspect.beforeContainerInspectCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerInspect.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerInspect *mCommonAPIClientMockContainerInspect) Calls() []*CommonAPIClientMockContainerInspectParams {
	mmContainerInspect.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerInspectParams, len(mmContainerInspect.callArgs))
	copy(argCopy, mmContainerInspect.callArgs)

	mmContainerInspect.mutex.RUnlock()

	return argCopy
}

// MinimockContainerInspectDone returns true if the count of the ContainerInspect invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerInspectDone() bool {
	for _, e := range m.ContainerInspectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerInspectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerInspectCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerInspect != nil && mm_atomic.LoadUint64(&m.afterContainerInspectCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerInspectInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerInspectInspect() {
	for _, e := range m.ContainerInspectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerInspect with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerInspectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerInspectCounter) < 1 {
		if m.ContainerInspectMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerInspect")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerInspect with params: %#v", *m.ContainerInspectMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerInspect != nil && mm_atomic.LoadUint64(&m.afterContainerInspectCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerInspect")
	}
}

type mCommonAPIClientMockContainerInspectWithRaw struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerInspectWithRawExpectation
	expectations       []*CommonAPIClientMockContainerInspectWithRawExpectation

	callArgs []*CommonAPIClientMockContainerInspectWithRawParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerInspectWithRawExpectation specifies expectation struct of the CommonAPIClient.ContainerInspectWithRaw
type CommonAPIClientMockContainerInspectWithRawExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerInspectWithRawParams
	results *CommonAPIClientMockContainerInspectWithRawResults
	Counter uint64
}

// CommonAPIClientMockContainerInspectWithRawParams contains parameters of the CommonAPIClient.ContainerInspectWithRaw
type CommonAPIClientMockContainerInspectWithRawParams struct {
	ctx       context.Context
	container string
	getSize   bool
}

// CommonAPIClientMockContainerInspectWithRawResults contains results of the CommonAPIClient.ContainerInspectWithRaw
type CommonAPIClientMockContainerInspectWithRawResults struct {
	c2  types.ContainerJSON
	ba1 []byte
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerInspectWithRaw
func (mmContainerInspectWithRaw *mCommonAPIClientMockContainerInspectWithRaw) Expect(ctx context.Context, container string, getSize bool) *mCommonAPIClientMockContainerInspectWithRaw {
	if mmContainerInspectWithRaw.mock.funcContainerInspectWithRaw != nil {
		mmContainerInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.ContainerInspectWithRaw mock is already set by Set")
	}

	if mmContainerInspectWithRaw.defaultExpectation == nil {
		mmContainerInspectWithRaw.defaultExpectation = &CommonAPIClientMockContainerInspectWithRawExpectation{}
	}

	mmContainerInspectWithRaw.defaultExpectation.params = &CommonAPIClientMockContainerInspectWithRawParams{ctx, container, getSize}
	for _, e := range mmContainerInspectWithRaw.expectations {
		if minimock.Equal(e.params, mmContainerInspectWithRaw.defaultExpectation.params) {
			mmContainerInspectWithRaw.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerInspectWithRaw.defaultExpectation.params)
		}
	}

	return mmContainerInspectWithRaw
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerInspectWithRaw
func (mmContainerInspectWithRaw *mCommonAPIClientMockContainerInspectWithRaw) Inspect(f func(ctx context.Context, container string, getSize bool)) *mCommonAPIClientMockContainerInspectWithRaw {
	if mmContainerInspectWithRaw.mock.inspectFuncContainerInspectWithRaw != nil {
		mmContainerInspectWithRaw.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerInspectWithRaw")
	}

	mmContainerInspectWithRaw.mock.inspectFuncContainerInspectWithRaw = f

	return mmContainerInspectWithRaw
}

// Return sets up results that will be returned by CommonAPIClient.ContainerInspectWithRaw
func (mmContainerInspectWithRaw *mCommonAPIClientMockContainerInspectWithRaw) Return(c2 types.ContainerJSON, ba1 []byte, err error) *CommonAPIClientMock {
	if mmContainerInspectWithRaw.mock.funcContainerInspectWithRaw != nil {
		mmContainerInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.ContainerInspectWithRaw mock is already set by Set")
	}

	if mmContainerInspectWithRaw.defaultExpectation == nil {
		mmContainerInspectWithRaw.defaultExpectation = &CommonAPIClientMockContainerInspectWithRawExpectation{mock: mmContainerInspectWithRaw.mock}
	}
	mmContainerInspectWithRaw.defaultExpectation.results = &CommonAPIClientMockContainerInspectWithRawResults{c2, ba1, err}
	return mmContainerInspectWithRaw.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerInspectWithRaw method
func (mmContainerInspectWithRaw *mCommonAPIClientMockContainerInspectWithRaw) Set(f func(ctx context.Context, container string, getSize bool) (c2 types.ContainerJSON, ba1 []byte, err error)) *CommonAPIClientMock {
	if mmContainerInspectWithRaw.defaultExpectation != nil {
		mmContainerInspectWithRaw.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerInspectWithRaw method")
	}

	if len(mmContainerInspectWithRaw.expectations) > 0 {
		mmContainerInspectWithRaw.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerInspectWithRaw method")
	}

	mmContainerInspectWithRaw.mock.funcContainerInspectWithRaw = f
	return mmContainerInspectWithRaw.mock
}

// When sets expectation for the CommonAPIClient.ContainerInspectWithRaw which will trigger the result defined by the following
// Then helper
func (mmContainerInspectWithRaw *mCommonAPIClientMockContainerInspectWithRaw) When(ctx context.Context, container string, getSize bool) *CommonAPIClientMockContainerInspectWithRawExpectation {
	if mmContainerInspectWithRaw.mock.funcContainerInspectWithRaw != nil {
		mmContainerInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.ContainerInspectWithRaw mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerInspectWithRawExpectation{
		mock:   mmContainerInspectWithRaw.mock,
		params: &CommonAPIClientMockContainerInspectWithRawParams{ctx, container, getSize},
	}
	mmContainerInspectWithRaw.expectations = append(mmContainerInspectWithRaw.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerInspectWithRaw return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerInspectWithRawExpectation) Then(c2 types.ContainerJSON, ba1 []byte, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerInspectWithRawResults{c2, ba1, err}
	return e.mock
}

// ContainerInspectWithRaw implements client.CommonAPIClient
func (mmContainerInspectWithRaw *CommonAPIClientMock) ContainerInspectWithRaw(ctx context.Context, container string, getSize bool) (c2 types.ContainerJSON, ba1 []byte, err error) {
	mm_atomic.AddUint64(&mmContainerInspectWithRaw.beforeContainerInspectWithRawCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerInspectWithRaw.afterContainerInspectWithRawCounter, 1)

	if mmContainerInspectWithRaw.inspectFuncContainerInspectWithRaw != nil {
		mmContainerInspectWithRaw.inspectFuncContainerInspectWithRaw(ctx, container, getSize)
	}

	mm_params := &CommonAPIClientMockContainerInspectWithRawParams{ctx, container, getSize}

	// Record call args
	mmContainerInspectWithRaw.ContainerInspectWithRawMock.mutex.Lock()
	mmContainerInspectWithRaw.ContainerInspectWithRawMock.callArgs = append(mmContainerInspectWithRaw.ContainerInspectWithRawMock.callArgs, mm_params)
	mmContainerInspectWithRaw.ContainerInspectWithRawMock.mutex.Unlock()

	for _, e := range mmContainerInspectWithRaw.ContainerInspectWithRawMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.c2, e.results.ba1, e.results.err
		}
	}

	if mmContainerInspectWithRaw.ContainerInspectWithRawMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerInspectWithRaw.ContainerInspectWithRawMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerInspectWithRaw.ContainerInspectWithRawMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerInspectWithRawParams{ctx, container, getSize}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerInspectWithRaw.t.Errorf("CommonAPIClientMock.ContainerInspectWithRaw got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerInspectWithRaw.ContainerInspectWithRawMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerInspectWithRaw.t.Fatal("No results are set for the CommonAPIClientMock.ContainerInspectWithRaw")
		}
		return (*mm_results).c2, (*mm_results).ba1, (*mm_results).err
	}
	if mmContainerInspectWithRaw.funcContainerInspectWithRaw != nil {
		return mmContainerInspectWithRaw.funcContainerInspectWithRaw(ctx, container, getSize)
	}
	mmContainerInspectWithRaw.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerInspectWithRaw. %v %v %v", ctx, container, getSize)
	return
}

// ContainerInspectWithRawAfterCounter returns a count of finished CommonAPIClientMock.ContainerInspectWithRaw invocations
func (mmContainerInspectWithRaw *CommonAPIClientMock) ContainerInspectWithRawAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerInspectWithRaw.afterContainerInspectWithRawCounter)
}

// ContainerInspectWithRawBeforeCounter returns a count of CommonAPIClientMock.ContainerInspectWithRaw invocations
func (mmContainerInspectWithRaw *CommonAPIClientMock) ContainerInspectWithRawBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerInspectWithRaw.beforeContainerInspectWithRawCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerInspectWithRaw.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerInspectWithRaw *mCommonAPIClientMockContainerInspectWithRaw) Calls() []*CommonAPIClientMockContainerInspectWithRawParams {
	mmContainerInspectWithRaw.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerInspectWithRawParams, len(mmContainerInspectWithRaw.callArgs))
	copy(argCopy, mmContainerInspectWithRaw.callArgs)

	mmContainerInspectWithRaw.mutex.RUnlock()

	return argCopy
}

// MinimockContainerInspectWithRawDone returns true if the count of the ContainerInspectWithRaw invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerInspectWithRawDone() bool {
	for _, e := range m.ContainerInspectWithRawMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerInspectWithRawMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerInspectWithRawCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerInspectWithRaw != nil && mm_atomic.LoadUint64(&m.afterContainerInspectWithRawCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerInspectWithRawInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerInspectWithRawInspect() {
	for _, e := range m.ContainerInspectWithRawMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerInspectWithRaw with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerInspectWithRawMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerInspectWithRawCounter) < 1 {
		if m.ContainerInspectWithRawMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerInspectWithRaw")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerInspectWithRaw with params: %#v", *m.ContainerInspectWithRawMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerInspectWithRaw != nil && mm_atomic.LoadUint64(&m.afterContainerInspectWithRawCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerInspectWithRaw")
	}
}

type mCommonAPIClientMockContainerKill struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerKillExpectation
	expectations       []*CommonAPIClientMockContainerKillExpectation

	callArgs []*CommonAPIClientMockContainerKillParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerKillExpectation specifies expectation struct of the CommonAPIClient.ContainerKill
type CommonAPIClientMockContainerKillExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerKillParams
	results *CommonAPIClientMockContainerKillResults
	Counter uint64
}

// CommonAPIClientMockContainerKillParams contains parameters of the CommonAPIClient.ContainerKill
type CommonAPIClientMockContainerKillParams struct {
	ctx       context.Context
	container string
	signal    string
}

// CommonAPIClientMockContainerKillResults contains results of the CommonAPIClient.ContainerKill
type CommonAPIClientMockContainerKillResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerKill
func (mmContainerKill *mCommonAPIClientMockContainerKill) Expect(ctx context.Context, container string, signal string) *mCommonAPIClientMockContainerKill {
	if mmContainerKill.mock.funcContainerKill != nil {
		mmContainerKill.mock.t.Fatalf("CommonAPIClientMock.ContainerKill mock is already set by Set")
	}

	if mmContainerKill.defaultExpectation == nil {
		mmContainerKill.defaultExpectation = &CommonAPIClientMockContainerKillExpectation{}
	}

	mmContainerKill.defaultExpectation.params = &CommonAPIClientMockContainerKillParams{ctx, container, signal}
	for _, e := range mmContainerKill.expectations {
		if minimock.Equal(e.params, mmContainerKill.defaultExpectation.params) {
			mmContainerKill.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerKill.defaultExpectation.params)
		}
	}

	return mmContainerKill
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerKill
func (mmContainerKill *mCommonAPIClientMockContainerKill) Inspect(f func(ctx context.Context, container string, signal string)) *mCommonAPIClientMockContainerKill {
	if mmContainerKill.mock.inspectFuncContainerKill != nil {
		mmContainerKill.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerKill")
	}

	mmContainerKill.mock.inspectFuncContainerKill = f

	return mmContainerKill
}

// Return sets up results that will be returned by CommonAPIClient.ContainerKill
func (mmContainerKill *mCommonAPIClientMockContainerKill) Return(err error) *CommonAPIClientMock {
	if mmContainerKill.mock.funcContainerKill != nil {
		mmContainerKill.mock.t.Fatalf("CommonAPIClientMock.ContainerKill mock is already set by Set")
	}

	if mmContainerKill.defaultExpectation == nil {
		mmContainerKill.defaultExpectation = &CommonAPIClientMockContainerKillExpectation{mock: mmContainerKill.mock}
	}
	mmContainerKill.defaultExpectation.results = &CommonAPIClientMockContainerKillResults{err}
	return mmContainerKill.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerKill method
func (mmContainerKill *mCommonAPIClientMockContainerKill) Set(f func(ctx context.Context, container string, signal string) (err error)) *CommonAPIClientMock {
	if mmContainerKill.defaultExpectation != nil {
		mmContainerKill.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerKill method")
	}

	if len(mmContainerKill.expectations) > 0 {
		mmContainerKill.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerKill method")
	}

	mmContainerKill.mock.funcContainerKill = f
	return mmContainerKill.mock
}

// When sets expectation for the CommonAPIClient.ContainerKill which will trigger the result defined by the following
// Then helper
func (mmContainerKill *mCommonAPIClientMockContainerKill) When(ctx context.Context, container string, signal string) *CommonAPIClientMockContainerKillExpectation {
	if mmContainerKill.mock.funcContainerKill != nil {
		mmContainerKill.mock.t.Fatalf("CommonAPIClientMock.ContainerKill mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerKillExpectation{
		mock:   mmContainerKill.mock,
		params: &CommonAPIClientMockContainerKillParams{ctx, container, signal},
	}
	mmContainerKill.expectations = append(mmContainerKill.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerKill return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerKillExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerKillResults{err}
	return e.mock
}

// ContainerKill implements client.CommonAPIClient
func (mmContainerKill *CommonAPIClientMock) ContainerKill(ctx context.Context, container string, signal string) (err error) {
	mm_atomic.AddUint64(&mmContainerKill.beforeContainerKillCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerKill.afterContainerKillCounter, 1)

	if mmContainerKill.inspectFuncContainerKill != nil {
		mmContainerKill.inspectFuncContainerKill(ctx, container, signal)
	}

	mm_params := &CommonAPIClientMockContainerKillParams{ctx, container, signal}

	// Record call args
	mmContainerKill.ContainerKillMock.mutex.Lock()
	mmContainerKill.ContainerKillMock.callArgs = append(mmContainerKill.ContainerKillMock.callArgs, mm_params)
	mmContainerKill.ContainerKillMock.mutex.Unlock()

	for _, e := range mmContainerKill.ContainerKillMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmContainerKill.ContainerKillMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerKill.ContainerKillMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerKill.ContainerKillMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerKillParams{ctx, container, signal}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerKill.t.Errorf("CommonAPIClientMock.ContainerKill got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerKill.ContainerKillMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerKill.t.Fatal("No results are set for the CommonAPIClientMock.ContainerKill")
		}
		return (*mm_results).err
	}
	if mmContainerKill.funcContainerKill != nil {
		return mmContainerKill.funcContainerKill(ctx, container, signal)
	}
	mmContainerKill.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerKill. %v %v %v", ctx, container, signal)
	return
}

// ContainerKillAfterCounter returns a count of finished CommonAPIClientMock.ContainerKill invocations
func (mmContainerKill *CommonAPIClientMock) ContainerKillAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerKill.afterContainerKillCounter)
}

// ContainerKillBeforeCounter returns a count of CommonAPIClientMock.ContainerKill invocations
func (mmContainerKill *CommonAPIClientMock) ContainerKillBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerKill.beforeContainerKillCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerKill.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerKill *mCommonAPIClientMockContainerKill) Calls() []*CommonAPIClientMockContainerKillParams {
	mmContainerKill.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerKillParams, len(mmContainerKill.callArgs))
	copy(argCopy, mmContainerKill.callArgs)

	mmContainerKill.mutex.RUnlock()

	return argCopy
}

// MinimockContainerKillDone returns true if the count of the ContainerKill invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerKillDone() bool {
	for _, e := range m.ContainerKillMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerKillMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerKillCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerKill != nil && mm_atomic.LoadUint64(&m.afterContainerKillCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerKillInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerKillInspect() {
	for _, e := range m.ContainerKillMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerKill with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerKillMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerKillCounter) < 1 {
		if m.ContainerKillMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerKill")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerKill with params: %#v", *m.ContainerKillMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerKill != nil && mm_atomic.LoadUint64(&m.afterContainerKillCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerKill")
	}
}

type mCommonAPIClientMockContainerList struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerListExpectation
	expectations       []*CommonAPIClientMockContainerListExpectation

	callArgs []*CommonAPIClientMockContainerListParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerListExpectation specifies expectation struct of the CommonAPIClient.ContainerList
type CommonAPIClientMockContainerListExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerListParams
	results *CommonAPIClientMockContainerListResults
	Counter uint64
}

// CommonAPIClientMockContainerListParams contains parameters of the CommonAPIClient.ContainerList
type CommonAPIClientMockContainerListParams struct {
	ctx     context.Context
	options types.ContainerListOptions
}

// CommonAPIClientMockContainerListResults contains results of the CommonAPIClient.ContainerList
type CommonAPIClientMockContainerListResults struct {
	ca1 []types.Container
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerList
func (mmContainerList *mCommonAPIClientMockContainerList) Expect(ctx context.Context, options types.ContainerListOptions) *mCommonAPIClientMockContainerList {
	if mmContainerList.mock.funcContainerList != nil {
		mmContainerList.mock.t.Fatalf("CommonAPIClientMock.ContainerList mock is already set by Set")
	}

	if mmContainerList.defaultExpectation == nil {
		mmContainerList.defaultExpectation = &CommonAPIClientMockContainerListExpectation{}
	}

	mmContainerList.defaultExpectation.params = &CommonAPIClientMockContainerListParams{ctx, options}
	for _, e := range mmContainerList.expectations {
		if minimock.Equal(e.params, mmContainerList.defaultExpectation.params) {
			mmContainerList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerList.defaultExpectation.params)
		}
	}

	return mmContainerList
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerList
func (mmContainerList *mCommonAPIClientMockContainerList) Inspect(f func(ctx context.Context, options types.ContainerListOptions)) *mCommonAPIClientMockContainerList {
	if mmContainerList.mock.inspectFuncContainerList != nil {
		mmContainerList.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerList")
	}

	mmContainerList.mock.inspectFuncContainerList = f

	return mmContainerList
}

// Return sets up results that will be returned by CommonAPIClient.ContainerList
func (mmContainerList *mCommonAPIClientMockContainerList) Return(ca1 []types.Container, err error) *CommonAPIClientMock {
	if mmContainerList.mock.funcContainerList != nil {
		mmContainerList.mock.t.Fatalf("CommonAPIClientMock.ContainerList mock is already set by Set")
	}

	if mmContainerList.defaultExpectation == nil {
		mmContainerList.defaultExpectation = &CommonAPIClientMockContainerListExpectation{mock: mmContainerList.mock}
	}
	mmContainerList.defaultExpectation.results = &CommonAPIClientMockContainerListResults{ca1, err}
	return mmContainerList.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerList method
func (mmContainerList *mCommonAPIClientMockContainerList) Set(f func(ctx context.Context, options types.ContainerListOptions) (ca1 []types.Container, err error)) *CommonAPIClientMock {
	if mmContainerList.defaultExpectation != nil {
		mmContainerList.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerList method")
	}

	if len(mmContainerList.expectations) > 0 {
		mmContainerList.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerList method")
	}

	mmContainerList.mock.funcContainerList = f
	return mmContainerList.mock
}

// When sets expectation for the CommonAPIClient.ContainerList which will trigger the result defined by the following
// Then helper
func (mmContainerList *mCommonAPIClientMockContainerList) When(ctx context.Context, options types.ContainerListOptions) *CommonAPIClientMockContainerListExpectation {
	if mmContainerList.mock.funcContainerList != nil {
		mmContainerList.mock.t.Fatalf("CommonAPIClientMock.ContainerList mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerListExpectation{
		mock:   mmContainerList.mock,
		params: &CommonAPIClientMockContainerListParams{ctx, options},
	}
	mmContainerList.expectations = append(mmContainerList.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerList return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerListExpectation) Then(ca1 []types.Container, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerListResults{ca1, err}
	return e.mock
}

// ContainerList implements client.CommonAPIClient
func (mmContainerList *CommonAPIClientMock) ContainerList(ctx context.Context, options types.ContainerListOptions) (ca1 []types.Container, err error) {
	mm_atomic.AddUint64(&mmContainerList.beforeContainerListCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerList.afterContainerListCounter, 1)

	if mmContainerList.inspectFuncContainerList != nil {
		mmContainerList.inspectFuncContainerList(ctx, options)
	}

	mm_params := &CommonAPIClientMockContainerListParams{ctx, options}

	// Record call args
	mmContainerList.ContainerListMock.mutex.Lock()
	mmContainerList.ContainerListMock.callArgs = append(mmContainerList.ContainerListMock.callArgs, mm_params)
	mmContainerList.ContainerListMock.mutex.Unlock()

	for _, e := range mmContainerList.ContainerListMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ca1, e.results.err
		}
	}

	if mmContainerList.ContainerListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerList.ContainerListMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerList.ContainerListMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerListParams{ctx, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerList.t.Errorf("CommonAPIClientMock.ContainerList got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerList.ContainerListMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerList.t.Fatal("No results are set for the CommonAPIClientMock.ContainerList")
		}
		return (*mm_results).ca1, (*mm_results).err
	}
	if mmContainerList.funcContainerList != nil {
		return mmContainerList.funcContainerList(ctx, options)
	}
	mmContainerList.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerList. %v %v", ctx, options)
	return
}

// ContainerListAfterCounter returns a count of finished CommonAPIClientMock.ContainerList invocations
func (mmContainerList *CommonAPIClientMock) ContainerListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerList.afterContainerListCounter)
}

// ContainerListBeforeCounter returns a count of CommonAPIClientMock.ContainerList invocations
func (mmContainerList *CommonAPIClientMock) ContainerListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerList.beforeContainerListCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerList.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerList *mCommonAPIClientMockContainerList) Calls() []*CommonAPIClientMockContainerListParams {
	mmContainerList.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerListParams, len(mmContainerList.callArgs))
	copy(argCopy, mmContainerList.callArgs)

	mmContainerList.mutex.RUnlock()

	return argCopy
}

// MinimockContainerListDone returns true if the count of the ContainerList invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerListDone() bool {
	for _, e := range m.ContainerListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerListCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerList != nil && mm_atomic.LoadUint64(&m.afterContainerListCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerListInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerListInspect() {
	for _, e := range m.ContainerListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerList with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerListCounter) < 1 {
		if m.ContainerListMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerList")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerList with params: %#v", *m.ContainerListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerList != nil && mm_atomic.LoadUint64(&m.afterContainerListCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerList")
	}
}

type mCommonAPIClientMockContainerLogs struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerLogsExpectation
	expectations       []*CommonAPIClientMockContainerLogsExpectation

	callArgs []*CommonAPIClientMockContainerLogsParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerLogsExpectation specifies expectation struct of the CommonAPIClient.ContainerLogs
type CommonAPIClientMockContainerLogsExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerLogsParams
	results *CommonAPIClientMockContainerLogsResults
	Counter uint64
}

// CommonAPIClientMockContainerLogsParams contains parameters of the CommonAPIClient.ContainerLogs
type CommonAPIClientMockContainerLogsParams struct {
	ctx       context.Context
	container string
	options   types.ContainerLogsOptions
}

// CommonAPIClientMockContainerLogsResults contains results of the CommonAPIClient.ContainerLogs
type CommonAPIClientMockContainerLogsResults struct {
	r1  io.ReadCloser
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerLogs
func (mmContainerLogs *mCommonAPIClientMockContainerLogs) Expect(ctx context.Context, container string, options types.ContainerLogsOptions) *mCommonAPIClientMockContainerLogs {
	if mmContainerLogs.mock.funcContainerLogs != nil {
		mmContainerLogs.mock.t.Fatalf("CommonAPIClientMock.ContainerLogs mock is already set by Set")
	}

	if mmContainerLogs.defaultExpectation == nil {
		mmContainerLogs.defaultExpectation = &CommonAPIClientMockContainerLogsExpectation{}
	}

	mmContainerLogs.defaultExpectation.params = &CommonAPIClientMockContainerLogsParams{ctx, container, options}
	for _, e := range mmContainerLogs.expectations {
		if minimock.Equal(e.params, mmContainerLogs.defaultExpectation.params) {
			mmContainerLogs.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerLogs.defaultExpectation.params)
		}
	}

	return mmContainerLogs
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerLogs
func (mmContainerLogs *mCommonAPIClientMockContainerLogs) Inspect(f func(ctx context.Context, container string, options types.ContainerLogsOptions)) *mCommonAPIClientMockContainerLogs {
	if mmContainerLogs.mock.inspectFuncContainerLogs != nil {
		mmContainerLogs.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerLogs")
	}

	mmContainerLogs.mock.inspectFuncContainerLogs = f

	return mmContainerLogs
}

// Return sets up results that will be returned by CommonAPIClient.ContainerLogs
func (mmContainerLogs *mCommonAPIClientMockContainerLogs) Return(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	if mmContainerLogs.mock.funcContainerLogs != nil {
		mmContainerLogs.mock.t.Fatalf("CommonAPIClientMock.ContainerLogs mock is already set by Set")
	}

	if mmContainerLogs.defaultExpectation == nil {
		mmContainerLogs.defaultExpectation = &CommonAPIClientMockContainerLogsExpectation{mock: mmContainerLogs.mock}
	}
	mmContainerLogs.defaultExpectation.results = &CommonAPIClientMockContainerLogsResults{r1, err}
	return mmContainerLogs.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerLogs method
func (mmContainerLogs *mCommonAPIClientMockContainerLogs) Set(f func(ctx context.Context, container string, options types.ContainerLogsOptions) (r1 io.ReadCloser, err error)) *CommonAPIClientMock {
	if mmContainerLogs.defaultExpectation != nil {
		mmContainerLogs.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerLogs method")
	}

	if len(mmContainerLogs.expectations) > 0 {
		mmContainerLogs.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerLogs method")
	}

	mmContainerLogs.mock.funcContainerLogs = f
	return mmContainerLogs.mock
}

// When sets expectation for the CommonAPIClient.ContainerLogs which will trigger the result defined by the following
// Then helper
func (mmContainerLogs *mCommonAPIClientMockContainerLogs) When(ctx context.Context, container string, options types.ContainerLogsOptions) *CommonAPIClientMockContainerLogsExpectation {
	if mmContainerLogs.mock.funcContainerLogs != nil {
		mmContainerLogs.mock.t.Fatalf("CommonAPIClientMock.ContainerLogs mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerLogsExpectation{
		mock:   mmContainerLogs.mock,
		params: &CommonAPIClientMockContainerLogsParams{ctx, container, options},
	}
	mmContainerLogs.expectations = append(mmContainerLogs.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerLogs return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerLogsExpectation) Then(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerLogsResults{r1, err}
	return e.mock
}

// ContainerLogs implements client.CommonAPIClient
func (mmContainerLogs *CommonAPIClientMock) ContainerLogs(ctx context.Context, container string, options types.ContainerLogsOptions) (r1 io.ReadCloser, err error) {
	mm_atomic.AddUint64(&mmContainerLogs.beforeContainerLogsCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerLogs.afterContainerLogsCounter, 1)

	if mmContainerLogs.inspectFuncContainerLogs != nil {
		mmContainerLogs.inspectFuncContainerLogs(ctx, container, options)
	}

	mm_params := &CommonAPIClientMockContainerLogsParams{ctx, container, options}

	// Record call args
	mmContainerLogs.ContainerLogsMock.mutex.Lock()
	mmContainerLogs.ContainerLogsMock.callArgs = append(mmContainerLogs.ContainerLogsMock.callArgs, mm_params)
	mmContainerLogs.ContainerLogsMock.mutex.Unlock()

	for _, e := range mmContainerLogs.ContainerLogsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmContainerLogs.ContainerLogsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerLogs.ContainerLogsMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerLogs.ContainerLogsMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerLogsParams{ctx, container, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerLogs.t.Errorf("CommonAPIClientMock.ContainerLogs got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerLogs.ContainerLogsMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerLogs.t.Fatal("No results are set for the CommonAPIClientMock.ContainerLogs")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmContainerLogs.funcContainerLogs != nil {
		return mmContainerLogs.funcContainerLogs(ctx, container, options)
	}
	mmContainerLogs.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerLogs. %v %v %v", ctx, container, options)
	return
}

// ContainerLogsAfterCounter returns a count of finished CommonAPIClientMock.ContainerLogs invocations
func (mmContainerLogs *CommonAPIClientMock) ContainerLogsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerLogs.afterContainerLogsCounter)
}

// ContainerLogsBeforeCounter returns a count of CommonAPIClientMock.ContainerLogs invocations
func (mmContainerLogs *CommonAPIClientMock) ContainerLogsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerLogs.beforeContainerLogsCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerLogs.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerLogs *mCommonAPIClientMockContainerLogs) Calls() []*CommonAPIClientMockContainerLogsParams {
	mmContainerLogs.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerLogsParams, len(mmContainerLogs.callArgs))
	copy(argCopy, mmContainerLogs.callArgs)

	mmContainerLogs.mutex.RUnlock()

	return argCopy
}

// MinimockContainerLogsDone returns true if the count of the ContainerLogs invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerLogsDone() bool {
	for _, e := range m.ContainerLogsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerLogsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerLogsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerLogs != nil && mm_atomic.LoadUint64(&m.afterContainerLogsCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerLogsInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerLogsInspect() {
	for _, e := range m.ContainerLogsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerLogs with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerLogsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerLogsCounter) < 1 {
		if m.ContainerLogsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerLogs")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerLogs with params: %#v", *m.ContainerLogsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerLogs != nil && mm_atomic.LoadUint64(&m.afterContainerLogsCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerLogs")
	}
}

type mCommonAPIClientMockContainerPause struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerPauseExpectation
	expectations       []*CommonAPIClientMockContainerPauseExpectation

	callArgs []*CommonAPIClientMockContainerPauseParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerPauseExpectation specifies expectation struct of the CommonAPIClient.ContainerPause
type CommonAPIClientMockContainerPauseExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerPauseParams
	results *CommonAPIClientMockContainerPauseResults
	Counter uint64
}

// CommonAPIClientMockContainerPauseParams contains parameters of the CommonAPIClient.ContainerPause
type CommonAPIClientMockContainerPauseParams struct {
	ctx       context.Context
	container string
}

// CommonAPIClientMockContainerPauseResults contains results of the CommonAPIClient.ContainerPause
type CommonAPIClientMockContainerPauseResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerPause
func (mmContainerPause *mCommonAPIClientMockContainerPause) Expect(ctx context.Context, container string) *mCommonAPIClientMockContainerPause {
	if mmContainerPause.mock.funcContainerPause != nil {
		mmContainerPause.mock.t.Fatalf("CommonAPIClientMock.ContainerPause mock is already set by Set")
	}

	if mmContainerPause.defaultExpectation == nil {
		mmContainerPause.defaultExpectation = &CommonAPIClientMockContainerPauseExpectation{}
	}

	mmContainerPause.defaultExpectation.params = &CommonAPIClientMockContainerPauseParams{ctx, container}
	for _, e := range mmContainerPause.expectations {
		if minimock.Equal(e.params, mmContainerPause.defaultExpectation.params) {
			mmContainerPause.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerPause.defaultExpectation.params)
		}
	}

	return mmContainerPause
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerPause
func (mmContainerPause *mCommonAPIClientMockContainerPause) Inspect(f func(ctx context.Context, container string)) *mCommonAPIClientMockContainerPause {
	if mmContainerPause.mock.inspectFuncContainerPause != nil {
		mmContainerPause.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerPause")
	}

	mmContainerPause.mock.inspectFuncContainerPause = f

	return mmContainerPause
}

// Return sets up results that will be returned by CommonAPIClient.ContainerPause
func (mmContainerPause *mCommonAPIClientMockContainerPause) Return(err error) *CommonAPIClientMock {
	if mmContainerPause.mock.funcContainerPause != nil {
		mmContainerPause.mock.t.Fatalf("CommonAPIClientMock.ContainerPause mock is already set by Set")
	}

	if mmContainerPause.defaultExpectation == nil {
		mmContainerPause.defaultExpectation = &CommonAPIClientMockContainerPauseExpectation{mock: mmContainerPause.mock}
	}
	mmContainerPause.defaultExpectation.results = &CommonAPIClientMockContainerPauseResults{err}
	return mmContainerPause.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerPause method
func (mmContainerPause *mCommonAPIClientMockContainerPause) Set(f func(ctx context.Context, container string) (err error)) *CommonAPIClientMock {
	if mmContainerPause.defaultExpectation != nil {
		mmContainerPause.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerPause method")
	}

	if len(mmContainerPause.expectations) > 0 {
		mmContainerPause.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerPause method")
	}

	mmContainerPause.mock.funcContainerPause = f
	return mmContainerPause.mock
}

// When sets expectation for the CommonAPIClient.ContainerPause which will trigger the result defined by the following
// Then helper
func (mmContainerPause *mCommonAPIClientMockContainerPause) When(ctx context.Context, container string) *CommonAPIClientMockContainerPauseExpectation {
	if mmContainerPause.mock.funcContainerPause != nil {
		mmContainerPause.mock.t.Fatalf("CommonAPIClientMock.ContainerPause mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerPauseExpectation{
		mock:   mmContainerPause.mock,
		params: &CommonAPIClientMockContainerPauseParams{ctx, container},
	}
	mmContainerPause.expectations = append(mmContainerPause.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerPause return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerPauseExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerPauseResults{err}
	return e.mock
}

// ContainerPause implements client.CommonAPIClient
func (mmContainerPause *CommonAPIClientMock) ContainerPause(ctx context.Context, container string) (err error) {
	mm_atomic.AddUint64(&mmContainerPause.beforeContainerPauseCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerPause.afterContainerPauseCounter, 1)

	if mmContainerPause.inspectFuncContainerPause != nil {
		mmContainerPause.inspectFuncContainerPause(ctx, container)
	}

	mm_params := &CommonAPIClientMockContainerPauseParams{ctx, container}

	// Record call args
	mmContainerPause.ContainerPauseMock.mutex.Lock()
	mmContainerPause.ContainerPauseMock.callArgs = append(mmContainerPause.ContainerPauseMock.callArgs, mm_params)
	mmContainerPause.ContainerPauseMock.mutex.Unlock()

	for _, e := range mmContainerPause.ContainerPauseMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmContainerPause.ContainerPauseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerPause.ContainerPauseMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerPause.ContainerPauseMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerPauseParams{ctx, container}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerPause.t.Errorf("CommonAPIClientMock.ContainerPause got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerPause.ContainerPauseMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerPause.t.Fatal("No results are set for the CommonAPIClientMock.ContainerPause")
		}
		return (*mm_results).err
	}
	if mmContainerPause.funcContainerPause != nil {
		return mmContainerPause.funcContainerPause(ctx, container)
	}
	mmContainerPause.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerPause. %v %v", ctx, container)
	return
}

// ContainerPauseAfterCounter returns a count of finished CommonAPIClientMock.ContainerPause invocations
func (mmContainerPause *CommonAPIClientMock) ContainerPauseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerPause.afterContainerPauseCounter)
}

// ContainerPauseBeforeCounter returns a count of CommonAPIClientMock.ContainerPause invocations
func (mmContainerPause *CommonAPIClientMock) ContainerPauseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerPause.beforeContainerPauseCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerPause.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerPause *mCommonAPIClientMockContainerPause) Calls() []*CommonAPIClientMockContainerPauseParams {
	mmContainerPause.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerPauseParams, len(mmContainerPause.callArgs))
	copy(argCopy, mmContainerPause.callArgs)

	mmContainerPause.mutex.RUnlock()

	return argCopy
}

// MinimockContainerPauseDone returns true if the count of the ContainerPause invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerPauseDone() bool {
	for _, e := range m.ContainerPauseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerPauseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerPauseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerPause != nil && mm_atomic.LoadUint64(&m.afterContainerPauseCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerPauseInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerPauseInspect() {
	for _, e := range m.ContainerPauseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerPause with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerPauseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerPauseCounter) < 1 {
		if m.ContainerPauseMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerPause")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerPause with params: %#v", *m.ContainerPauseMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerPause != nil && mm_atomic.LoadUint64(&m.afterContainerPauseCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerPause")
	}
}

type mCommonAPIClientMockContainerRemove struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerRemoveExpectation
	expectations       []*CommonAPIClientMockContainerRemoveExpectation

	callArgs []*CommonAPIClientMockContainerRemoveParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerRemoveExpectation specifies expectation struct of the CommonAPIClient.ContainerRemove
type CommonAPIClientMockContainerRemoveExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerRemoveParams
	results *CommonAPIClientMockContainerRemoveResults
	Counter uint64
}

// CommonAPIClientMockContainerRemoveParams contains parameters of the CommonAPIClient.ContainerRemove
type CommonAPIClientMockContainerRemoveParams struct {
	ctx       context.Context
	container string
	options   types.ContainerRemoveOptions
}

// CommonAPIClientMockContainerRemoveResults contains results of the CommonAPIClient.ContainerRemove
type CommonAPIClientMockContainerRemoveResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerRemove
func (mmContainerRemove *mCommonAPIClientMockContainerRemove) Expect(ctx context.Context, container string, options types.ContainerRemoveOptions) *mCommonAPIClientMockContainerRemove {
	if mmContainerRemove.mock.funcContainerRemove != nil {
		mmContainerRemove.mock.t.Fatalf("CommonAPIClientMock.ContainerRemove mock is already set by Set")
	}

	if mmContainerRemove.defaultExpectation == nil {
		mmContainerRemove.defaultExpectation = &CommonAPIClientMockContainerRemoveExpectation{}
	}

	mmContainerRemove.defaultExpectation.params = &CommonAPIClientMockContainerRemoveParams{ctx, container, options}
	for _, e := range mmContainerRemove.expectations {
		if minimock.Equal(e.params, mmContainerRemove.defaultExpectation.params) {
			mmContainerRemove.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerRemove.defaultExpectation.params)
		}
	}

	return mmContainerRemove
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerRemove
func (mmContainerRemove *mCommonAPIClientMockContainerRemove) Inspect(f func(ctx context.Context, container string, options types.ContainerRemoveOptions)) *mCommonAPIClientMockContainerRemove {
	if mmContainerRemove.mock.inspectFuncContainerRemove != nil {
		mmContainerRemove.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerRemove")
	}

	mmContainerRemove.mock.inspectFuncContainerRemove = f

	return mmContainerRemove
}

// Return sets up results that will be returned by CommonAPIClient.ContainerRemove
func (mmContainerRemove *mCommonAPIClientMockContainerRemove) Return(err error) *CommonAPIClientMock {
	if mmContainerRemove.mock.funcContainerRemove != nil {
		mmContainerRemove.mock.t.Fatalf("CommonAPIClientMock.ContainerRemove mock is already set by Set")
	}

	if mmContainerRemove.defaultExpectation == nil {
		mmContainerRemove.defaultExpectation = &CommonAPIClientMockContainerRemoveExpectation{mock: mmContainerRemove.mock}
	}
	mmContainerRemove.defaultExpectation.results = &CommonAPIClientMockContainerRemoveResults{err}
	return mmContainerRemove.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerRemove method
func (mmContainerRemove *mCommonAPIClientMockContainerRemove) Set(f func(ctx context.Context, container string, options types.ContainerRemoveOptions) (err error)) *CommonAPIClientMock {
	if mmContainerRemove.defaultExpectation != nil {
		mmContainerRemove.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerRemove method")
	}

	if len(mmContainerRemove.expectations) > 0 {
		mmContainerRemove.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerRemove method")
	}

	mmContainerRemove.mock.funcContainerRemove = f
	return mmContainerRemove.mock
}

// When sets expectation for the CommonAPIClient.ContainerRemove which will trigger the result defined by the following
// Then helper
func (mmContainerRemove *mCommonAPIClientMockContainerRemove) When(ctx context.Context, container string, options types.ContainerRemoveOptions) *CommonAPIClientMockContainerRemoveExpectation {
	if mmContainerRemove.mock.funcContainerRemove != nil {
		mmContainerRemove.mock.t.Fatalf("CommonAPIClientMock.ContainerRemove mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerRemoveExpectation{
		mock:   mmContainerRemove.mock,
		params: &CommonAPIClientMockContainerRemoveParams{ctx, container, options},
	}
	mmContainerRemove.expectations = append(mmContainerRemove.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerRemove return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerRemoveExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerRemoveResults{err}
	return e.mock
}

// ContainerRemove implements client.CommonAPIClient
func (mmContainerRemove *CommonAPIClientMock) ContainerRemove(ctx context.Context, container string, options types.ContainerRemoveOptions) (err error) {
	mm_atomic.AddUint64(&mmContainerRemove.beforeContainerRemoveCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerRemove.afterContainerRemoveCounter, 1)

	if mmContainerRemove.inspectFuncContainerRemove != nil {
		mmContainerRemove.inspectFuncContainerRemove(ctx, container, options)
	}

	mm_params := &CommonAPIClientMockContainerRemoveParams{ctx, container, options}

	// Record call args
	mmContainerRemove.ContainerRemoveMock.mutex.Lock()
	mmContainerRemove.ContainerRemoveMock.callArgs = append(mmContainerRemove.ContainerRemoveMock.callArgs, mm_params)
	mmContainerRemove.ContainerRemoveMock.mutex.Unlock()

	for _, e := range mmContainerRemove.ContainerRemoveMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmContainerRemove.ContainerRemoveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerRemove.ContainerRemoveMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerRemove.ContainerRemoveMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerRemoveParams{ctx, container, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerRemove.t.Errorf("CommonAPIClientMock.ContainerRemove got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerRemove.ContainerRemoveMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerRemove.t.Fatal("No results are set for the CommonAPIClientMock.ContainerRemove")
		}
		return (*mm_results).err
	}
	if mmContainerRemove.funcContainerRemove != nil {
		return mmContainerRemove.funcContainerRemove(ctx, container, options)
	}
	mmContainerRemove.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerRemove. %v %v %v", ctx, container, options)
	return
}

// ContainerRemoveAfterCounter returns a count of finished CommonAPIClientMock.ContainerRemove invocations
func (mmContainerRemove *CommonAPIClientMock) ContainerRemoveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerRemove.afterContainerRemoveCounter)
}

// ContainerRemoveBeforeCounter returns a count of CommonAPIClientMock.ContainerRemove invocations
func (mmContainerRemove *CommonAPIClientMock) ContainerRemoveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerRemove.beforeContainerRemoveCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerRemove.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerRemove *mCommonAPIClientMockContainerRemove) Calls() []*CommonAPIClientMockContainerRemoveParams {
	mmContainerRemove.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerRemoveParams, len(mmContainerRemove.callArgs))
	copy(argCopy, mmContainerRemove.callArgs)

	mmContainerRemove.mutex.RUnlock()

	return argCopy
}

// MinimockContainerRemoveDone returns true if the count of the ContainerRemove invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerRemoveDone() bool {
	for _, e := range m.ContainerRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerRemoveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerRemoveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerRemove != nil && mm_atomic.LoadUint64(&m.afterContainerRemoveCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerRemoveInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerRemoveInspect() {
	for _, e := range m.ContainerRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerRemove with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerRemoveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerRemoveCounter) < 1 {
		if m.ContainerRemoveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerRemove")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerRemove with params: %#v", *m.ContainerRemoveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerRemove != nil && mm_atomic.LoadUint64(&m.afterContainerRemoveCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerRemove")
	}
}

type mCommonAPIClientMockContainerRename struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerRenameExpectation
	expectations       []*CommonAPIClientMockContainerRenameExpectation

	callArgs []*CommonAPIClientMockContainerRenameParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerRenameExpectation specifies expectation struct of the CommonAPIClient.ContainerRename
type CommonAPIClientMockContainerRenameExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerRenameParams
	results *CommonAPIClientMockContainerRenameResults
	Counter uint64
}

// CommonAPIClientMockContainerRenameParams contains parameters of the CommonAPIClient.ContainerRename
type CommonAPIClientMockContainerRenameParams struct {
	ctx              context.Context
	container        string
	newContainerName string
}

// CommonAPIClientMockContainerRenameResults contains results of the CommonAPIClient.ContainerRename
type CommonAPIClientMockContainerRenameResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerRename
func (mmContainerRename *mCommonAPIClientMockContainerRename) Expect(ctx context.Context, container string, newContainerName string) *mCommonAPIClientMockContainerRename {
	if mmContainerRename.mock.funcContainerRename != nil {
		mmContainerRename.mock.t.Fatalf("CommonAPIClientMock.ContainerRename mock is already set by Set")
	}

	if mmContainerRename.defaultExpectation == nil {
		mmContainerRename.defaultExpectation = &CommonAPIClientMockContainerRenameExpectation{}
	}

	mmContainerRename.defaultExpectation.params = &CommonAPIClientMockContainerRenameParams{ctx, container, newContainerName}
	for _, e := range mmContainerRename.expectations {
		if minimock.Equal(e.params, mmContainerRename.defaultExpectation.params) {
			mmContainerRename.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerRename.defaultExpectation.params)
		}
	}

	return mmContainerRename
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerRename
func (mmContainerRename *mCommonAPIClientMockContainerRename) Inspect(f func(ctx context.Context, container string, newContainerName string)) *mCommonAPIClientMockContainerRename {
	if mmContainerRename.mock.inspectFuncContainerRename != nil {
		mmContainerRename.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerRename")
	}

	mmContainerRename.mock.inspectFuncContainerRename = f

	return mmContainerRename
}

// Return sets up results that will be returned by CommonAPIClient.ContainerRename
func (mmContainerRename *mCommonAPIClientMockContainerRename) Return(err error) *CommonAPIClientMock {
	if mmContainerRename.mock.funcContainerRename != nil {
		mmContainerRename.mock.t.Fatalf("CommonAPIClientMock.ContainerRename mock is already set by Set")
	}

	if mmContainerRename.defaultExpectation == nil {
		mmContainerRename.defaultExpectation = &CommonAPIClientMockContainerRenameExpectation{mock: mmContainerRename.mock}
	}
	mmContainerRename.defaultExpectation.results = &CommonAPIClientMockContainerRenameResults{err}
	return mmContainerRename.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerRename method
func (mmContainerRename *mCommonAPIClientMockContainerRename) Set(f func(ctx context.Context, container string, newContainerName string) (err error)) *CommonAPIClientMock {
	if mmContainerRename.defaultExpectation != nil {
		mmContainerRename.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerRename method")
	}

	if len(mmContainerRename.expectations) > 0 {
		mmContainerRename.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerRename method")
	}

	mmContainerRename.mock.funcContainerRename = f
	return mmContainerRename.mock
}

// When sets expectation for the CommonAPIClient.ContainerRename which will trigger the result defined by the following
// Then helper
func (mmContainerRename *mCommonAPIClientMockContainerRename) When(ctx context.Context, container string, newContainerName string) *CommonAPIClientMockContainerRenameExpectation {
	if mmContainerRename.mock.funcContainerRename != nil {
		mmContainerRename.mock.t.Fatalf("CommonAPIClientMock.ContainerRename mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerRenameExpectation{
		mock:   mmContainerRename.mock,
		params: &CommonAPIClientMockContainerRenameParams{ctx, container, newContainerName},
	}
	mmContainerRename.expectations = append(mmContainerRename.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerRename return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerRenameExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerRenameResults{err}
	return e.mock
}

// ContainerRename implements client.CommonAPIClient
func (mmContainerRename *CommonAPIClientMock) ContainerRename(ctx context.Context, container string, newContainerName string) (err error) {
	mm_atomic.AddUint64(&mmContainerRename.beforeContainerRenameCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerRename.afterContainerRenameCounter, 1)

	if mmContainerRename.inspectFuncContainerRename != nil {
		mmContainerRename.inspectFuncContainerRename(ctx, container, newContainerName)
	}

	mm_params := &CommonAPIClientMockContainerRenameParams{ctx, container, newContainerName}

	// Record call args
	mmContainerRename.ContainerRenameMock.mutex.Lock()
	mmContainerRename.ContainerRenameMock.callArgs = append(mmContainerRename.ContainerRenameMock.callArgs, mm_params)
	mmContainerRename.ContainerRenameMock.mutex.Unlock()

	for _, e := range mmContainerRename.ContainerRenameMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmContainerRename.ContainerRenameMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerRename.ContainerRenameMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerRename.ContainerRenameMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerRenameParams{ctx, container, newContainerName}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerRename.t.Errorf("CommonAPIClientMock.ContainerRename got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerRename.ContainerRenameMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerRename.t.Fatal("No results are set for the CommonAPIClientMock.ContainerRename")
		}
		return (*mm_results).err
	}
	if mmContainerRename.funcContainerRename != nil {
		return mmContainerRename.funcContainerRename(ctx, container, newContainerName)
	}
	mmContainerRename.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerRename. %v %v %v", ctx, container, newContainerName)
	return
}

// ContainerRenameAfterCounter returns a count of finished CommonAPIClientMock.ContainerRename invocations
func (mmContainerRename *CommonAPIClientMock) ContainerRenameAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerRename.afterContainerRenameCounter)
}

// ContainerRenameBeforeCounter returns a count of CommonAPIClientMock.ContainerRename invocations
func (mmContainerRename *CommonAPIClientMock) ContainerRenameBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerRename.beforeContainerRenameCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerRename.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerRename *mCommonAPIClientMockContainerRename) Calls() []*CommonAPIClientMockContainerRenameParams {
	mmContainerRename.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerRenameParams, len(mmContainerRename.callArgs))
	copy(argCopy, mmContainerRename.callArgs)

	mmContainerRename.mutex.RUnlock()

	return argCopy
}

// MinimockContainerRenameDone returns true if the count of the ContainerRename invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerRenameDone() bool {
	for _, e := range m.ContainerRenameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerRenameMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerRenameCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerRename != nil && mm_atomic.LoadUint64(&m.afterContainerRenameCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerRenameInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerRenameInspect() {
	for _, e := range m.ContainerRenameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerRename with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerRenameMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerRenameCounter) < 1 {
		if m.ContainerRenameMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerRename")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerRename with params: %#v", *m.ContainerRenameMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerRename != nil && mm_atomic.LoadUint64(&m.afterContainerRenameCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerRename")
	}
}

type mCommonAPIClientMockContainerResize struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerResizeExpectation
	expectations       []*CommonAPIClientMockContainerResizeExpectation

	callArgs []*CommonAPIClientMockContainerResizeParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerResizeExpectation specifies expectation struct of the CommonAPIClient.ContainerResize
type CommonAPIClientMockContainerResizeExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerResizeParams
	results *CommonAPIClientMockContainerResizeResults
	Counter uint64
}

// CommonAPIClientMockContainerResizeParams contains parameters of the CommonAPIClient.ContainerResize
type CommonAPIClientMockContainerResizeParams struct {
	ctx       context.Context
	container string
	options   types.ResizeOptions
}

// CommonAPIClientMockContainerResizeResults contains results of the CommonAPIClient.ContainerResize
type CommonAPIClientMockContainerResizeResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerResize
func (mmContainerResize *mCommonAPIClientMockContainerResize) Expect(ctx context.Context, container string, options types.ResizeOptions) *mCommonAPIClientMockContainerResize {
	if mmContainerResize.mock.funcContainerResize != nil {
		mmContainerResize.mock.t.Fatalf("CommonAPIClientMock.ContainerResize mock is already set by Set")
	}

	if mmContainerResize.defaultExpectation == nil {
		mmContainerResize.defaultExpectation = &CommonAPIClientMockContainerResizeExpectation{}
	}

	mmContainerResize.defaultExpectation.params = &CommonAPIClientMockContainerResizeParams{ctx, container, options}
	for _, e := range mmContainerResize.expectations {
		if minimock.Equal(e.params, mmContainerResize.defaultExpectation.params) {
			mmContainerResize.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerResize.defaultExpectation.params)
		}
	}

	return mmContainerResize
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerResize
func (mmContainerResize *mCommonAPIClientMockContainerResize) Inspect(f func(ctx context.Context, container string, options types.ResizeOptions)) *mCommonAPIClientMockContainerResize {
	if mmContainerResize.mock.inspectFuncContainerResize != nil {
		mmContainerResize.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerResize")
	}

	mmContainerResize.mock.inspectFuncContainerResize = f

	return mmContainerResize
}

// Return sets up results that will be returned by CommonAPIClient.ContainerResize
func (mmContainerResize *mCommonAPIClientMockContainerResize) Return(err error) *CommonAPIClientMock {
	if mmContainerResize.mock.funcContainerResize != nil {
		mmContainerResize.mock.t.Fatalf("CommonAPIClientMock.ContainerResize mock is already set by Set")
	}

	if mmContainerResize.defaultExpectation == nil {
		mmContainerResize.defaultExpectation = &CommonAPIClientMockContainerResizeExpectation{mock: mmContainerResize.mock}
	}
	mmContainerResize.defaultExpectation.results = &CommonAPIClientMockContainerResizeResults{err}
	return mmContainerResize.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerResize method
func (mmContainerResize *mCommonAPIClientMockContainerResize) Set(f func(ctx context.Context, container string, options types.ResizeOptions) (err error)) *CommonAPIClientMock {
	if mmContainerResize.defaultExpectation != nil {
		mmContainerResize.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerResize method")
	}

	if len(mmContainerResize.expectations) > 0 {
		mmContainerResize.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerResize method")
	}

	mmContainerResize.mock.funcContainerResize = f
	return mmContainerResize.mock
}

// When sets expectation for the CommonAPIClient.ContainerResize which will trigger the result defined by the following
// Then helper
func (mmContainerResize *mCommonAPIClientMockContainerResize) When(ctx context.Context, container string, options types.ResizeOptions) *CommonAPIClientMockContainerResizeExpectation {
	if mmContainerResize.mock.funcContainerResize != nil {
		mmContainerResize.mock.t.Fatalf("CommonAPIClientMock.ContainerResize mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerResizeExpectation{
		mock:   mmContainerResize.mock,
		params: &CommonAPIClientMockContainerResizeParams{ctx, container, options},
	}
	mmContainerResize.expectations = append(mmContainerResize.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerResize return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerResizeExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerResizeResults{err}
	return e.mock
}

// ContainerResize implements client.CommonAPIClient
func (mmContainerResize *CommonAPIClientMock) ContainerResize(ctx context.Context, container string, options types.ResizeOptions) (err error) {
	mm_atomic.AddUint64(&mmContainerResize.beforeContainerResizeCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerResize.afterContainerResizeCounter, 1)

	if mmContainerResize.inspectFuncContainerResize != nil {
		mmContainerResize.inspectFuncContainerResize(ctx, container, options)
	}

	mm_params := &CommonAPIClientMockContainerResizeParams{ctx, container, options}

	// Record call args
	mmContainerResize.ContainerResizeMock.mutex.Lock()
	mmContainerResize.ContainerResizeMock.callArgs = append(mmContainerResize.ContainerResizeMock.callArgs, mm_params)
	mmContainerResize.ContainerResizeMock.mutex.Unlock()

	for _, e := range mmContainerResize.ContainerResizeMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmContainerResize.ContainerResizeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerResize.ContainerResizeMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerResize.ContainerResizeMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerResizeParams{ctx, container, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerResize.t.Errorf("CommonAPIClientMock.ContainerResize got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerResize.ContainerResizeMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerResize.t.Fatal("No results are set for the CommonAPIClientMock.ContainerResize")
		}
		return (*mm_results).err
	}
	if mmContainerResize.funcContainerResize != nil {
		return mmContainerResize.funcContainerResize(ctx, container, options)
	}
	mmContainerResize.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerResize. %v %v %v", ctx, container, options)
	return
}

// ContainerResizeAfterCounter returns a count of finished CommonAPIClientMock.ContainerResize invocations
func (mmContainerResize *CommonAPIClientMock) ContainerResizeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerResize.afterContainerResizeCounter)
}

// ContainerResizeBeforeCounter returns a count of CommonAPIClientMock.ContainerResize invocations
func (mmContainerResize *CommonAPIClientMock) ContainerResizeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerResize.beforeContainerResizeCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerResize.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerResize *mCommonAPIClientMockContainerResize) Calls() []*CommonAPIClientMockContainerResizeParams {
	mmContainerResize.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerResizeParams, len(mmContainerResize.callArgs))
	copy(argCopy, mmContainerResize.callArgs)

	mmContainerResize.mutex.RUnlock()

	return argCopy
}

// MinimockContainerResizeDone returns true if the count of the ContainerResize invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerResizeDone() bool {
	for _, e := range m.ContainerResizeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerResizeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerResizeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerResize != nil && mm_atomic.LoadUint64(&m.afterContainerResizeCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerResizeInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerResizeInspect() {
	for _, e := range m.ContainerResizeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerResize with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerResizeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerResizeCounter) < 1 {
		if m.ContainerResizeMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerResize")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerResize with params: %#v", *m.ContainerResizeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerResize != nil && mm_atomic.LoadUint64(&m.afterContainerResizeCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerResize")
	}
}

type mCommonAPIClientMockContainerRestart struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerRestartExpectation
	expectations       []*CommonAPIClientMockContainerRestartExpectation

	callArgs []*CommonAPIClientMockContainerRestartParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerRestartExpectation specifies expectation struct of the CommonAPIClient.ContainerRestart
type CommonAPIClientMockContainerRestartExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerRestartParams
	results *CommonAPIClientMockContainerRestartResults
	Counter uint64
}

// CommonAPIClientMockContainerRestartParams contains parameters of the CommonAPIClient.ContainerRestart
type CommonAPIClientMockContainerRestartParams struct {
	ctx       context.Context
	container string
	timeout   *time.Duration
}

// CommonAPIClientMockContainerRestartResults contains results of the CommonAPIClient.ContainerRestart
type CommonAPIClientMockContainerRestartResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerRestart
func (mmContainerRestart *mCommonAPIClientMockContainerRestart) Expect(ctx context.Context, container string, timeout *time.Duration) *mCommonAPIClientMockContainerRestart {
	if mmContainerRestart.mock.funcContainerRestart != nil {
		mmContainerRestart.mock.t.Fatalf("CommonAPIClientMock.ContainerRestart mock is already set by Set")
	}

	if mmContainerRestart.defaultExpectation == nil {
		mmContainerRestart.defaultExpectation = &CommonAPIClientMockContainerRestartExpectation{}
	}

	mmContainerRestart.defaultExpectation.params = &CommonAPIClientMockContainerRestartParams{ctx, container, timeout}
	for _, e := range mmContainerRestart.expectations {
		if minimock.Equal(e.params, mmContainerRestart.defaultExpectation.params) {
			mmContainerRestart.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerRestart.defaultExpectation.params)
		}
	}

	return mmContainerRestart
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerRestart
func (mmContainerRestart *mCommonAPIClientMockContainerRestart) Inspect(f func(ctx context.Context, container string, timeout *time.Duration)) *mCommonAPIClientMockContainerRestart {
	if mmContainerRestart.mock.inspectFuncContainerRestart != nil {
		mmContainerRestart.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerRestart")
	}

	mmContainerRestart.mock.inspectFuncContainerRestart = f

	return mmContainerRestart
}

// Return sets up results that will be returned by CommonAPIClient.ContainerRestart
func (mmContainerRestart *mCommonAPIClientMockContainerRestart) Return(err error) *CommonAPIClientMock {
	if mmContainerRestart.mock.funcContainerRestart != nil {
		mmContainerRestart.mock.t.Fatalf("CommonAPIClientMock.ContainerRestart mock is already set by Set")
	}

	if mmContainerRestart.defaultExpectation == nil {
		mmContainerRestart.defaultExpectation = &CommonAPIClientMockContainerRestartExpectation{mock: mmContainerRestart.mock}
	}
	mmContainerRestart.defaultExpectation.results = &CommonAPIClientMockContainerRestartResults{err}
	return mmContainerRestart.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerRestart method
func (mmContainerRestart *mCommonAPIClientMockContainerRestart) Set(f func(ctx context.Context, container string, timeout *time.Duration) (err error)) *CommonAPIClientMock {
	if mmContainerRestart.defaultExpectation != nil {
		mmContainerRestart.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerRestart method")
	}

	if len(mmContainerRestart.expectations) > 0 {
		mmContainerRestart.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerRestart method")
	}

	mmContainerRestart.mock.funcContainerRestart = f
	return mmContainerRestart.mock
}

// When sets expectation for the CommonAPIClient.ContainerRestart which will trigger the result defined by the following
// Then helper
func (mmContainerRestart *mCommonAPIClientMockContainerRestart) When(ctx context.Context, container string, timeout *time.Duration) *CommonAPIClientMockContainerRestartExpectation {
	if mmContainerRestart.mock.funcContainerRestart != nil {
		mmContainerRestart.mock.t.Fatalf("CommonAPIClientMock.ContainerRestart mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerRestartExpectation{
		mock:   mmContainerRestart.mock,
		params: &CommonAPIClientMockContainerRestartParams{ctx, container, timeout},
	}
	mmContainerRestart.expectations = append(mmContainerRestart.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerRestart return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerRestartExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerRestartResults{err}
	return e.mock
}

// ContainerRestart implements client.CommonAPIClient
func (mmContainerRestart *CommonAPIClientMock) ContainerRestart(ctx context.Context, container string, timeout *time.Duration) (err error) {
	mm_atomic.AddUint64(&mmContainerRestart.beforeContainerRestartCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerRestart.afterContainerRestartCounter, 1)

	if mmContainerRestart.inspectFuncContainerRestart != nil {
		mmContainerRestart.inspectFuncContainerRestart(ctx, container, timeout)
	}

	mm_params := &CommonAPIClientMockContainerRestartParams{ctx, container, timeout}

	// Record call args
	mmContainerRestart.ContainerRestartMock.mutex.Lock()
	mmContainerRestart.ContainerRestartMock.callArgs = append(mmContainerRestart.ContainerRestartMock.callArgs, mm_params)
	mmContainerRestart.ContainerRestartMock.mutex.Unlock()

	for _, e := range mmContainerRestart.ContainerRestartMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmContainerRestart.ContainerRestartMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerRestart.ContainerRestartMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerRestart.ContainerRestartMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerRestartParams{ctx, container, timeout}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerRestart.t.Errorf("CommonAPIClientMock.ContainerRestart got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerRestart.ContainerRestartMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerRestart.t.Fatal("No results are set for the CommonAPIClientMock.ContainerRestart")
		}
		return (*mm_results).err
	}
	if mmContainerRestart.funcContainerRestart != nil {
		return mmContainerRestart.funcContainerRestart(ctx, container, timeout)
	}
	mmContainerRestart.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerRestart. %v %v %v", ctx, container, timeout)
	return
}

// ContainerRestartAfterCounter returns a count of finished CommonAPIClientMock.ContainerRestart invocations
func (mmContainerRestart *CommonAPIClientMock) ContainerRestartAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerRestart.afterContainerRestartCounter)
}

// ContainerRestartBeforeCounter returns a count of CommonAPIClientMock.ContainerRestart invocations
func (mmContainerRestart *CommonAPIClientMock) ContainerRestartBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerRestart.beforeContainerRestartCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerRestart.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerRestart *mCommonAPIClientMockContainerRestart) Calls() []*CommonAPIClientMockContainerRestartParams {
	mmContainerRestart.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerRestartParams, len(mmContainerRestart.callArgs))
	copy(argCopy, mmContainerRestart.callArgs)

	mmContainerRestart.mutex.RUnlock()

	return argCopy
}

// MinimockContainerRestartDone returns true if the count of the ContainerRestart invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerRestartDone() bool {
	for _, e := range m.ContainerRestartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerRestartMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerRestartCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerRestart != nil && mm_atomic.LoadUint64(&m.afterContainerRestartCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerRestartInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerRestartInspect() {
	for _, e := range m.ContainerRestartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerRestart with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerRestartMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerRestartCounter) < 1 {
		if m.ContainerRestartMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerRestart")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerRestart with params: %#v", *m.ContainerRestartMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerRestart != nil && mm_atomic.LoadUint64(&m.afterContainerRestartCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerRestart")
	}
}

type mCommonAPIClientMockContainerStart struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerStartExpectation
	expectations       []*CommonAPIClientMockContainerStartExpectation

	callArgs []*CommonAPIClientMockContainerStartParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerStartExpectation specifies expectation struct of the CommonAPIClient.ContainerStart
type CommonAPIClientMockContainerStartExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerStartParams
	results *CommonAPIClientMockContainerStartResults
	Counter uint64
}

// CommonAPIClientMockContainerStartParams contains parameters of the CommonAPIClient.ContainerStart
type CommonAPIClientMockContainerStartParams struct {
	ctx       context.Context
	container string
	options   types.ContainerStartOptions
}

// CommonAPIClientMockContainerStartResults contains results of the CommonAPIClient.ContainerStart
type CommonAPIClientMockContainerStartResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerStart
func (mmContainerStart *mCommonAPIClientMockContainerStart) Expect(ctx context.Context, container string, options types.ContainerStartOptions) *mCommonAPIClientMockContainerStart {
	if mmContainerStart.mock.funcContainerStart != nil {
		mmContainerStart.mock.t.Fatalf("CommonAPIClientMock.ContainerStart mock is already set by Set")
	}

	if mmContainerStart.defaultExpectation == nil {
		mmContainerStart.defaultExpectation = &CommonAPIClientMockContainerStartExpectation{}
	}

	mmContainerStart.defaultExpectation.params = &CommonAPIClientMockContainerStartParams{ctx, container, options}
	for _, e := range mmContainerStart.expectations {
		if minimock.Equal(e.params, mmContainerStart.defaultExpectation.params) {
			mmContainerStart.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerStart.defaultExpectation.params)
		}
	}

	return mmContainerStart
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerStart
func (mmContainerStart *mCommonAPIClientMockContainerStart) Inspect(f func(ctx context.Context, container string, options types.ContainerStartOptions)) *mCommonAPIClientMockContainerStart {
	if mmContainerStart.mock.inspectFuncContainerStart != nil {
		mmContainerStart.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerStart")
	}

	mmContainerStart.mock.inspectFuncContainerStart = f

	return mmContainerStart
}

// Return sets up results that will be returned by CommonAPIClient.ContainerStart
func (mmContainerStart *mCommonAPIClientMockContainerStart) Return(err error) *CommonAPIClientMock {
	if mmContainerStart.mock.funcContainerStart != nil {
		mmContainerStart.mock.t.Fatalf("CommonAPIClientMock.ContainerStart mock is already set by Set")
	}

	if mmContainerStart.defaultExpectation == nil {
		mmContainerStart.defaultExpectation = &CommonAPIClientMockContainerStartExpectation{mock: mmContainerStart.mock}
	}
	mmContainerStart.defaultExpectation.results = &CommonAPIClientMockContainerStartResults{err}
	return mmContainerStart.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerStart method
func (mmContainerStart *mCommonAPIClientMockContainerStart) Set(f func(ctx context.Context, container string, options types.ContainerStartOptions) (err error)) *CommonAPIClientMock {
	if mmContainerStart.defaultExpectation != nil {
		mmContainerStart.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerStart method")
	}

	if len(mmContainerStart.expectations) > 0 {
		mmContainerStart.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerStart method")
	}

	mmContainerStart.mock.funcContainerStart = f
	return mmContainerStart.mock
}

// When sets expectation for the CommonAPIClient.ContainerStart which will trigger the result defined by the following
// Then helper
func (mmContainerStart *mCommonAPIClientMockContainerStart) When(ctx context.Context, container string, options types.ContainerStartOptions) *CommonAPIClientMockContainerStartExpectation {
	if mmContainerStart.mock.funcContainerStart != nil {
		mmContainerStart.mock.t.Fatalf("CommonAPIClientMock.ContainerStart mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerStartExpectation{
		mock:   mmContainerStart.mock,
		params: &CommonAPIClientMockContainerStartParams{ctx, container, options},
	}
	mmContainerStart.expectations = append(mmContainerStart.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerStart return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerStartExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerStartResults{err}
	return e.mock
}

// ContainerStart implements client.CommonAPIClient
func (mmContainerStart *CommonAPIClientMock) ContainerStart(ctx context.Context, container string, options types.ContainerStartOptions) (err error) {
	mm_atomic.AddUint64(&mmContainerStart.beforeContainerStartCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerStart.afterContainerStartCounter, 1)

	if mmContainerStart.inspectFuncContainerStart != nil {
		mmContainerStart.inspectFuncContainerStart(ctx, container, options)
	}

	mm_params := &CommonAPIClientMockContainerStartParams{ctx, container, options}

	// Record call args
	mmContainerStart.ContainerStartMock.mutex.Lock()
	mmContainerStart.ContainerStartMock.callArgs = append(mmContainerStart.ContainerStartMock.callArgs, mm_params)
	mmContainerStart.ContainerStartMock.mutex.Unlock()

	for _, e := range mmContainerStart.ContainerStartMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmContainerStart.ContainerStartMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerStart.ContainerStartMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerStart.ContainerStartMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerStartParams{ctx, container, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerStart.t.Errorf("CommonAPIClientMock.ContainerStart got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerStart.ContainerStartMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerStart.t.Fatal("No results are set for the CommonAPIClientMock.ContainerStart")
		}
		return (*mm_results).err
	}
	if mmContainerStart.funcContainerStart != nil {
		return mmContainerStart.funcContainerStart(ctx, container, options)
	}
	mmContainerStart.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerStart. %v %v %v", ctx, container, options)
	return
}

// ContainerStartAfterCounter returns a count of finished CommonAPIClientMock.ContainerStart invocations
func (mmContainerStart *CommonAPIClientMock) ContainerStartAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerStart.afterContainerStartCounter)
}

// ContainerStartBeforeCounter returns a count of CommonAPIClientMock.ContainerStart invocations
func (mmContainerStart *CommonAPIClientMock) ContainerStartBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerStart.beforeContainerStartCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerStart.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerStart *mCommonAPIClientMockContainerStart) Calls() []*CommonAPIClientMockContainerStartParams {
	mmContainerStart.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerStartParams, len(mmContainerStart.callArgs))
	copy(argCopy, mmContainerStart.callArgs)

	mmContainerStart.mutex.RUnlock()

	return argCopy
}

// MinimockContainerStartDone returns true if the count of the ContainerStart invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerStartDone() bool {
	for _, e := range m.ContainerStartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerStartMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerStartCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerStart != nil && mm_atomic.LoadUint64(&m.afterContainerStartCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerStartInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerStartInspect() {
	for _, e := range m.ContainerStartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerStart with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerStartMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerStartCounter) < 1 {
		if m.ContainerStartMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerStart")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerStart with params: %#v", *m.ContainerStartMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerStart != nil && mm_atomic.LoadUint64(&m.afterContainerStartCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerStart")
	}
}

type mCommonAPIClientMockContainerStatPath struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerStatPathExpectation
	expectations       []*CommonAPIClientMockContainerStatPathExpectation

	callArgs []*CommonAPIClientMockContainerStatPathParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerStatPathExpectation specifies expectation struct of the CommonAPIClient.ContainerStatPath
type CommonAPIClientMockContainerStatPathExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerStatPathParams
	results *CommonAPIClientMockContainerStatPathResults
	Counter uint64
}

// CommonAPIClientMockContainerStatPathParams contains parameters of the CommonAPIClient.ContainerStatPath
type CommonAPIClientMockContainerStatPathParams struct {
	ctx       context.Context
	container string
	path      string
}

// CommonAPIClientMockContainerStatPathResults contains results of the CommonAPIClient.ContainerStatPath
type CommonAPIClientMockContainerStatPathResults struct {
	c2  types.ContainerPathStat
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerStatPath
func (mmContainerStatPath *mCommonAPIClientMockContainerStatPath) Expect(ctx context.Context, container string, path string) *mCommonAPIClientMockContainerStatPath {
	if mmContainerStatPath.mock.funcContainerStatPath != nil {
		mmContainerStatPath.mock.t.Fatalf("CommonAPIClientMock.ContainerStatPath mock is already set by Set")
	}

	if mmContainerStatPath.defaultExpectation == nil {
		mmContainerStatPath.defaultExpectation = &CommonAPIClientMockContainerStatPathExpectation{}
	}

	mmContainerStatPath.defaultExpectation.params = &CommonAPIClientMockContainerStatPathParams{ctx, container, path}
	for _, e := range mmContainerStatPath.expectations {
		if minimock.Equal(e.params, mmContainerStatPath.defaultExpectation.params) {
			mmContainerStatPath.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerStatPath.defaultExpectation.params)
		}
	}

	return mmContainerStatPath
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerStatPath
func (mmContainerStatPath *mCommonAPIClientMockContainerStatPath) Inspect(f func(ctx context.Context, container string, path string)) *mCommonAPIClientMockContainerStatPath {
	if mmContainerStatPath.mock.inspectFuncContainerStatPath != nil {
		mmContainerStatPath.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerStatPath")
	}

	mmContainerStatPath.mock.inspectFuncContainerStatPath = f

	return mmContainerStatPath
}

// Return sets up results that will be returned by CommonAPIClient.ContainerStatPath
func (mmContainerStatPath *mCommonAPIClientMockContainerStatPath) Return(c2 types.ContainerPathStat, err error) *CommonAPIClientMock {
	if mmContainerStatPath.mock.funcContainerStatPath != nil {
		mmContainerStatPath.mock.t.Fatalf("CommonAPIClientMock.ContainerStatPath mock is already set by Set")
	}

	if mmContainerStatPath.defaultExpectation == nil {
		mmContainerStatPath.defaultExpectation = &CommonAPIClientMockContainerStatPathExpectation{mock: mmContainerStatPath.mock}
	}
	mmContainerStatPath.defaultExpectation.results = &CommonAPIClientMockContainerStatPathResults{c2, err}
	return mmContainerStatPath.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerStatPath method
func (mmContainerStatPath *mCommonAPIClientMockContainerStatPath) Set(f func(ctx context.Context, container string, path string) (c2 types.ContainerPathStat, err error)) *CommonAPIClientMock {
	if mmContainerStatPath.defaultExpectation != nil {
		mmContainerStatPath.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerStatPath method")
	}

	if len(mmContainerStatPath.expectations) > 0 {
		mmContainerStatPath.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerStatPath method")
	}

	mmContainerStatPath.mock.funcContainerStatPath = f
	return mmContainerStatPath.mock
}

// When sets expectation for the CommonAPIClient.ContainerStatPath which will trigger the result defined by the following
// Then helper
func (mmContainerStatPath *mCommonAPIClientMockContainerStatPath) When(ctx context.Context, container string, path string) *CommonAPIClientMockContainerStatPathExpectation {
	if mmContainerStatPath.mock.funcContainerStatPath != nil {
		mmContainerStatPath.mock.t.Fatalf("CommonAPIClientMock.ContainerStatPath mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerStatPathExpectation{
		mock:   mmContainerStatPath.mock,
		params: &CommonAPIClientMockContainerStatPathParams{ctx, container, path},
	}
	mmContainerStatPath.expectations = append(mmContainerStatPath.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerStatPath return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerStatPathExpectation) Then(c2 types.ContainerPathStat, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerStatPathResults{c2, err}
	return e.mock
}

// ContainerStatPath implements client.CommonAPIClient
func (mmContainerStatPath *CommonAPIClientMock) ContainerStatPath(ctx context.Context, container string, path string) (c2 types.ContainerPathStat, err error) {
	mm_atomic.AddUint64(&mmContainerStatPath.beforeContainerStatPathCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerStatPath.afterContainerStatPathCounter, 1)

	if mmContainerStatPath.inspectFuncContainerStatPath != nil {
		mmContainerStatPath.inspectFuncContainerStatPath(ctx, container, path)
	}

	mm_params := &CommonAPIClientMockContainerStatPathParams{ctx, container, path}

	// Record call args
	mmContainerStatPath.ContainerStatPathMock.mutex.Lock()
	mmContainerStatPath.ContainerStatPathMock.callArgs = append(mmContainerStatPath.ContainerStatPathMock.callArgs, mm_params)
	mmContainerStatPath.ContainerStatPathMock.mutex.Unlock()

	for _, e := range mmContainerStatPath.ContainerStatPathMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.c2, e.results.err
		}
	}

	if mmContainerStatPath.ContainerStatPathMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerStatPath.ContainerStatPathMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerStatPath.ContainerStatPathMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerStatPathParams{ctx, container, path}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerStatPath.t.Errorf("CommonAPIClientMock.ContainerStatPath got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerStatPath.ContainerStatPathMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerStatPath.t.Fatal("No results are set for the CommonAPIClientMock.ContainerStatPath")
		}
		return (*mm_results).c2, (*mm_results).err
	}
	if mmContainerStatPath.funcContainerStatPath != nil {
		return mmContainerStatPath.funcContainerStatPath(ctx, container, path)
	}
	mmContainerStatPath.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerStatPath. %v %v %v", ctx, container, path)
	return
}

// ContainerStatPathAfterCounter returns a count of finished CommonAPIClientMock.ContainerStatPath invocations
func (mmContainerStatPath *CommonAPIClientMock) ContainerStatPathAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerStatPath.afterContainerStatPathCounter)
}

// ContainerStatPathBeforeCounter returns a count of CommonAPIClientMock.ContainerStatPath invocations
func (mmContainerStatPath *CommonAPIClientMock) ContainerStatPathBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerStatPath.beforeContainerStatPathCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerStatPath.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerStatPath *mCommonAPIClientMockContainerStatPath) Calls() []*CommonAPIClientMockContainerStatPathParams {
	mmContainerStatPath.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerStatPathParams, len(mmContainerStatPath.callArgs))
	copy(argCopy, mmContainerStatPath.callArgs)

	mmContainerStatPath.mutex.RUnlock()

	return argCopy
}

// MinimockContainerStatPathDone returns true if the count of the ContainerStatPath invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerStatPathDone() bool {
	for _, e := range m.ContainerStatPathMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerStatPathMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerStatPathCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerStatPath != nil && mm_atomic.LoadUint64(&m.afterContainerStatPathCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerStatPathInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerStatPathInspect() {
	for _, e := range m.ContainerStatPathMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerStatPath with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerStatPathMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerStatPathCounter) < 1 {
		if m.ContainerStatPathMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerStatPath")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerStatPath with params: %#v", *m.ContainerStatPathMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerStatPath != nil && mm_atomic.LoadUint64(&m.afterContainerStatPathCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerStatPath")
	}
}

type mCommonAPIClientMockContainerStats struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerStatsExpectation
	expectations       []*CommonAPIClientMockContainerStatsExpectation

	callArgs []*CommonAPIClientMockContainerStatsParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerStatsExpectation specifies expectation struct of the CommonAPIClient.ContainerStats
type CommonAPIClientMockContainerStatsExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerStatsParams
	results *CommonAPIClientMockContainerStatsResults
	Counter uint64
}

// CommonAPIClientMockContainerStatsParams contains parameters of the CommonAPIClient.ContainerStats
type CommonAPIClientMockContainerStatsParams struct {
	ctx       context.Context
	container string
	stream    bool
}

// CommonAPIClientMockContainerStatsResults contains results of the CommonAPIClient.ContainerStats
type CommonAPIClientMockContainerStatsResults struct {
	c2  types.ContainerStats
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerStats
func (mmContainerStats *mCommonAPIClientMockContainerStats) Expect(ctx context.Context, container string, stream bool) *mCommonAPIClientMockContainerStats {
	if mmContainerStats.mock.funcContainerStats != nil {
		mmContainerStats.mock.t.Fatalf("CommonAPIClientMock.ContainerStats mock is already set by Set")
	}

	if mmContainerStats.defaultExpectation == nil {
		mmContainerStats.defaultExpectation = &CommonAPIClientMockContainerStatsExpectation{}
	}

	mmContainerStats.defaultExpectation.params = &CommonAPIClientMockContainerStatsParams{ctx, container, stream}
	for _, e := range mmContainerStats.expectations {
		if minimock.Equal(e.params, mmContainerStats.defaultExpectation.params) {
			mmContainerStats.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerStats.defaultExpectation.params)
		}
	}

	return mmContainerStats
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerStats
func (mmContainerStats *mCommonAPIClientMockContainerStats) Inspect(f func(ctx context.Context, container string, stream bool)) *mCommonAPIClientMockContainerStats {
	if mmContainerStats.mock.inspectFuncContainerStats != nil {
		mmContainerStats.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerStats")
	}

	mmContainerStats.mock.inspectFuncContainerStats = f

	return mmContainerStats
}

// Return sets up results that will be returned by CommonAPIClient.ContainerStats
func (mmContainerStats *mCommonAPIClientMockContainerStats) Return(c2 types.ContainerStats, err error) *CommonAPIClientMock {
	if mmContainerStats.mock.funcContainerStats != nil {
		mmContainerStats.mock.t.Fatalf("CommonAPIClientMock.ContainerStats mock is already set by Set")
	}

	if mmContainerStats.defaultExpectation == nil {
		mmContainerStats.defaultExpectation = &CommonAPIClientMockContainerStatsExpectation{mock: mmContainerStats.mock}
	}
	mmContainerStats.defaultExpectation.results = &CommonAPIClientMockContainerStatsResults{c2, err}
	return mmContainerStats.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerStats method
func (mmContainerStats *mCommonAPIClientMockContainerStats) Set(f func(ctx context.Context, container string, stream bool) (c2 types.ContainerStats, err error)) *CommonAPIClientMock {
	if mmContainerStats.defaultExpectation != nil {
		mmContainerStats.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerStats method")
	}

	if len(mmContainerStats.expectations) > 0 {
		mmContainerStats.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerStats method")
	}

	mmContainerStats.mock.funcContainerStats = f
	return mmContainerStats.mock
}

// When sets expectation for the CommonAPIClient.ContainerStats which will trigger the result defined by the following
// Then helper
func (mmContainerStats *mCommonAPIClientMockContainerStats) When(ctx context.Context, container string, stream bool) *CommonAPIClientMockContainerStatsExpectation {
	if mmContainerStats.mock.funcContainerStats != nil {
		mmContainerStats.mock.t.Fatalf("CommonAPIClientMock.ContainerStats mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerStatsExpectation{
		mock:   mmContainerStats.mock,
		params: &CommonAPIClientMockContainerStatsParams{ctx, container, stream},
	}
	mmContainerStats.expectations = append(mmContainerStats.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerStats return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerStatsExpectation) Then(c2 types.ContainerStats, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerStatsResults{c2, err}
	return e.mock
}

// ContainerStats implements client.CommonAPIClient
func (mmContainerStats *CommonAPIClientMock) ContainerStats(ctx context.Context, container string, stream bool) (c2 types.ContainerStats, err error) {
	mm_atomic.AddUint64(&mmContainerStats.beforeContainerStatsCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerStats.afterContainerStatsCounter, 1)

	if mmContainerStats.inspectFuncContainerStats != nil {
		mmContainerStats.inspectFuncContainerStats(ctx, container, stream)
	}

	mm_params := &CommonAPIClientMockContainerStatsParams{ctx, container, stream}

	// Record call args
	mmContainerStats.ContainerStatsMock.mutex.Lock()
	mmContainerStats.ContainerStatsMock.callArgs = append(mmContainerStats.ContainerStatsMock.callArgs, mm_params)
	mmContainerStats.ContainerStatsMock.mutex.Unlock()

	for _, e := range mmContainerStats.ContainerStatsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.c2, e.results.err
		}
	}

	if mmContainerStats.ContainerStatsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerStats.ContainerStatsMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerStats.ContainerStatsMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerStatsParams{ctx, container, stream}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerStats.t.Errorf("CommonAPIClientMock.ContainerStats got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerStats.ContainerStatsMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerStats.t.Fatal("No results are set for the CommonAPIClientMock.ContainerStats")
		}
		return (*mm_results).c2, (*mm_results).err
	}
	if mmContainerStats.funcContainerStats != nil {
		return mmContainerStats.funcContainerStats(ctx, container, stream)
	}
	mmContainerStats.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerStats. %v %v %v", ctx, container, stream)
	return
}

// ContainerStatsAfterCounter returns a count of finished CommonAPIClientMock.ContainerStats invocations
func (mmContainerStats *CommonAPIClientMock) ContainerStatsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerStats.afterContainerStatsCounter)
}

// ContainerStatsBeforeCounter returns a count of CommonAPIClientMock.ContainerStats invocations
func (mmContainerStats *CommonAPIClientMock) ContainerStatsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerStats.beforeContainerStatsCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerStats.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerStats *mCommonAPIClientMockContainerStats) Calls() []*CommonAPIClientMockContainerStatsParams {
	mmContainerStats.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerStatsParams, len(mmContainerStats.callArgs))
	copy(argCopy, mmContainerStats.callArgs)

	mmContainerStats.mutex.RUnlock()

	return argCopy
}

// MinimockContainerStatsDone returns true if the count of the ContainerStats invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerStatsDone() bool {
	for _, e := range m.ContainerStatsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerStatsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerStatsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerStats != nil && mm_atomic.LoadUint64(&m.afterContainerStatsCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerStatsInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerStatsInspect() {
	for _, e := range m.ContainerStatsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerStats with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerStatsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerStatsCounter) < 1 {
		if m.ContainerStatsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerStats")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerStats with params: %#v", *m.ContainerStatsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerStats != nil && mm_atomic.LoadUint64(&m.afterContainerStatsCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerStats")
	}
}

type mCommonAPIClientMockContainerStop struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerStopExpectation
	expectations       []*CommonAPIClientMockContainerStopExpectation

	callArgs []*CommonAPIClientMockContainerStopParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerStopExpectation specifies expectation struct of the CommonAPIClient.ContainerStop
type CommonAPIClientMockContainerStopExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerStopParams
	results *CommonAPIClientMockContainerStopResults
	Counter uint64
}

// CommonAPIClientMockContainerStopParams contains parameters of the CommonAPIClient.ContainerStop
type CommonAPIClientMockContainerStopParams struct {
	ctx       context.Context
	container string
	timeout   *time.Duration
}

// CommonAPIClientMockContainerStopResults contains results of the CommonAPIClient.ContainerStop
type CommonAPIClientMockContainerStopResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerStop
func (mmContainerStop *mCommonAPIClientMockContainerStop) Expect(ctx context.Context, container string, timeout *time.Duration) *mCommonAPIClientMockContainerStop {
	if mmContainerStop.mock.funcContainerStop != nil {
		mmContainerStop.mock.t.Fatalf("CommonAPIClientMock.ContainerStop mock is already set by Set")
	}

	if mmContainerStop.defaultExpectation == nil {
		mmContainerStop.defaultExpectation = &CommonAPIClientMockContainerStopExpectation{}
	}

	mmContainerStop.defaultExpectation.params = &CommonAPIClientMockContainerStopParams{ctx, container, timeout}
	for _, e := range mmContainerStop.expectations {
		if minimock.Equal(e.params, mmContainerStop.defaultExpectation.params) {
			mmContainerStop.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerStop.defaultExpectation.params)
		}
	}

	return mmContainerStop
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerStop
func (mmContainerStop *mCommonAPIClientMockContainerStop) Inspect(f func(ctx context.Context, container string, timeout *time.Duration)) *mCommonAPIClientMockContainerStop {
	if mmContainerStop.mock.inspectFuncContainerStop != nil {
		mmContainerStop.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerStop")
	}

	mmContainerStop.mock.inspectFuncContainerStop = f

	return mmContainerStop
}

// Return sets up results that will be returned by CommonAPIClient.ContainerStop
func (mmContainerStop *mCommonAPIClientMockContainerStop) Return(err error) *CommonAPIClientMock {
	if mmContainerStop.mock.funcContainerStop != nil {
		mmContainerStop.mock.t.Fatalf("CommonAPIClientMock.ContainerStop mock is already set by Set")
	}

	if mmContainerStop.defaultExpectation == nil {
		mmContainerStop.defaultExpectation = &CommonAPIClientMockContainerStopExpectation{mock: mmContainerStop.mock}
	}
	mmContainerStop.defaultExpectation.results = &CommonAPIClientMockContainerStopResults{err}
	return mmContainerStop.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerStop method
func (mmContainerStop *mCommonAPIClientMockContainerStop) Set(f func(ctx context.Context, container string, timeout *time.Duration) (err error)) *CommonAPIClientMock {
	if mmContainerStop.defaultExpectation != nil {
		mmContainerStop.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerStop method")
	}

	if len(mmContainerStop.expectations) > 0 {
		mmContainerStop.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerStop method")
	}

	mmContainerStop.mock.funcContainerStop = f
	return mmContainerStop.mock
}

// When sets expectation for the CommonAPIClient.ContainerStop which will trigger the result defined by the following
// Then helper
func (mmContainerStop *mCommonAPIClientMockContainerStop) When(ctx context.Context, container string, timeout *time.Duration) *CommonAPIClientMockContainerStopExpectation {
	if mmContainerStop.mock.funcContainerStop != nil {
		mmContainerStop.mock.t.Fatalf("CommonAPIClientMock.ContainerStop mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerStopExpectation{
		mock:   mmContainerStop.mock,
		params: &CommonAPIClientMockContainerStopParams{ctx, container, timeout},
	}
	mmContainerStop.expectations = append(mmContainerStop.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerStop return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerStopExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerStopResults{err}
	return e.mock
}

// ContainerStop implements client.CommonAPIClient
func (mmContainerStop *CommonAPIClientMock) ContainerStop(ctx context.Context, container string, timeout *time.Duration) (err error) {
	mm_atomic.AddUint64(&mmContainerStop.beforeContainerStopCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerStop.afterContainerStopCounter, 1)

	if mmContainerStop.inspectFuncContainerStop != nil {
		mmContainerStop.inspectFuncContainerStop(ctx, container, timeout)
	}

	mm_params := &CommonAPIClientMockContainerStopParams{ctx, container, timeout}

	// Record call args
	mmContainerStop.ContainerStopMock.mutex.Lock()
	mmContainerStop.ContainerStopMock.callArgs = append(mmContainerStop.ContainerStopMock.callArgs, mm_params)
	mmContainerStop.ContainerStopMock.mutex.Unlock()

	for _, e := range mmContainerStop.ContainerStopMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmContainerStop.ContainerStopMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerStop.ContainerStopMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerStop.ContainerStopMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerStopParams{ctx, container, timeout}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerStop.t.Errorf("CommonAPIClientMock.ContainerStop got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerStop.ContainerStopMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerStop.t.Fatal("No results are set for the CommonAPIClientMock.ContainerStop")
		}
		return (*mm_results).err
	}
	if mmContainerStop.funcContainerStop != nil {
		return mmContainerStop.funcContainerStop(ctx, container, timeout)
	}
	mmContainerStop.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerStop. %v %v %v", ctx, container, timeout)
	return
}

// ContainerStopAfterCounter returns a count of finished CommonAPIClientMock.ContainerStop invocations
func (mmContainerStop *CommonAPIClientMock) ContainerStopAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerStop.afterContainerStopCounter)
}

// ContainerStopBeforeCounter returns a count of CommonAPIClientMock.ContainerStop invocations
func (mmContainerStop *CommonAPIClientMock) ContainerStopBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerStop.beforeContainerStopCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerStop.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerStop *mCommonAPIClientMockContainerStop) Calls() []*CommonAPIClientMockContainerStopParams {
	mmContainerStop.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerStopParams, len(mmContainerStop.callArgs))
	copy(argCopy, mmContainerStop.callArgs)

	mmContainerStop.mutex.RUnlock()

	return argCopy
}

// MinimockContainerStopDone returns true if the count of the ContainerStop invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerStopDone() bool {
	for _, e := range m.ContainerStopMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerStopMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerStopCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerStop != nil && mm_atomic.LoadUint64(&m.afterContainerStopCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerStopInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerStopInspect() {
	for _, e := range m.ContainerStopMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerStop with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerStopMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerStopCounter) < 1 {
		if m.ContainerStopMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerStop")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerStop with params: %#v", *m.ContainerStopMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerStop != nil && mm_atomic.LoadUint64(&m.afterContainerStopCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerStop")
	}
}

type mCommonAPIClientMockContainerTop struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerTopExpectation
	expectations       []*CommonAPIClientMockContainerTopExpectation

	callArgs []*CommonAPIClientMockContainerTopParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerTopExpectation specifies expectation struct of the CommonAPIClient.ContainerTop
type CommonAPIClientMockContainerTopExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerTopParams
	results *CommonAPIClientMockContainerTopResults
	Counter uint64
}

// CommonAPIClientMockContainerTopParams contains parameters of the CommonAPIClient.ContainerTop
type CommonAPIClientMockContainerTopParams struct {
	ctx       context.Context
	container string
	arguments []string
}

// CommonAPIClientMockContainerTopResults contains results of the CommonAPIClient.ContainerTop
type CommonAPIClientMockContainerTopResults struct {
	c2  containertypes.ContainerTopOKBody
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerTop
func (mmContainerTop *mCommonAPIClientMockContainerTop) Expect(ctx context.Context, container string, arguments []string) *mCommonAPIClientMockContainerTop {
	if mmContainerTop.mock.funcContainerTop != nil {
		mmContainerTop.mock.t.Fatalf("CommonAPIClientMock.ContainerTop mock is already set by Set")
	}

	if mmContainerTop.defaultExpectation == nil {
		mmContainerTop.defaultExpectation = &CommonAPIClientMockContainerTopExpectation{}
	}

	mmContainerTop.defaultExpectation.params = &CommonAPIClientMockContainerTopParams{ctx, container, arguments}
	for _, e := range mmContainerTop.expectations {
		if minimock.Equal(e.params, mmContainerTop.defaultExpectation.params) {
			mmContainerTop.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerTop.defaultExpectation.params)
		}
	}

	return mmContainerTop
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerTop
func (mmContainerTop *mCommonAPIClientMockContainerTop) Inspect(f func(ctx context.Context, container string, arguments []string)) *mCommonAPIClientMockContainerTop {
	if mmContainerTop.mock.inspectFuncContainerTop != nil {
		mmContainerTop.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerTop")
	}

	mmContainerTop.mock.inspectFuncContainerTop = f

	return mmContainerTop
}

// Return sets up results that will be returned by CommonAPIClient.ContainerTop
func (mmContainerTop *mCommonAPIClientMockContainerTop) Return(c2 containertypes.ContainerTopOKBody, err error) *CommonAPIClientMock {
	if mmContainerTop.mock.funcContainerTop != nil {
		mmContainerTop.mock.t.Fatalf("CommonAPIClientMock.ContainerTop mock is already set by Set")
	}

	if mmContainerTop.defaultExpectation == nil {
		mmContainerTop.defaultExpectation = &CommonAPIClientMockContainerTopExpectation{mock: mmContainerTop.mock}
	}
	mmContainerTop.defaultExpectation.results = &CommonAPIClientMockContainerTopResults{c2, err}
	return mmContainerTop.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerTop method
func (mmContainerTop *mCommonAPIClientMockContainerTop) Set(f func(ctx context.Context, container string, arguments []string) (c2 containertypes.ContainerTopOKBody, err error)) *CommonAPIClientMock {
	if mmContainerTop.defaultExpectation != nil {
		mmContainerTop.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerTop method")
	}

	if len(mmContainerTop.expectations) > 0 {
		mmContainerTop.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerTop method")
	}

	mmContainerTop.mock.funcContainerTop = f
	return mmContainerTop.mock
}

// When sets expectation for the CommonAPIClient.ContainerTop which will trigger the result defined by the following
// Then helper
func (mmContainerTop *mCommonAPIClientMockContainerTop) When(ctx context.Context, container string, arguments []string) *CommonAPIClientMockContainerTopExpectation {
	if mmContainerTop.mock.funcContainerTop != nil {
		mmContainerTop.mock.t.Fatalf("CommonAPIClientMock.ContainerTop mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerTopExpectation{
		mock:   mmContainerTop.mock,
		params: &CommonAPIClientMockContainerTopParams{ctx, container, arguments},
	}
	mmContainerTop.expectations = append(mmContainerTop.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerTop return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerTopExpectation) Then(c2 containertypes.ContainerTopOKBody, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerTopResults{c2, err}
	return e.mock
}

// ContainerTop implements client.CommonAPIClient
func (mmContainerTop *CommonAPIClientMock) ContainerTop(ctx context.Context, container string, arguments []string) (c2 containertypes.ContainerTopOKBody, err error) {
	mm_atomic.AddUint64(&mmContainerTop.beforeContainerTopCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerTop.afterContainerTopCounter, 1)

	if mmContainerTop.inspectFuncContainerTop != nil {
		mmContainerTop.inspectFuncContainerTop(ctx, container, arguments)
	}

	mm_params := &CommonAPIClientMockContainerTopParams{ctx, container, arguments}

	// Record call args
	mmContainerTop.ContainerTopMock.mutex.Lock()
	mmContainerTop.ContainerTopMock.callArgs = append(mmContainerTop.ContainerTopMock.callArgs, mm_params)
	mmContainerTop.ContainerTopMock.mutex.Unlock()

	for _, e := range mmContainerTop.ContainerTopMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.c2, e.results.err
		}
	}

	if mmContainerTop.ContainerTopMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerTop.ContainerTopMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerTop.ContainerTopMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerTopParams{ctx, container, arguments}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerTop.t.Errorf("CommonAPIClientMock.ContainerTop got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerTop.ContainerTopMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerTop.t.Fatal("No results are set for the CommonAPIClientMock.ContainerTop")
		}
		return (*mm_results).c2, (*mm_results).err
	}
	if mmContainerTop.funcContainerTop != nil {
		return mmContainerTop.funcContainerTop(ctx, container, arguments)
	}
	mmContainerTop.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerTop. %v %v %v", ctx, container, arguments)
	return
}

// ContainerTopAfterCounter returns a count of finished CommonAPIClientMock.ContainerTop invocations
func (mmContainerTop *CommonAPIClientMock) ContainerTopAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerTop.afterContainerTopCounter)
}

// ContainerTopBeforeCounter returns a count of CommonAPIClientMock.ContainerTop invocations
func (mmContainerTop *CommonAPIClientMock) ContainerTopBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerTop.beforeContainerTopCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerTop.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerTop *mCommonAPIClientMockContainerTop) Calls() []*CommonAPIClientMockContainerTopParams {
	mmContainerTop.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerTopParams, len(mmContainerTop.callArgs))
	copy(argCopy, mmContainerTop.callArgs)

	mmContainerTop.mutex.RUnlock()

	return argCopy
}

// MinimockContainerTopDone returns true if the count of the ContainerTop invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerTopDone() bool {
	for _, e := range m.ContainerTopMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerTopMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerTopCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerTop != nil && mm_atomic.LoadUint64(&m.afterContainerTopCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerTopInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerTopInspect() {
	for _, e := range m.ContainerTopMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerTop with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerTopMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerTopCounter) < 1 {
		if m.ContainerTopMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerTop")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerTop with params: %#v", *m.ContainerTopMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerTop != nil && mm_atomic.LoadUint64(&m.afterContainerTopCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerTop")
	}
}

type mCommonAPIClientMockContainerUnpause struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerUnpauseExpectation
	expectations       []*CommonAPIClientMockContainerUnpauseExpectation

	callArgs []*CommonAPIClientMockContainerUnpauseParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerUnpauseExpectation specifies expectation struct of the CommonAPIClient.ContainerUnpause
type CommonAPIClientMockContainerUnpauseExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerUnpauseParams
	results *CommonAPIClientMockContainerUnpauseResults
	Counter uint64
}

// CommonAPIClientMockContainerUnpauseParams contains parameters of the CommonAPIClient.ContainerUnpause
type CommonAPIClientMockContainerUnpauseParams struct {
	ctx       context.Context
	container string
}

// CommonAPIClientMockContainerUnpauseResults contains results of the CommonAPIClient.ContainerUnpause
type CommonAPIClientMockContainerUnpauseResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerUnpause
func (mmContainerUnpause *mCommonAPIClientMockContainerUnpause) Expect(ctx context.Context, container string) *mCommonAPIClientMockContainerUnpause {
	if mmContainerUnpause.mock.funcContainerUnpause != nil {
		mmContainerUnpause.mock.t.Fatalf("CommonAPIClientMock.ContainerUnpause mock is already set by Set")
	}

	if mmContainerUnpause.defaultExpectation == nil {
		mmContainerUnpause.defaultExpectation = &CommonAPIClientMockContainerUnpauseExpectation{}
	}

	mmContainerUnpause.defaultExpectation.params = &CommonAPIClientMockContainerUnpauseParams{ctx, container}
	for _, e := range mmContainerUnpause.expectations {
		if minimock.Equal(e.params, mmContainerUnpause.defaultExpectation.params) {
			mmContainerUnpause.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerUnpause.defaultExpectation.params)
		}
	}

	return mmContainerUnpause
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerUnpause
func (mmContainerUnpause *mCommonAPIClientMockContainerUnpause) Inspect(f func(ctx context.Context, container string)) *mCommonAPIClientMockContainerUnpause {
	if mmContainerUnpause.mock.inspectFuncContainerUnpause != nil {
		mmContainerUnpause.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerUnpause")
	}

	mmContainerUnpause.mock.inspectFuncContainerUnpause = f

	return mmContainerUnpause
}

// Return sets up results that will be returned by CommonAPIClient.ContainerUnpause
func (mmContainerUnpause *mCommonAPIClientMockContainerUnpause) Return(err error) *CommonAPIClientMock {
	if mmContainerUnpause.mock.funcContainerUnpause != nil {
		mmContainerUnpause.mock.t.Fatalf("CommonAPIClientMock.ContainerUnpause mock is already set by Set")
	}

	if mmContainerUnpause.defaultExpectation == nil {
		mmContainerUnpause.defaultExpectation = &CommonAPIClientMockContainerUnpauseExpectation{mock: mmContainerUnpause.mock}
	}
	mmContainerUnpause.defaultExpectation.results = &CommonAPIClientMockContainerUnpauseResults{err}
	return mmContainerUnpause.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerUnpause method
func (mmContainerUnpause *mCommonAPIClientMockContainerUnpause) Set(f func(ctx context.Context, container string) (err error)) *CommonAPIClientMock {
	if mmContainerUnpause.defaultExpectation != nil {
		mmContainerUnpause.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerUnpause method")
	}

	if len(mmContainerUnpause.expectations) > 0 {
		mmContainerUnpause.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerUnpause method")
	}

	mmContainerUnpause.mock.funcContainerUnpause = f
	return mmContainerUnpause.mock
}

// When sets expectation for the CommonAPIClient.ContainerUnpause which will trigger the result defined by the following
// Then helper
func (mmContainerUnpause *mCommonAPIClientMockContainerUnpause) When(ctx context.Context, container string) *CommonAPIClientMockContainerUnpauseExpectation {
	if mmContainerUnpause.mock.funcContainerUnpause != nil {
		mmContainerUnpause.mock.t.Fatalf("CommonAPIClientMock.ContainerUnpause mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerUnpauseExpectation{
		mock:   mmContainerUnpause.mock,
		params: &CommonAPIClientMockContainerUnpauseParams{ctx, container},
	}
	mmContainerUnpause.expectations = append(mmContainerUnpause.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerUnpause return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerUnpauseExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerUnpauseResults{err}
	return e.mock
}

// ContainerUnpause implements client.CommonAPIClient
func (mmContainerUnpause *CommonAPIClientMock) ContainerUnpause(ctx context.Context, container string) (err error) {
	mm_atomic.AddUint64(&mmContainerUnpause.beforeContainerUnpauseCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerUnpause.afterContainerUnpauseCounter, 1)

	if mmContainerUnpause.inspectFuncContainerUnpause != nil {
		mmContainerUnpause.inspectFuncContainerUnpause(ctx, container)
	}

	mm_params := &CommonAPIClientMockContainerUnpauseParams{ctx, container}

	// Record call args
	mmContainerUnpause.ContainerUnpauseMock.mutex.Lock()
	mmContainerUnpause.ContainerUnpauseMock.callArgs = append(mmContainerUnpause.ContainerUnpauseMock.callArgs, mm_params)
	mmContainerUnpause.ContainerUnpauseMock.mutex.Unlock()

	for _, e := range mmContainerUnpause.ContainerUnpauseMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmContainerUnpause.ContainerUnpauseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerUnpause.ContainerUnpauseMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerUnpause.ContainerUnpauseMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerUnpauseParams{ctx, container}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerUnpause.t.Errorf("CommonAPIClientMock.ContainerUnpause got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerUnpause.ContainerUnpauseMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerUnpause.t.Fatal("No results are set for the CommonAPIClientMock.ContainerUnpause")
		}
		return (*mm_results).err
	}
	if mmContainerUnpause.funcContainerUnpause != nil {
		return mmContainerUnpause.funcContainerUnpause(ctx, container)
	}
	mmContainerUnpause.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerUnpause. %v %v", ctx, container)
	return
}

// ContainerUnpauseAfterCounter returns a count of finished CommonAPIClientMock.ContainerUnpause invocations
func (mmContainerUnpause *CommonAPIClientMock) ContainerUnpauseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerUnpause.afterContainerUnpauseCounter)
}

// ContainerUnpauseBeforeCounter returns a count of CommonAPIClientMock.ContainerUnpause invocations
func (mmContainerUnpause *CommonAPIClientMock) ContainerUnpauseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerUnpause.beforeContainerUnpauseCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerUnpause.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerUnpause *mCommonAPIClientMockContainerUnpause) Calls() []*CommonAPIClientMockContainerUnpauseParams {
	mmContainerUnpause.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerUnpauseParams, len(mmContainerUnpause.callArgs))
	copy(argCopy, mmContainerUnpause.callArgs)

	mmContainerUnpause.mutex.RUnlock()

	return argCopy
}

// MinimockContainerUnpauseDone returns true if the count of the ContainerUnpause invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerUnpauseDone() bool {
	for _, e := range m.ContainerUnpauseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerUnpauseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerUnpauseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerUnpause != nil && mm_atomic.LoadUint64(&m.afterContainerUnpauseCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerUnpauseInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerUnpauseInspect() {
	for _, e := range m.ContainerUnpauseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerUnpause with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerUnpauseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerUnpauseCounter) < 1 {
		if m.ContainerUnpauseMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerUnpause")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerUnpause with params: %#v", *m.ContainerUnpauseMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerUnpause != nil && mm_atomic.LoadUint64(&m.afterContainerUnpauseCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerUnpause")
	}
}

type mCommonAPIClientMockContainerUpdate struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerUpdateExpectation
	expectations       []*CommonAPIClientMockContainerUpdateExpectation

	callArgs []*CommonAPIClientMockContainerUpdateParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerUpdateExpectation specifies expectation struct of the CommonAPIClient.ContainerUpdate
type CommonAPIClientMockContainerUpdateExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerUpdateParams
	results *CommonAPIClientMockContainerUpdateResults
	Counter uint64
}

// CommonAPIClientMockContainerUpdateParams contains parameters of the CommonAPIClient.ContainerUpdate
type CommonAPIClientMockContainerUpdateParams struct {
	ctx          context.Context
	container    string
	updateConfig containertypes.UpdateConfig
}

// CommonAPIClientMockContainerUpdateResults contains results of the CommonAPIClient.ContainerUpdate
type CommonAPIClientMockContainerUpdateResults struct {
	c2  containertypes.ContainerUpdateOKBody
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainerUpdate
func (mmContainerUpdate *mCommonAPIClientMockContainerUpdate) Expect(ctx context.Context, container string, updateConfig containertypes.UpdateConfig) *mCommonAPIClientMockContainerUpdate {
	if mmContainerUpdate.mock.funcContainerUpdate != nil {
		mmContainerUpdate.mock.t.Fatalf("CommonAPIClientMock.ContainerUpdate mock is already set by Set")
	}

	if mmContainerUpdate.defaultExpectation == nil {
		mmContainerUpdate.defaultExpectation = &CommonAPIClientMockContainerUpdateExpectation{}
	}

	mmContainerUpdate.defaultExpectation.params = &CommonAPIClientMockContainerUpdateParams{ctx, container, updateConfig}
	for _, e := range mmContainerUpdate.expectations {
		if minimock.Equal(e.params, mmContainerUpdate.defaultExpectation.params) {
			mmContainerUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerUpdate.defaultExpectation.params)
		}
	}

	return mmContainerUpdate
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerUpdate
func (mmContainerUpdate *mCommonAPIClientMockContainerUpdate) Inspect(f func(ctx context.Context, container string, updateConfig containertypes.UpdateConfig)) *mCommonAPIClientMockContainerUpdate {
	if mmContainerUpdate.mock.inspectFuncContainerUpdate != nil {
		mmContainerUpdate.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerUpdate")
	}

	mmContainerUpdate.mock.inspectFuncContainerUpdate = f

	return mmContainerUpdate
}

// Return sets up results that will be returned by CommonAPIClient.ContainerUpdate
func (mmContainerUpdate *mCommonAPIClientMockContainerUpdate) Return(c2 containertypes.ContainerUpdateOKBody, err error) *CommonAPIClientMock {
	if mmContainerUpdate.mock.funcContainerUpdate != nil {
		mmContainerUpdate.mock.t.Fatalf("CommonAPIClientMock.ContainerUpdate mock is already set by Set")
	}

	if mmContainerUpdate.defaultExpectation == nil {
		mmContainerUpdate.defaultExpectation = &CommonAPIClientMockContainerUpdateExpectation{mock: mmContainerUpdate.mock}
	}
	mmContainerUpdate.defaultExpectation.results = &CommonAPIClientMockContainerUpdateResults{c2, err}
	return mmContainerUpdate.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerUpdate method
func (mmContainerUpdate *mCommonAPIClientMockContainerUpdate) Set(f func(ctx context.Context, container string, updateConfig containertypes.UpdateConfig) (c2 containertypes.ContainerUpdateOKBody, err error)) *CommonAPIClientMock {
	if mmContainerUpdate.defaultExpectation != nil {
		mmContainerUpdate.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerUpdate method")
	}

	if len(mmContainerUpdate.expectations) > 0 {
		mmContainerUpdate.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerUpdate method")
	}

	mmContainerUpdate.mock.funcContainerUpdate = f
	return mmContainerUpdate.mock
}

// When sets expectation for the CommonAPIClient.ContainerUpdate which will trigger the result defined by the following
// Then helper
func (mmContainerUpdate *mCommonAPIClientMockContainerUpdate) When(ctx context.Context, container string, updateConfig containertypes.UpdateConfig) *CommonAPIClientMockContainerUpdateExpectation {
	if mmContainerUpdate.mock.funcContainerUpdate != nil {
		mmContainerUpdate.mock.t.Fatalf("CommonAPIClientMock.ContainerUpdate mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerUpdateExpectation{
		mock:   mmContainerUpdate.mock,
		params: &CommonAPIClientMockContainerUpdateParams{ctx, container, updateConfig},
	}
	mmContainerUpdate.expectations = append(mmContainerUpdate.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerUpdate return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerUpdateExpectation) Then(c2 containertypes.ContainerUpdateOKBody, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerUpdateResults{c2, err}
	return e.mock
}

// ContainerUpdate implements client.CommonAPIClient
func (mmContainerUpdate *CommonAPIClientMock) ContainerUpdate(ctx context.Context, container string, updateConfig containertypes.UpdateConfig) (c2 containertypes.ContainerUpdateOKBody, err error) {
	mm_atomic.AddUint64(&mmContainerUpdate.beforeContainerUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerUpdate.afterContainerUpdateCounter, 1)

	if mmContainerUpdate.inspectFuncContainerUpdate != nil {
		mmContainerUpdate.inspectFuncContainerUpdate(ctx, container, updateConfig)
	}

	mm_params := &CommonAPIClientMockContainerUpdateParams{ctx, container, updateConfig}

	// Record call args
	mmContainerUpdate.ContainerUpdateMock.mutex.Lock()
	mmContainerUpdate.ContainerUpdateMock.callArgs = append(mmContainerUpdate.ContainerUpdateMock.callArgs, mm_params)
	mmContainerUpdate.ContainerUpdateMock.mutex.Unlock()

	for _, e := range mmContainerUpdate.ContainerUpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.c2, e.results.err
		}
	}

	if mmContainerUpdate.ContainerUpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerUpdate.ContainerUpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerUpdate.ContainerUpdateMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerUpdateParams{ctx, container, updateConfig}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerUpdate.t.Errorf("CommonAPIClientMock.ContainerUpdate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerUpdate.ContainerUpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerUpdate.t.Fatal("No results are set for the CommonAPIClientMock.ContainerUpdate")
		}
		return (*mm_results).c2, (*mm_results).err
	}
	if mmContainerUpdate.funcContainerUpdate != nil {
		return mmContainerUpdate.funcContainerUpdate(ctx, container, updateConfig)
	}
	mmContainerUpdate.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerUpdate. %v %v %v", ctx, container, updateConfig)
	return
}

// ContainerUpdateAfterCounter returns a count of finished CommonAPIClientMock.ContainerUpdate invocations
func (mmContainerUpdate *CommonAPIClientMock) ContainerUpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerUpdate.afterContainerUpdateCounter)
}

// ContainerUpdateBeforeCounter returns a count of CommonAPIClientMock.ContainerUpdate invocations
func (mmContainerUpdate *CommonAPIClientMock) ContainerUpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerUpdate.beforeContainerUpdateCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerUpdate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerUpdate *mCommonAPIClientMockContainerUpdate) Calls() []*CommonAPIClientMockContainerUpdateParams {
	mmContainerUpdate.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerUpdateParams, len(mmContainerUpdate.callArgs))
	copy(argCopy, mmContainerUpdate.callArgs)

	mmContainerUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockContainerUpdateDone returns true if the count of the ContainerUpdate invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerUpdateDone() bool {
	for _, e := range m.ContainerUpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerUpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerUpdate != nil && mm_atomic.LoadUint64(&m.afterContainerUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerUpdateInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerUpdateInspect() {
	for _, e := range m.ContainerUpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerUpdate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerUpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerUpdateCounter) < 1 {
		if m.ContainerUpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerUpdate")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerUpdate with params: %#v", *m.ContainerUpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerUpdate != nil && mm_atomic.LoadUint64(&m.afterContainerUpdateCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerUpdate")
	}
}

type mCommonAPIClientMockContainerWait struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainerWaitExpectation
	expectations       []*CommonAPIClientMockContainerWaitExpectation

	callArgs []*CommonAPIClientMockContainerWaitParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainerWaitExpectation specifies expectation struct of the CommonAPIClient.ContainerWait
type CommonAPIClientMockContainerWaitExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainerWaitParams
	results *CommonAPIClientMockContainerWaitResults
	Counter uint64
}

// CommonAPIClientMockContainerWaitParams contains parameters of the CommonAPIClient.ContainerWait
type CommonAPIClientMockContainerWaitParams struct {
	ctx       context.Context
	container string
	condition containertypes.WaitCondition
}

// CommonAPIClientMockContainerWaitResults contains results of the CommonAPIClient.ContainerWait
type CommonAPIClientMockContainerWaitResults struct {
	ch1 <-chan containertypes.ContainerWaitOKBody
	ch2 <-chan error
}

// Expect sets up expected params for CommonAPIClient.ContainerWait
func (mmContainerWait *mCommonAPIClientMockContainerWait) Expect(ctx context.Context, container string, condition containertypes.WaitCondition) *mCommonAPIClientMockContainerWait {
	if mmContainerWait.mock.funcContainerWait != nil {
		mmContainerWait.mock.t.Fatalf("CommonAPIClientMock.ContainerWait mock is already set by Set")
	}

	if mmContainerWait.defaultExpectation == nil {
		mmContainerWait.defaultExpectation = &CommonAPIClientMockContainerWaitExpectation{}
	}

	mmContainerWait.defaultExpectation.params = &CommonAPIClientMockContainerWaitParams{ctx, container, condition}
	for _, e := range mmContainerWait.expectations {
		if minimock.Equal(e.params, mmContainerWait.defaultExpectation.params) {
			mmContainerWait.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainerWait.defaultExpectation.params)
		}
	}

	return mmContainerWait
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainerWait
func (mmContainerWait *mCommonAPIClientMockContainerWait) Inspect(f func(ctx context.Context, container string, condition containertypes.WaitCondition)) *mCommonAPIClientMockContainerWait {
	if mmContainerWait.mock.inspectFuncContainerWait != nil {
		mmContainerWait.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainerWait")
	}

	mmContainerWait.mock.inspectFuncContainerWait = f

	return mmContainerWait
}

// Return sets up results that will be returned by CommonAPIClient.ContainerWait
func (mmContainerWait *mCommonAPIClientMockContainerWait) Return(ch1 <-chan containertypes.ContainerWaitOKBody, ch2 <-chan error) *CommonAPIClientMock {
	if mmContainerWait.mock.funcContainerWait != nil {
		mmContainerWait.mock.t.Fatalf("CommonAPIClientMock.ContainerWait mock is already set by Set")
	}

	if mmContainerWait.defaultExpectation == nil {
		mmContainerWait.defaultExpectation = &CommonAPIClientMockContainerWaitExpectation{mock: mmContainerWait.mock}
	}
	mmContainerWait.defaultExpectation.results = &CommonAPIClientMockContainerWaitResults{ch1, ch2}
	return mmContainerWait.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainerWait method
func (mmContainerWait *mCommonAPIClientMockContainerWait) Set(f func(ctx context.Context, container string, condition containertypes.WaitCondition) (ch1 <-chan containertypes.ContainerWaitOKBody, ch2 <-chan error)) *CommonAPIClientMock {
	if mmContainerWait.defaultExpectation != nil {
		mmContainerWait.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainerWait method")
	}

	if len(mmContainerWait.expectations) > 0 {
		mmContainerWait.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainerWait method")
	}

	mmContainerWait.mock.funcContainerWait = f
	return mmContainerWait.mock
}

// When sets expectation for the CommonAPIClient.ContainerWait which will trigger the result defined by the following
// Then helper
func (mmContainerWait *mCommonAPIClientMockContainerWait) When(ctx context.Context, container string, condition containertypes.WaitCondition) *CommonAPIClientMockContainerWaitExpectation {
	if mmContainerWait.mock.funcContainerWait != nil {
		mmContainerWait.mock.t.Fatalf("CommonAPIClientMock.ContainerWait mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainerWaitExpectation{
		mock:   mmContainerWait.mock,
		params: &CommonAPIClientMockContainerWaitParams{ctx, container, condition},
	}
	mmContainerWait.expectations = append(mmContainerWait.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainerWait return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainerWaitExpectation) Then(ch1 <-chan containertypes.ContainerWaitOKBody, ch2 <-chan error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainerWaitResults{ch1, ch2}
	return e.mock
}

// ContainerWait implements client.CommonAPIClient
func (mmContainerWait *CommonAPIClientMock) ContainerWait(ctx context.Context, container string, condition containertypes.WaitCondition) (ch1 <-chan containertypes.ContainerWaitOKBody, ch2 <-chan error) {
	mm_atomic.AddUint64(&mmContainerWait.beforeContainerWaitCounter, 1)
	defer mm_atomic.AddUint64(&mmContainerWait.afterContainerWaitCounter, 1)

	if mmContainerWait.inspectFuncContainerWait != nil {
		mmContainerWait.inspectFuncContainerWait(ctx, container, condition)
	}

	mm_params := &CommonAPIClientMockContainerWaitParams{ctx, container, condition}

	// Record call args
	mmContainerWait.ContainerWaitMock.mutex.Lock()
	mmContainerWait.ContainerWaitMock.callArgs = append(mmContainerWait.ContainerWaitMock.callArgs, mm_params)
	mmContainerWait.ContainerWaitMock.mutex.Unlock()

	for _, e := range mmContainerWait.ContainerWaitMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ch1, e.results.ch2
		}
	}

	if mmContainerWait.ContainerWaitMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainerWait.ContainerWaitMock.defaultExpectation.Counter, 1)
		mm_want := mmContainerWait.ContainerWaitMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainerWaitParams{ctx, container, condition}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainerWait.t.Errorf("CommonAPIClientMock.ContainerWait got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainerWait.ContainerWaitMock.defaultExpectation.results
		if mm_results == nil {
			mmContainerWait.t.Fatal("No results are set for the CommonAPIClientMock.ContainerWait")
		}
		return (*mm_results).ch1, (*mm_results).ch2
	}
	if mmContainerWait.funcContainerWait != nil {
		return mmContainerWait.funcContainerWait(ctx, container, condition)
	}
	mmContainerWait.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainerWait. %v %v %v", ctx, container, condition)
	return
}

// ContainerWaitAfterCounter returns a count of finished CommonAPIClientMock.ContainerWait invocations
func (mmContainerWait *CommonAPIClientMock) ContainerWaitAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerWait.afterContainerWaitCounter)
}

// ContainerWaitBeforeCounter returns a count of CommonAPIClientMock.ContainerWait invocations
func (mmContainerWait *CommonAPIClientMock) ContainerWaitBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainerWait.beforeContainerWaitCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainerWait.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainerWait *mCommonAPIClientMockContainerWait) Calls() []*CommonAPIClientMockContainerWaitParams {
	mmContainerWait.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainerWaitParams, len(mmContainerWait.callArgs))
	copy(argCopy, mmContainerWait.callArgs)

	mmContainerWait.mutex.RUnlock()

	return argCopy
}

// MinimockContainerWaitDone returns true if the count of the ContainerWait invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainerWaitDone() bool {
	for _, e := range m.ContainerWaitMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerWaitMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerWaitCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerWait != nil && mm_atomic.LoadUint64(&m.afterContainerWaitCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainerWaitInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainerWaitInspect() {
	for _, e := range m.ContainerWaitMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerWait with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainerWaitMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainerWaitCounter) < 1 {
		if m.ContainerWaitMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainerWait")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainerWait with params: %#v", *m.ContainerWaitMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainerWait != nil && mm_atomic.LoadUint64(&m.afterContainerWaitCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainerWait")
	}
}

type mCommonAPIClientMockContainersPrune struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockContainersPruneExpectation
	expectations       []*CommonAPIClientMockContainersPruneExpectation

	callArgs []*CommonAPIClientMockContainersPruneParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockContainersPruneExpectation specifies expectation struct of the CommonAPIClient.ContainersPrune
type CommonAPIClientMockContainersPruneExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockContainersPruneParams
	results *CommonAPIClientMockContainersPruneResults
	Counter uint64
}

// CommonAPIClientMockContainersPruneParams contains parameters of the CommonAPIClient.ContainersPrune
type CommonAPIClientMockContainersPruneParams struct {
	ctx          context.Context
	pruneFilters filters.Args
}

// CommonAPIClientMockContainersPruneResults contains results of the CommonAPIClient.ContainersPrune
type CommonAPIClientMockContainersPruneResults struct {
	c2  types.ContainersPruneReport
	err error
}

// Expect sets up expected params for CommonAPIClient.ContainersPrune
func (mmContainersPrune *mCommonAPIClientMockContainersPrune) Expect(ctx context.Context, pruneFilters filters.Args) *mCommonAPIClientMockContainersPrune {
	if mmContainersPrune.mock.funcContainersPrune != nil {
		mmContainersPrune.mock.t.Fatalf("CommonAPIClientMock.ContainersPrune mock is already set by Set")
	}

	if mmContainersPrune.defaultExpectation == nil {
		mmContainersPrune.defaultExpectation = &CommonAPIClientMockContainersPruneExpectation{}
	}

	mmContainersPrune.defaultExpectation.params = &CommonAPIClientMockContainersPruneParams{ctx, pruneFilters}
	for _, e := range mmContainersPrune.expectations {
		if minimock.Equal(e.params, mmContainersPrune.defaultExpectation.params) {
			mmContainersPrune.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmContainersPrune.defaultExpectation.params)
		}
	}

	return mmContainersPrune
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ContainersPrune
func (mmContainersPrune *mCommonAPIClientMockContainersPrune) Inspect(f func(ctx context.Context, pruneFilters filters.Args)) *mCommonAPIClientMockContainersPrune {
	if mmContainersPrune.mock.inspectFuncContainersPrune != nil {
		mmContainersPrune.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ContainersPrune")
	}

	mmContainersPrune.mock.inspectFuncContainersPrune = f

	return mmContainersPrune
}

// Return sets up results that will be returned by CommonAPIClient.ContainersPrune
func (mmContainersPrune *mCommonAPIClientMockContainersPrune) Return(c2 types.ContainersPruneReport, err error) *CommonAPIClientMock {
	if mmContainersPrune.mock.funcContainersPrune != nil {
		mmContainersPrune.mock.t.Fatalf("CommonAPIClientMock.ContainersPrune mock is already set by Set")
	}

	if mmContainersPrune.defaultExpectation == nil {
		mmContainersPrune.defaultExpectation = &CommonAPIClientMockContainersPruneExpectation{mock: mmContainersPrune.mock}
	}
	mmContainersPrune.defaultExpectation.results = &CommonAPIClientMockContainersPruneResults{c2, err}
	return mmContainersPrune.mock
}

//Set uses given function f to mock the CommonAPIClient.ContainersPrune method
func (mmContainersPrune *mCommonAPIClientMockContainersPrune) Set(f func(ctx context.Context, pruneFilters filters.Args) (c2 types.ContainersPruneReport, err error)) *CommonAPIClientMock {
	if mmContainersPrune.defaultExpectation != nil {
		mmContainersPrune.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ContainersPrune method")
	}

	if len(mmContainersPrune.expectations) > 0 {
		mmContainersPrune.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ContainersPrune method")
	}

	mmContainersPrune.mock.funcContainersPrune = f
	return mmContainersPrune.mock
}

// When sets expectation for the CommonAPIClient.ContainersPrune which will trigger the result defined by the following
// Then helper
func (mmContainersPrune *mCommonAPIClientMockContainersPrune) When(ctx context.Context, pruneFilters filters.Args) *CommonAPIClientMockContainersPruneExpectation {
	if mmContainersPrune.mock.funcContainersPrune != nil {
		mmContainersPrune.mock.t.Fatalf("CommonAPIClientMock.ContainersPrune mock is already set by Set")
	}

	expectation := &CommonAPIClientMockContainersPruneExpectation{
		mock:   mmContainersPrune.mock,
		params: &CommonAPIClientMockContainersPruneParams{ctx, pruneFilters},
	}
	mmContainersPrune.expectations = append(mmContainersPrune.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ContainersPrune return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockContainersPruneExpectation) Then(c2 types.ContainersPruneReport, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockContainersPruneResults{c2, err}
	return e.mock
}

// ContainersPrune implements client.CommonAPIClient
func (mmContainersPrune *CommonAPIClientMock) ContainersPrune(ctx context.Context, pruneFilters filters.Args) (c2 types.ContainersPruneReport, err error) {
	mm_atomic.AddUint64(&mmContainersPrune.beforeContainersPruneCounter, 1)
	defer mm_atomic.AddUint64(&mmContainersPrune.afterContainersPruneCounter, 1)

	if mmContainersPrune.inspectFuncContainersPrune != nil {
		mmContainersPrune.inspectFuncContainersPrune(ctx, pruneFilters)
	}

	mm_params := &CommonAPIClientMockContainersPruneParams{ctx, pruneFilters}

	// Record call args
	mmContainersPrune.ContainersPruneMock.mutex.Lock()
	mmContainersPrune.ContainersPruneMock.callArgs = append(mmContainersPrune.ContainersPruneMock.callArgs, mm_params)
	mmContainersPrune.ContainersPruneMock.mutex.Unlock()

	for _, e := range mmContainersPrune.ContainersPruneMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.c2, e.results.err
		}
	}

	if mmContainersPrune.ContainersPruneMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmContainersPrune.ContainersPruneMock.defaultExpectation.Counter, 1)
		mm_want := mmContainersPrune.ContainersPruneMock.defaultExpectation.params
		mm_got := CommonAPIClientMockContainersPruneParams{ctx, pruneFilters}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmContainersPrune.t.Errorf("CommonAPIClientMock.ContainersPrune got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmContainersPrune.ContainersPruneMock.defaultExpectation.results
		if mm_results == nil {
			mmContainersPrune.t.Fatal("No results are set for the CommonAPIClientMock.ContainersPrune")
		}
		return (*mm_results).c2, (*mm_results).err
	}
	if mmContainersPrune.funcContainersPrune != nil {
		return mmContainersPrune.funcContainersPrune(ctx, pruneFilters)
	}
	mmContainersPrune.t.Fatalf("Unexpected call to CommonAPIClientMock.ContainersPrune. %v %v", ctx, pruneFilters)
	return
}

// ContainersPruneAfterCounter returns a count of finished CommonAPIClientMock.ContainersPrune invocations
func (mmContainersPrune *CommonAPIClientMock) ContainersPruneAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainersPrune.afterContainersPruneCounter)
}

// ContainersPruneBeforeCounter returns a count of CommonAPIClientMock.ContainersPrune invocations
func (mmContainersPrune *CommonAPIClientMock) ContainersPruneBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmContainersPrune.beforeContainersPruneCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ContainersPrune.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmContainersPrune *mCommonAPIClientMockContainersPrune) Calls() []*CommonAPIClientMockContainersPruneParams {
	mmContainersPrune.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockContainersPruneParams, len(mmContainersPrune.callArgs))
	copy(argCopy, mmContainersPrune.callArgs)

	mmContainersPrune.mutex.RUnlock()

	return argCopy
}

// MinimockContainersPruneDone returns true if the count of the ContainersPrune invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockContainersPruneDone() bool {
	for _, e := range m.ContainersPruneMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainersPruneMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainersPruneCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainersPrune != nil && mm_atomic.LoadUint64(&m.afterContainersPruneCounter) < 1 {
		return false
	}
	return true
}

// MinimockContainersPruneInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockContainersPruneInspect() {
	for _, e := range m.ContainersPruneMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainersPrune with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ContainersPruneMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterContainersPruneCounter) < 1 {
		if m.ContainersPruneMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ContainersPrune")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ContainersPrune with params: %#v", *m.ContainersPruneMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcContainersPrune != nil && mm_atomic.LoadUint64(&m.afterContainersPruneCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ContainersPrune")
	}
}

type mCommonAPIClientMockCopyFromContainer struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockCopyFromContainerExpectation
	expectations       []*CommonAPIClientMockCopyFromContainerExpectation

	callArgs []*CommonAPIClientMockCopyFromContainerParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockCopyFromContainerExpectation specifies expectation struct of the CommonAPIClient.CopyFromContainer
type CommonAPIClientMockCopyFromContainerExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockCopyFromContainerParams
	results *CommonAPIClientMockCopyFromContainerResults
	Counter uint64
}

// CommonAPIClientMockCopyFromContainerParams contains parameters of the CommonAPIClient.CopyFromContainer
type CommonAPIClientMockCopyFromContainerParams struct {
	ctx       context.Context
	container string
	srcPath   string
}

// CommonAPIClientMockCopyFromContainerResults contains results of the CommonAPIClient.CopyFromContainer
type CommonAPIClientMockCopyFromContainerResults struct {
	r1  io.ReadCloser
	c2  types.ContainerPathStat
	err error
}

// Expect sets up expected params for CommonAPIClient.CopyFromContainer
func (mmCopyFromContainer *mCommonAPIClientMockCopyFromContainer) Expect(ctx context.Context, container string, srcPath string) *mCommonAPIClientMockCopyFromContainer {
	if mmCopyFromContainer.mock.funcCopyFromContainer != nil {
		mmCopyFromContainer.mock.t.Fatalf("CommonAPIClientMock.CopyFromContainer mock is already set by Set")
	}

	if mmCopyFromContainer.defaultExpectation == nil {
		mmCopyFromContainer.defaultExpectation = &CommonAPIClientMockCopyFromContainerExpectation{}
	}

	mmCopyFromContainer.defaultExpectation.params = &CommonAPIClientMockCopyFromContainerParams{ctx, container, srcPath}
	for _, e := range mmCopyFromContainer.expectations {
		if minimock.Equal(e.params, mmCopyFromContainer.defaultExpectation.params) {
			mmCopyFromContainer.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCopyFromContainer.defaultExpectation.params)
		}
	}

	return mmCopyFromContainer
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.CopyFromContainer
func (mmCopyFromContainer *mCommonAPIClientMockCopyFromContainer) Inspect(f func(ctx context.Context, container string, srcPath string)) *mCommonAPIClientMockCopyFromContainer {
	if mmCopyFromContainer.mock.inspectFuncCopyFromContainer != nil {
		mmCopyFromContainer.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.CopyFromContainer")
	}

	mmCopyFromContainer.mock.inspectFuncCopyFromContainer = f

	return mmCopyFromContainer
}

// Return sets up results that will be returned by CommonAPIClient.CopyFromContainer
func (mmCopyFromContainer *mCommonAPIClientMockCopyFromContainer) Return(r1 io.ReadCloser, c2 types.ContainerPathStat, err error) *CommonAPIClientMock {
	if mmCopyFromContainer.mock.funcCopyFromContainer != nil {
		mmCopyFromContainer.mock.t.Fatalf("CommonAPIClientMock.CopyFromContainer mock is already set by Set")
	}

	if mmCopyFromContainer.defaultExpectation == nil {
		mmCopyFromContainer.defaultExpectation = &CommonAPIClientMockCopyFromContainerExpectation{mock: mmCopyFromContainer.mock}
	}
	mmCopyFromContainer.defaultExpectation.results = &CommonAPIClientMockCopyFromContainerResults{r1, c2, err}
	return mmCopyFromContainer.mock
}

//Set uses given function f to mock the CommonAPIClient.CopyFromContainer method
func (mmCopyFromContainer *mCommonAPIClientMockCopyFromContainer) Set(f func(ctx context.Context, container string, srcPath string) (r1 io.ReadCloser, c2 types.ContainerPathStat, err error)) *CommonAPIClientMock {
	if mmCopyFromContainer.defaultExpectation != nil {
		mmCopyFromContainer.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.CopyFromContainer method")
	}

	if len(mmCopyFromContainer.expectations) > 0 {
		mmCopyFromContainer.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.CopyFromContainer method")
	}

	mmCopyFromContainer.mock.funcCopyFromContainer = f
	return mmCopyFromContainer.mock
}

// When sets expectation for the CommonAPIClient.CopyFromContainer which will trigger the result defined by the following
// Then helper
func (mmCopyFromContainer *mCommonAPIClientMockCopyFromContainer) When(ctx context.Context, container string, srcPath string) *CommonAPIClientMockCopyFromContainerExpectation {
	if mmCopyFromContainer.mock.funcCopyFromContainer != nil {
		mmCopyFromContainer.mock.t.Fatalf("CommonAPIClientMock.CopyFromContainer mock is already set by Set")
	}

	expectation := &CommonAPIClientMockCopyFromContainerExpectation{
		mock:   mmCopyFromContainer.mock,
		params: &CommonAPIClientMockCopyFromContainerParams{ctx, container, srcPath},
	}
	mmCopyFromContainer.expectations = append(mmCopyFromContainer.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.CopyFromContainer return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockCopyFromContainerExpectation) Then(r1 io.ReadCloser, c2 types.ContainerPathStat, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockCopyFromContainerResults{r1, c2, err}
	return e.mock
}

// CopyFromContainer implements client.CommonAPIClient
func (mmCopyFromContainer *CommonAPIClientMock) CopyFromContainer(ctx context.Context, container string, srcPath string) (r1 io.ReadCloser, c2 types.ContainerPathStat, err error) {
	mm_atomic.AddUint64(&mmCopyFromContainer.beforeCopyFromContainerCounter, 1)
	defer mm_atomic.AddUint64(&mmCopyFromContainer.afterCopyFromContainerCounter, 1)

	if mmCopyFromContainer.inspectFuncCopyFromContainer != nil {
		mmCopyFromContainer.inspectFuncCopyFromContainer(ctx, container, srcPath)
	}

	mm_params := &CommonAPIClientMockCopyFromContainerParams{ctx, container, srcPath}

	// Record call args
	mmCopyFromContainer.CopyFromContainerMock.mutex.Lock()
	mmCopyFromContainer.CopyFromContainerMock.callArgs = append(mmCopyFromContainer.CopyFromContainerMock.callArgs, mm_params)
	mmCopyFromContainer.CopyFromContainerMock.mutex.Unlock()

	for _, e := range mmCopyFromContainer.CopyFromContainerMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.c2, e.results.err
		}
	}

	if mmCopyFromContainer.CopyFromContainerMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCopyFromContainer.CopyFromContainerMock.defaultExpectation.Counter, 1)
		mm_want := mmCopyFromContainer.CopyFromContainerMock.defaultExpectation.params
		mm_got := CommonAPIClientMockCopyFromContainerParams{ctx, container, srcPath}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCopyFromContainer.t.Errorf("CommonAPIClientMock.CopyFromContainer got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCopyFromContainer.CopyFromContainerMock.defaultExpectation.results
		if mm_results == nil {
			mmCopyFromContainer.t.Fatal("No results are set for the CommonAPIClientMock.CopyFromContainer")
		}
		return (*mm_results).r1, (*mm_results).c2, (*mm_results).err
	}
	if mmCopyFromContainer.funcCopyFromContainer != nil {
		return mmCopyFromContainer.funcCopyFromContainer(ctx, container, srcPath)
	}
	mmCopyFromContainer.t.Fatalf("Unexpected call to CommonAPIClientMock.CopyFromContainer. %v %v %v", ctx, container, srcPath)
	return
}

// CopyFromContainerAfterCounter returns a count of finished CommonAPIClientMock.CopyFromContainer invocations
func (mmCopyFromContainer *CommonAPIClientMock) CopyFromContainerAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCopyFromContainer.afterCopyFromContainerCounter)
}

// CopyFromContainerBeforeCounter returns a count of CommonAPIClientMock.CopyFromContainer invocations
func (mmCopyFromContainer *CommonAPIClientMock) CopyFromContainerBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCopyFromContainer.beforeCopyFromContainerCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.CopyFromContainer.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCopyFromContainer *mCommonAPIClientMockCopyFromContainer) Calls() []*CommonAPIClientMockCopyFromContainerParams {
	mmCopyFromContainer.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockCopyFromContainerParams, len(mmCopyFromContainer.callArgs))
	copy(argCopy, mmCopyFromContainer.callArgs)

	mmCopyFromContainer.mutex.RUnlock()

	return argCopy
}

// MinimockCopyFromContainerDone returns true if the count of the CopyFromContainer invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockCopyFromContainerDone() bool {
	for _, e := range m.CopyFromContainerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CopyFromContainerMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCopyFromContainerCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCopyFromContainer != nil && mm_atomic.LoadUint64(&m.afterCopyFromContainerCounter) < 1 {
		return false
	}
	return true
}

// MinimockCopyFromContainerInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockCopyFromContainerInspect() {
	for _, e := range m.CopyFromContainerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.CopyFromContainer with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CopyFromContainerMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCopyFromContainerCounter) < 1 {
		if m.CopyFromContainerMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.CopyFromContainer")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.CopyFromContainer with params: %#v", *m.CopyFromContainerMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCopyFromContainer != nil && mm_atomic.LoadUint64(&m.afterCopyFromContainerCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.CopyFromContainer")
	}
}

type mCommonAPIClientMockCopyToContainer struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockCopyToContainerExpectation
	expectations       []*CommonAPIClientMockCopyToContainerExpectation

	callArgs []*CommonAPIClientMockCopyToContainerParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockCopyToContainerExpectation specifies expectation struct of the CommonAPIClient.CopyToContainer
type CommonAPIClientMockCopyToContainerExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockCopyToContainerParams
	results *CommonAPIClientMockCopyToContainerResults
	Counter uint64
}

// CommonAPIClientMockCopyToContainerParams contains parameters of the CommonAPIClient.CopyToContainer
type CommonAPIClientMockCopyToContainerParams struct {
	ctx       context.Context
	container string
	path      string
	content   io.Reader
	options   types.CopyToContainerOptions
}

// CommonAPIClientMockCopyToContainerResults contains results of the CommonAPIClient.CopyToContainer
type CommonAPIClientMockCopyToContainerResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.CopyToContainer
func (mmCopyToContainer *mCommonAPIClientMockCopyToContainer) Expect(ctx context.Context, container string, path string, content io.Reader, options types.CopyToContainerOptions) *mCommonAPIClientMockCopyToContainer {
	if mmCopyToContainer.mock.funcCopyToContainer != nil {
		mmCopyToContainer.mock.t.Fatalf("CommonAPIClientMock.CopyToContainer mock is already set by Set")
	}

	if mmCopyToContainer.defaultExpectation == nil {
		mmCopyToContainer.defaultExpectation = &CommonAPIClientMockCopyToContainerExpectation{}
	}

	mmCopyToContainer.defaultExpectation.params = &CommonAPIClientMockCopyToContainerParams{ctx, container, path, content, options}
	for _, e := range mmCopyToContainer.expectations {
		if minimock.Equal(e.params, mmCopyToContainer.defaultExpectation.params) {
			mmCopyToContainer.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCopyToContainer.defaultExpectation.params)
		}
	}

	return mmCopyToContainer
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.CopyToContainer
func (mmCopyToContainer *mCommonAPIClientMockCopyToContainer) Inspect(f func(ctx context.Context, container string, path string, content io.Reader, options types.CopyToContainerOptions)) *mCommonAPIClientMockCopyToContainer {
	if mmCopyToContainer.mock.inspectFuncCopyToContainer != nil {
		mmCopyToContainer.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.CopyToContainer")
	}

	mmCopyToContainer.mock.inspectFuncCopyToContainer = f

	return mmCopyToContainer
}

// Return sets up results that will be returned by CommonAPIClient.CopyToContainer
func (mmCopyToContainer *mCommonAPIClientMockCopyToContainer) Return(err error) *CommonAPIClientMock {
	if mmCopyToContainer.mock.funcCopyToContainer != nil {
		mmCopyToContainer.mock.t.Fatalf("CommonAPIClientMock.CopyToContainer mock is already set by Set")
	}

	if mmCopyToContainer.defaultExpectation == nil {
		mmCopyToContainer.defaultExpectation = &CommonAPIClientMockCopyToContainerExpectation{mock: mmCopyToContainer.mock}
	}
	mmCopyToContainer.defaultExpectation.results = &CommonAPIClientMockCopyToContainerResults{err}
	return mmCopyToContainer.mock
}

//Set uses given function f to mock the CommonAPIClient.CopyToContainer method
func (mmCopyToContainer *mCommonAPIClientMockCopyToContainer) Set(f func(ctx context.Context, container string, path string, content io.Reader, options types.CopyToContainerOptions) (err error)) *CommonAPIClientMock {
	if mmCopyToContainer.defaultExpectation != nil {
		mmCopyToContainer.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.CopyToContainer method")
	}

	if len(mmCopyToContainer.expectations) > 0 {
		mmCopyToContainer.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.CopyToContainer method")
	}

	mmCopyToContainer.mock.funcCopyToContainer = f
	return mmCopyToContainer.mock
}

// When sets expectation for the CommonAPIClient.CopyToContainer which will trigger the result defined by the following
// Then helper
func (mmCopyToContainer *mCommonAPIClientMockCopyToContainer) When(ctx context.Context, container string, path string, content io.Reader, options types.CopyToContainerOptions) *CommonAPIClientMockCopyToContainerExpectation {
	if mmCopyToContainer.mock.funcCopyToContainer != nil {
		mmCopyToContainer.mock.t.Fatalf("CommonAPIClientMock.CopyToContainer mock is already set by Set")
	}

	expectation := &CommonAPIClientMockCopyToContainerExpectation{
		mock:   mmCopyToContainer.mock,
		params: &CommonAPIClientMockCopyToContainerParams{ctx, container, path, content, options},
	}
	mmCopyToContainer.expectations = append(mmCopyToContainer.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.CopyToContainer return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockCopyToContainerExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockCopyToContainerResults{err}
	return e.mock
}

// CopyToContainer implements client.CommonAPIClient
func (mmCopyToContainer *CommonAPIClientMock) CopyToContainer(ctx context.Context, container string, path string, content io.Reader, options types.CopyToContainerOptions) (err error) {
	mm_atomic.AddUint64(&mmCopyToContainer.beforeCopyToContainerCounter, 1)
	defer mm_atomic.AddUint64(&mmCopyToContainer.afterCopyToContainerCounter, 1)

	if mmCopyToContainer.inspectFuncCopyToContainer != nil {
		mmCopyToContainer.inspectFuncCopyToContainer(ctx, container, path, content, options)
	}

	mm_params := &CommonAPIClientMockCopyToContainerParams{ctx, container, path, content, options}

	// Record call args
	mmCopyToContainer.CopyToContainerMock.mutex.Lock()
	mmCopyToContainer.CopyToContainerMock.callArgs = append(mmCopyToContainer.CopyToContainerMock.callArgs, mm_params)
	mmCopyToContainer.CopyToContainerMock.mutex.Unlock()

	for _, e := range mmCopyToContainer.CopyToContainerMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCopyToContainer.CopyToContainerMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCopyToContainer.CopyToContainerMock.defaultExpectation.Counter, 1)
		mm_want := mmCopyToContainer.CopyToContainerMock.defaultExpectation.params
		mm_got := CommonAPIClientMockCopyToContainerParams{ctx, container, path, content, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCopyToContainer.t.Errorf("CommonAPIClientMock.CopyToContainer got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCopyToContainer.CopyToContainerMock.defaultExpectation.results
		if mm_results == nil {
			mmCopyToContainer.t.Fatal("No results are set for the CommonAPIClientMock.CopyToContainer")
		}
		return (*mm_results).err
	}
	if mmCopyToContainer.funcCopyToContainer != nil {
		return mmCopyToContainer.funcCopyToContainer(ctx, container, path, content, options)
	}
	mmCopyToContainer.t.Fatalf("Unexpected call to CommonAPIClientMock.CopyToContainer. %v %v %v %v %v", ctx, container, path, content, options)
	return
}

// CopyToContainerAfterCounter returns a count of finished CommonAPIClientMock.CopyToContainer invocations
func (mmCopyToContainer *CommonAPIClientMock) CopyToContainerAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCopyToContainer.afterCopyToContainerCounter)
}

// CopyToContainerBeforeCounter returns a count of CommonAPIClientMock.CopyToContainer invocations
func (mmCopyToContainer *CommonAPIClientMock) CopyToContainerBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCopyToContainer.beforeCopyToContainerCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.CopyToContainer.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCopyToContainer *mCommonAPIClientMockCopyToContainer) Calls() []*CommonAPIClientMockCopyToContainerParams {
	mmCopyToContainer.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockCopyToContainerParams, len(mmCopyToContainer.callArgs))
	copy(argCopy, mmCopyToContainer.callArgs)

	mmCopyToContainer.mutex.RUnlock()

	return argCopy
}

// MinimockCopyToContainerDone returns true if the count of the CopyToContainer invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockCopyToContainerDone() bool {
	for _, e := range m.CopyToContainerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CopyToContainerMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCopyToContainerCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCopyToContainer != nil && mm_atomic.LoadUint64(&m.afterCopyToContainerCounter) < 1 {
		return false
	}
	return true
}

// MinimockCopyToContainerInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockCopyToContainerInspect() {
	for _, e := range m.CopyToContainerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.CopyToContainer with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CopyToContainerMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCopyToContainerCounter) < 1 {
		if m.CopyToContainerMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.CopyToContainer")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.CopyToContainer with params: %#v", *m.CopyToContainerMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCopyToContainer != nil && mm_atomic.LoadUint64(&m.afterCopyToContainerCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.CopyToContainer")
	}
}

type mCommonAPIClientMockDaemonHost struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockDaemonHostExpectation
	expectations       []*CommonAPIClientMockDaemonHostExpectation
}

// CommonAPIClientMockDaemonHostExpectation specifies expectation struct of the CommonAPIClient.DaemonHost
type CommonAPIClientMockDaemonHostExpectation struct {
	mock *CommonAPIClientMock

	results *CommonAPIClientMockDaemonHostResults
	Counter uint64
}

// CommonAPIClientMockDaemonHostResults contains results of the CommonAPIClient.DaemonHost
type CommonAPIClientMockDaemonHostResults struct {
	s1 string
}

// Expect sets up expected params for CommonAPIClient.DaemonHost
func (mmDaemonHost *mCommonAPIClientMockDaemonHost) Expect() *mCommonAPIClientMockDaemonHost {
	if mmDaemonHost.mock.funcDaemonHost != nil {
		mmDaemonHost.mock.t.Fatalf("CommonAPIClientMock.DaemonHost mock is already set by Set")
	}

	if mmDaemonHost.defaultExpectation == nil {
		mmDaemonHost.defaultExpectation = &CommonAPIClientMockDaemonHostExpectation{}
	}

	return mmDaemonHost
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.DaemonHost
func (mmDaemonHost *mCommonAPIClientMockDaemonHost) Inspect(f func()) *mCommonAPIClientMockDaemonHost {
	if mmDaemonHost.mock.inspectFuncDaemonHost != nil {
		mmDaemonHost.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.DaemonHost")
	}

	mmDaemonHost.mock.inspectFuncDaemonHost = f

	return mmDaemonHost
}

// Return sets up results that will be returned by CommonAPIClient.DaemonHost
func (mmDaemonHost *mCommonAPIClientMockDaemonHost) Return(s1 string) *CommonAPIClientMock {
	if mmDaemonHost.mock.funcDaemonHost != nil {
		mmDaemonHost.mock.t.Fatalf("CommonAPIClientMock.DaemonHost mock is already set by Set")
	}

	if mmDaemonHost.defaultExpectation == nil {
		mmDaemonHost.defaultExpectation = &CommonAPIClientMockDaemonHostExpectation{mock: mmDaemonHost.mock}
	}
	mmDaemonHost.defaultExpectation.results = &CommonAPIClientMockDaemonHostResults{s1}
	return mmDaemonHost.mock
}

//Set uses given function f to mock the CommonAPIClient.DaemonHost method
func (mmDaemonHost *mCommonAPIClientMockDaemonHost) Set(f func() (s1 string)) *CommonAPIClientMock {
	if mmDaemonHost.defaultExpectation != nil {
		mmDaemonHost.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.DaemonHost method")
	}

	if len(mmDaemonHost.expectations) > 0 {
		mmDaemonHost.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.DaemonHost method")
	}

	mmDaemonHost.mock.funcDaemonHost = f
	return mmDaemonHost.mock
}

// DaemonHost implements client.CommonAPIClient
func (mmDaemonHost *CommonAPIClientMock) DaemonHost() (s1 string) {
	mm_atomic.AddUint64(&mmDaemonHost.beforeDaemonHostCounter, 1)
	defer mm_atomic.AddUint64(&mmDaemonHost.afterDaemonHostCounter, 1)

	if mmDaemonHost.inspectFuncDaemonHost != nil {
		mmDaemonHost.inspectFuncDaemonHost()
	}

	if mmDaemonHost.DaemonHostMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDaemonHost.DaemonHostMock.defaultExpectation.Counter, 1)

		mm_results := mmDaemonHost.DaemonHostMock.defaultExpectation.results
		if mm_results == nil {
			mmDaemonHost.t.Fatal("No results are set for the CommonAPIClientMock.DaemonHost")
		}
		return (*mm_results).s1
	}
	if mmDaemonHost.funcDaemonHost != nil {
		return mmDaemonHost.funcDaemonHost()
	}
	mmDaemonHost.t.Fatalf("Unexpected call to CommonAPIClientMock.DaemonHost.")
	return
}

// DaemonHostAfterCounter returns a count of finished CommonAPIClientMock.DaemonHost invocations
func (mmDaemonHost *CommonAPIClientMock) DaemonHostAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDaemonHost.afterDaemonHostCounter)
}

// DaemonHostBeforeCounter returns a count of CommonAPIClientMock.DaemonHost invocations
func (mmDaemonHost *CommonAPIClientMock) DaemonHostBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDaemonHost.beforeDaemonHostCounter)
}

// MinimockDaemonHostDone returns true if the count of the DaemonHost invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockDaemonHostDone() bool {
	for _, e := range m.DaemonHostMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DaemonHostMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDaemonHostCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDaemonHost != nil && mm_atomic.LoadUint64(&m.afterDaemonHostCounter) < 1 {
		return false
	}
	return true
}

// MinimockDaemonHostInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockDaemonHostInspect() {
	for _, e := range m.DaemonHostMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CommonAPIClientMock.DaemonHost")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DaemonHostMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDaemonHostCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.DaemonHost")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDaemonHost != nil && mm_atomic.LoadUint64(&m.afterDaemonHostCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.DaemonHost")
	}
}

type mCommonAPIClientMockDialHijack struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockDialHijackExpectation
	expectations       []*CommonAPIClientMockDialHijackExpectation

	callArgs []*CommonAPIClientMockDialHijackParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockDialHijackExpectation specifies expectation struct of the CommonAPIClient.DialHijack
type CommonAPIClientMockDialHijackExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockDialHijackParams
	results *CommonAPIClientMockDialHijackResults
	Counter uint64
}

// CommonAPIClientMockDialHijackParams contains parameters of the CommonAPIClient.DialHijack
type CommonAPIClientMockDialHijackParams struct {
	ctx   context.Context
	url   string
	proto string
	meta  map[string][]string
}

// CommonAPIClientMockDialHijackResults contains results of the CommonAPIClient.DialHijack
type CommonAPIClientMockDialHijackResults struct {
	c2  net.Conn
	err error
}

// Expect sets up expected params for CommonAPIClient.DialHijack
func (mmDialHijack *mCommonAPIClientMockDialHijack) Expect(ctx context.Context, url string, proto string, meta map[string][]string) *mCommonAPIClientMockDialHijack {
	if mmDialHijack.mock.funcDialHijack != nil {
		mmDialHijack.mock.t.Fatalf("CommonAPIClientMock.DialHijack mock is already set by Set")
	}

	if mmDialHijack.defaultExpectation == nil {
		mmDialHijack.defaultExpectation = &CommonAPIClientMockDialHijackExpectation{}
	}

	mmDialHijack.defaultExpectation.params = &CommonAPIClientMockDialHijackParams{ctx, url, proto, meta}
	for _, e := range mmDialHijack.expectations {
		if minimock.Equal(e.params, mmDialHijack.defaultExpectation.params) {
			mmDialHijack.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDialHijack.defaultExpectation.params)
		}
	}

	return mmDialHijack
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.DialHijack
func (mmDialHijack *mCommonAPIClientMockDialHijack) Inspect(f func(ctx context.Context, url string, proto string, meta map[string][]string)) *mCommonAPIClientMockDialHijack {
	if mmDialHijack.mock.inspectFuncDialHijack != nil {
		mmDialHijack.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.DialHijack")
	}

	mmDialHijack.mock.inspectFuncDialHijack = f

	return mmDialHijack
}

// Return sets up results that will be returned by CommonAPIClient.DialHijack
func (mmDialHijack *mCommonAPIClientMockDialHijack) Return(c2 net.Conn, err error) *CommonAPIClientMock {
	if mmDialHijack.mock.funcDialHijack != nil {
		mmDialHijack.mock.t.Fatalf("CommonAPIClientMock.DialHijack mock is already set by Set")
	}

	if mmDialHijack.defaultExpectation == nil {
		mmDialHijack.defaultExpectation = &CommonAPIClientMockDialHijackExpectation{mock: mmDialHijack.mock}
	}
	mmDialHijack.defaultExpectation.results = &CommonAPIClientMockDialHijackResults{c2, err}
	return mmDialHijack.mock
}

//Set uses given function f to mock the CommonAPIClient.DialHijack method
func (mmDialHijack *mCommonAPIClientMockDialHijack) Set(f func(ctx context.Context, url string, proto string, meta map[string][]string) (c2 net.Conn, err error)) *CommonAPIClientMock {
	if mmDialHijack.defaultExpectation != nil {
		mmDialHijack.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.DialHijack method")
	}

	if len(mmDialHijack.expectations) > 0 {
		mmDialHijack.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.DialHijack method")
	}

	mmDialHijack.mock.funcDialHijack = f
	return mmDialHijack.mock
}

// When sets expectation for the CommonAPIClient.DialHijack which will trigger the result defined by the following
// Then helper
func (mmDialHijack *mCommonAPIClientMockDialHijack) When(ctx context.Context, url string, proto string, meta map[string][]string) *CommonAPIClientMockDialHijackExpectation {
	if mmDialHijack.mock.funcDialHijack != nil {
		mmDialHijack.mock.t.Fatalf("CommonAPIClientMock.DialHijack mock is already set by Set")
	}

	expectation := &CommonAPIClientMockDialHijackExpectation{
		mock:   mmDialHijack.mock,
		params: &CommonAPIClientMockDialHijackParams{ctx, url, proto, meta},
	}
	mmDialHijack.expectations = append(mmDialHijack.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.DialHijack return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockDialHijackExpectation) Then(c2 net.Conn, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockDialHijackResults{c2, err}
	return e.mock
}

// DialHijack implements client.CommonAPIClient
func (mmDialHijack *CommonAPIClientMock) DialHijack(ctx context.Context, url string, proto string, meta map[string][]string) (c2 net.Conn, err error) {
	mm_atomic.AddUint64(&mmDialHijack.beforeDialHijackCounter, 1)
	defer mm_atomic.AddUint64(&mmDialHijack.afterDialHijackCounter, 1)

	if mmDialHijack.inspectFuncDialHijack != nil {
		mmDialHijack.inspectFuncDialHijack(ctx, url, proto, meta)
	}

	mm_params := &CommonAPIClientMockDialHijackParams{ctx, url, proto, meta}

	// Record call args
	mmDialHijack.DialHijackMock.mutex.Lock()
	mmDialHijack.DialHijackMock.callArgs = append(mmDialHijack.DialHijackMock.callArgs, mm_params)
	mmDialHijack.DialHijackMock.mutex.Unlock()

	for _, e := range mmDialHijack.DialHijackMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.c2, e.results.err
		}
	}

	if mmDialHijack.DialHijackMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDialHijack.DialHijackMock.defaultExpectation.Counter, 1)
		mm_want := mmDialHijack.DialHijackMock.defaultExpectation.params
		mm_got := CommonAPIClientMockDialHijackParams{ctx, url, proto, meta}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDialHijack.t.Errorf("CommonAPIClientMock.DialHijack got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDialHijack.DialHijackMock.defaultExpectation.results
		if mm_results == nil {
			mmDialHijack.t.Fatal("No results are set for the CommonAPIClientMock.DialHijack")
		}
		return (*mm_results).c2, (*mm_results).err
	}
	if mmDialHijack.funcDialHijack != nil {
		return mmDialHijack.funcDialHijack(ctx, url, proto, meta)
	}
	mmDialHijack.t.Fatalf("Unexpected call to CommonAPIClientMock.DialHijack. %v %v %v %v", ctx, url, proto, meta)
	return
}

// DialHijackAfterCounter returns a count of finished CommonAPIClientMock.DialHijack invocations
func (mmDialHijack *CommonAPIClientMock) DialHijackAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDialHijack.afterDialHijackCounter)
}

// DialHijackBeforeCounter returns a count of CommonAPIClientMock.DialHijack invocations
func (mmDialHijack *CommonAPIClientMock) DialHijackBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDialHijack.beforeDialHijackCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.DialHijack.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDialHijack *mCommonAPIClientMockDialHijack) Calls() []*CommonAPIClientMockDialHijackParams {
	mmDialHijack.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockDialHijackParams, len(mmDialHijack.callArgs))
	copy(argCopy, mmDialHijack.callArgs)

	mmDialHijack.mutex.RUnlock()

	return argCopy
}

// MinimockDialHijackDone returns true if the count of the DialHijack invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockDialHijackDone() bool {
	for _, e := range m.DialHijackMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DialHijackMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDialHijackCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDialHijack != nil && mm_atomic.LoadUint64(&m.afterDialHijackCounter) < 1 {
		return false
	}
	return true
}

// MinimockDialHijackInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockDialHijackInspect() {
	for _, e := range m.DialHijackMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.DialHijack with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DialHijackMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDialHijackCounter) < 1 {
		if m.DialHijackMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.DialHijack")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.DialHijack with params: %#v", *m.DialHijackMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDialHijack != nil && mm_atomic.LoadUint64(&m.afterDialHijackCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.DialHijack")
	}
}

type mCommonAPIClientMockDialer struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockDialerExpectation
	expectations       []*CommonAPIClientMockDialerExpectation
}

// CommonAPIClientMockDialerExpectation specifies expectation struct of the CommonAPIClient.Dialer
type CommonAPIClientMockDialerExpectation struct {
	mock *CommonAPIClientMock

	results *CommonAPIClientMockDialerResults
	Counter uint64
}

// CommonAPIClientMockDialerResults contains results of the CommonAPIClient.Dialer
type CommonAPIClientMockDialerResults struct {
	f1 func(context.Context) (net.Conn, error)
}

// Expect sets up expected params for CommonAPIClient.Dialer
func (mmDialer *mCommonAPIClientMockDialer) Expect() *mCommonAPIClientMockDialer {
	if mmDialer.mock.funcDialer != nil {
		mmDialer.mock.t.Fatalf("CommonAPIClientMock.Dialer mock is already set by Set")
	}

	if mmDialer.defaultExpectation == nil {
		mmDialer.defaultExpectation = &CommonAPIClientMockDialerExpectation{}
	}

	return mmDialer
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.Dialer
func (mmDialer *mCommonAPIClientMockDialer) Inspect(f func()) *mCommonAPIClientMockDialer {
	if mmDialer.mock.inspectFuncDialer != nil {
		mmDialer.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.Dialer")
	}

	mmDialer.mock.inspectFuncDialer = f

	return mmDialer
}

// Return sets up results that will be returned by CommonAPIClient.Dialer
func (mmDialer *mCommonAPIClientMockDialer) Return(f1 func(context.Context) (net.Conn, error)) *CommonAPIClientMock {
	if mmDialer.mock.funcDialer != nil {
		mmDialer.mock.t.Fatalf("CommonAPIClientMock.Dialer mock is already set by Set")
	}

	if mmDialer.defaultExpectation == nil {
		mmDialer.defaultExpectation = &CommonAPIClientMockDialerExpectation{mock: mmDialer.mock}
	}
	mmDialer.defaultExpectation.results = &CommonAPIClientMockDialerResults{f1}
	return mmDialer.mock
}

//Set uses given function f to mock the CommonAPIClient.Dialer method
func (mmDialer *mCommonAPIClientMockDialer) Set(f func() (f1 func(context.Context) (net.Conn, error))) *CommonAPIClientMock {
	if mmDialer.defaultExpectation != nil {
		mmDialer.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.Dialer method")
	}

	if len(mmDialer.expectations) > 0 {
		mmDialer.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.Dialer method")
	}

	mmDialer.mock.funcDialer = f
	return mmDialer.mock
}

// Dialer implements client.CommonAPIClient
func (mmDialer *CommonAPIClientMock) Dialer() (f1 func(context.Context) (net.Conn, error)) {
	mm_atomic.AddUint64(&mmDialer.beforeDialerCounter, 1)
	defer mm_atomic.AddUint64(&mmDialer.afterDialerCounter, 1)

	if mmDialer.inspectFuncDialer != nil {
		mmDialer.inspectFuncDialer()
	}

	if mmDialer.DialerMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDialer.DialerMock.defaultExpectation.Counter, 1)

		mm_results := mmDialer.DialerMock.defaultExpectation.results
		if mm_results == nil {
			mmDialer.t.Fatal("No results are set for the CommonAPIClientMock.Dialer")
		}
		return (*mm_results).f1
	}
	if mmDialer.funcDialer != nil {
		return mmDialer.funcDialer()
	}
	mmDialer.t.Fatalf("Unexpected call to CommonAPIClientMock.Dialer.")
	return
}

// DialerAfterCounter returns a count of finished CommonAPIClientMock.Dialer invocations
func (mmDialer *CommonAPIClientMock) DialerAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDialer.afterDialerCounter)
}

// DialerBeforeCounter returns a count of CommonAPIClientMock.Dialer invocations
func (mmDialer *CommonAPIClientMock) DialerBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDialer.beforeDialerCounter)
}

// MinimockDialerDone returns true if the count of the Dialer invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockDialerDone() bool {
	for _, e := range m.DialerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DialerMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDialerCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDialer != nil && mm_atomic.LoadUint64(&m.afterDialerCounter) < 1 {
		return false
	}
	return true
}

// MinimockDialerInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockDialerInspect() {
	for _, e := range m.DialerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CommonAPIClientMock.Dialer")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DialerMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDialerCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.Dialer")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDialer != nil && mm_atomic.LoadUint64(&m.afterDialerCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.Dialer")
	}
}

type mCommonAPIClientMockDiskUsage struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockDiskUsageExpectation
	expectations       []*CommonAPIClientMockDiskUsageExpectation

	callArgs []*CommonAPIClientMockDiskUsageParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockDiskUsageExpectation specifies expectation struct of the CommonAPIClient.DiskUsage
type CommonAPIClientMockDiskUsageExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockDiskUsageParams
	results *CommonAPIClientMockDiskUsageResults
	Counter uint64
}

// CommonAPIClientMockDiskUsageParams contains parameters of the CommonAPIClient.DiskUsage
type CommonAPIClientMockDiskUsageParams struct {
	ctx context.Context
}

// CommonAPIClientMockDiskUsageResults contains results of the CommonAPIClient.DiskUsage
type CommonAPIClientMockDiskUsageResults struct {
	d1  types.DiskUsage
	err error
}

// Expect sets up expected params for CommonAPIClient.DiskUsage
func (mmDiskUsage *mCommonAPIClientMockDiskUsage) Expect(ctx context.Context) *mCommonAPIClientMockDiskUsage {
	if mmDiskUsage.mock.funcDiskUsage != nil {
		mmDiskUsage.mock.t.Fatalf("CommonAPIClientMock.DiskUsage mock is already set by Set")
	}

	if mmDiskUsage.defaultExpectation == nil {
		mmDiskUsage.defaultExpectation = &CommonAPIClientMockDiskUsageExpectation{}
	}

	mmDiskUsage.defaultExpectation.params = &CommonAPIClientMockDiskUsageParams{ctx}
	for _, e := range mmDiskUsage.expectations {
		if minimock.Equal(e.params, mmDiskUsage.defaultExpectation.params) {
			mmDiskUsage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDiskUsage.defaultExpectation.params)
		}
	}

	return mmDiskUsage
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.DiskUsage
func (mmDiskUsage *mCommonAPIClientMockDiskUsage) Inspect(f func(ctx context.Context)) *mCommonAPIClientMockDiskUsage {
	if mmDiskUsage.mock.inspectFuncDiskUsage != nil {
		mmDiskUsage.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.DiskUsage")
	}

	mmDiskUsage.mock.inspectFuncDiskUsage = f

	return mmDiskUsage
}

// Return sets up results that will be returned by CommonAPIClient.DiskUsage
func (mmDiskUsage *mCommonAPIClientMockDiskUsage) Return(d1 types.DiskUsage, err error) *CommonAPIClientMock {
	if mmDiskUsage.mock.funcDiskUsage != nil {
		mmDiskUsage.mock.t.Fatalf("CommonAPIClientMock.DiskUsage mock is already set by Set")
	}

	if mmDiskUsage.defaultExpectation == nil {
		mmDiskUsage.defaultExpectation = &CommonAPIClientMockDiskUsageExpectation{mock: mmDiskUsage.mock}
	}
	mmDiskUsage.defaultExpectation.results = &CommonAPIClientMockDiskUsageResults{d1, err}
	return mmDiskUsage.mock
}

//Set uses given function f to mock the CommonAPIClient.DiskUsage method
func (mmDiskUsage *mCommonAPIClientMockDiskUsage) Set(f func(ctx context.Context) (d1 types.DiskUsage, err error)) *CommonAPIClientMock {
	if mmDiskUsage.defaultExpectation != nil {
		mmDiskUsage.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.DiskUsage method")
	}

	if len(mmDiskUsage.expectations) > 0 {
		mmDiskUsage.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.DiskUsage method")
	}

	mmDiskUsage.mock.funcDiskUsage = f
	return mmDiskUsage.mock
}

// When sets expectation for the CommonAPIClient.DiskUsage which will trigger the result defined by the following
// Then helper
func (mmDiskUsage *mCommonAPIClientMockDiskUsage) When(ctx context.Context) *CommonAPIClientMockDiskUsageExpectation {
	if mmDiskUsage.mock.funcDiskUsage != nil {
		mmDiskUsage.mock.t.Fatalf("CommonAPIClientMock.DiskUsage mock is already set by Set")
	}

	expectation := &CommonAPIClientMockDiskUsageExpectation{
		mock:   mmDiskUsage.mock,
		params: &CommonAPIClientMockDiskUsageParams{ctx},
	}
	mmDiskUsage.expectations = append(mmDiskUsage.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.DiskUsage return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockDiskUsageExpectation) Then(d1 types.DiskUsage, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockDiskUsageResults{d1, err}
	return e.mock
}

// DiskUsage implements client.CommonAPIClient
func (mmDiskUsage *CommonAPIClientMock) DiskUsage(ctx context.Context) (d1 types.DiskUsage, err error) {
	mm_atomic.AddUint64(&mmDiskUsage.beforeDiskUsageCounter, 1)
	defer mm_atomic.AddUint64(&mmDiskUsage.afterDiskUsageCounter, 1)

	if mmDiskUsage.inspectFuncDiskUsage != nil {
		mmDiskUsage.inspectFuncDiskUsage(ctx)
	}

	mm_params := &CommonAPIClientMockDiskUsageParams{ctx}

	// Record call args
	mmDiskUsage.DiskUsageMock.mutex.Lock()
	mmDiskUsage.DiskUsageMock.callArgs = append(mmDiskUsage.DiskUsageMock.callArgs, mm_params)
	mmDiskUsage.DiskUsageMock.mutex.Unlock()

	for _, e := range mmDiskUsage.DiskUsageMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.d1, e.results.err
		}
	}

	if mmDiskUsage.DiskUsageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDiskUsage.DiskUsageMock.defaultExpectation.Counter, 1)
		mm_want := mmDiskUsage.DiskUsageMock.defaultExpectation.params
		mm_got := CommonAPIClientMockDiskUsageParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDiskUsage.t.Errorf("CommonAPIClientMock.DiskUsage got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDiskUsage.DiskUsageMock.defaultExpectation.results
		if mm_results == nil {
			mmDiskUsage.t.Fatal("No results are set for the CommonAPIClientMock.DiskUsage")
		}
		return (*mm_results).d1, (*mm_results).err
	}
	if mmDiskUsage.funcDiskUsage != nil {
		return mmDiskUsage.funcDiskUsage(ctx)
	}
	mmDiskUsage.t.Fatalf("Unexpected call to CommonAPIClientMock.DiskUsage. %v", ctx)
	return
}

// DiskUsageAfterCounter returns a count of finished CommonAPIClientMock.DiskUsage invocations
func (mmDiskUsage *CommonAPIClientMock) DiskUsageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDiskUsage.afterDiskUsageCounter)
}

// DiskUsageBeforeCounter returns a count of CommonAPIClientMock.DiskUsage invocations
func (mmDiskUsage *CommonAPIClientMock) DiskUsageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDiskUsage.beforeDiskUsageCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.DiskUsage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDiskUsage *mCommonAPIClientMockDiskUsage) Calls() []*CommonAPIClientMockDiskUsageParams {
	mmDiskUsage.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockDiskUsageParams, len(mmDiskUsage.callArgs))
	copy(argCopy, mmDiskUsage.callArgs)

	mmDiskUsage.mutex.RUnlock()

	return argCopy
}

// MinimockDiskUsageDone returns true if the count of the DiskUsage invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockDiskUsageDone() bool {
	for _, e := range m.DiskUsageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DiskUsageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDiskUsageCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDiskUsage != nil && mm_atomic.LoadUint64(&m.afterDiskUsageCounter) < 1 {
		return false
	}
	return true
}

// MinimockDiskUsageInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockDiskUsageInspect() {
	for _, e := range m.DiskUsageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.DiskUsage with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DiskUsageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDiskUsageCounter) < 1 {
		if m.DiskUsageMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.DiskUsage")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.DiskUsage with params: %#v", *m.DiskUsageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDiskUsage != nil && mm_atomic.LoadUint64(&m.afterDiskUsageCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.DiskUsage")
	}
}

type mCommonAPIClientMockDistributionInspect struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockDistributionInspectExpectation
	expectations       []*CommonAPIClientMockDistributionInspectExpectation

	callArgs []*CommonAPIClientMockDistributionInspectParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockDistributionInspectExpectation specifies expectation struct of the CommonAPIClient.DistributionInspect
type CommonAPIClientMockDistributionInspectExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockDistributionInspectParams
	results *CommonAPIClientMockDistributionInspectResults
	Counter uint64
}

// CommonAPIClientMockDistributionInspectParams contains parameters of the CommonAPIClient.DistributionInspect
type CommonAPIClientMockDistributionInspectParams struct {
	ctx                 context.Context
	image               string
	encodedRegistryAuth string
}

// CommonAPIClientMockDistributionInspectResults contains results of the CommonAPIClient.DistributionInspect
type CommonAPIClientMockDistributionInspectResults struct {
	d1  registry.DistributionInspect
	err error
}

// Expect sets up expected params for CommonAPIClient.DistributionInspect
func (mmDistributionInspect *mCommonAPIClientMockDistributionInspect) Expect(ctx context.Context, image string, encodedRegistryAuth string) *mCommonAPIClientMockDistributionInspect {
	if mmDistributionInspect.mock.funcDistributionInspect != nil {
		mmDistributionInspect.mock.t.Fatalf("CommonAPIClientMock.DistributionInspect mock is already set by Set")
	}

	if mmDistributionInspect.defaultExpectation == nil {
		mmDistributionInspect.defaultExpectation = &CommonAPIClientMockDistributionInspectExpectation{}
	}

	mmDistributionInspect.defaultExpectation.params = &CommonAPIClientMockDistributionInspectParams{ctx, image, encodedRegistryAuth}
	for _, e := range mmDistributionInspect.expectations {
		if minimock.Equal(e.params, mmDistributionInspect.defaultExpectation.params) {
			mmDistributionInspect.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDistributionInspect.defaultExpectation.params)
		}
	}

	return mmDistributionInspect
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.DistributionInspect
func (mmDistributionInspect *mCommonAPIClientMockDistributionInspect) Inspect(f func(ctx context.Context, image string, encodedRegistryAuth string)) *mCommonAPIClientMockDistributionInspect {
	if mmDistributionInspect.mock.inspectFuncDistributionInspect != nil {
		mmDistributionInspect.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.DistributionInspect")
	}

	mmDistributionInspect.mock.inspectFuncDistributionInspect = f

	return mmDistributionInspect
}

// Return sets up results that will be returned by CommonAPIClient.DistributionInspect
func (mmDistributionInspect *mCommonAPIClientMockDistributionInspect) Return(d1 registry.DistributionInspect, err error) *CommonAPIClientMock {
	if mmDistributionInspect.mock.funcDistributionInspect != nil {
		mmDistributionInspect.mock.t.Fatalf("CommonAPIClientMock.DistributionInspect mock is already set by Set")
	}

	if mmDistributionInspect.defaultExpectation == nil {
		mmDistributionInspect.defaultExpectation = &CommonAPIClientMockDistributionInspectExpectation{mock: mmDistributionInspect.mock}
	}
	mmDistributionInspect.defaultExpectation.results = &CommonAPIClientMockDistributionInspectResults{d1, err}
	return mmDistributionInspect.mock
}

//Set uses given function f to mock the CommonAPIClient.DistributionInspect method
func (mmDistributionInspect *mCommonAPIClientMockDistributionInspect) Set(f func(ctx context.Context, image string, encodedRegistryAuth string) (d1 registry.DistributionInspect, err error)) *CommonAPIClientMock {
	if mmDistributionInspect.defaultExpectation != nil {
		mmDistributionInspect.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.DistributionInspect method")
	}

	if len(mmDistributionInspect.expectations) > 0 {
		mmDistributionInspect.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.DistributionInspect method")
	}

	mmDistributionInspect.mock.funcDistributionInspect = f
	return mmDistributionInspect.mock
}

// When sets expectation for the CommonAPIClient.DistributionInspect which will trigger the result defined by the following
// Then helper
func (mmDistributionInspect *mCommonAPIClientMockDistributionInspect) When(ctx context.Context, image string, encodedRegistryAuth string) *CommonAPIClientMockDistributionInspectExpectation {
	if mmDistributionInspect.mock.funcDistributionInspect != nil {
		mmDistributionInspect.mock.t.Fatalf("CommonAPIClientMock.DistributionInspect mock is already set by Set")
	}

	expectation := &CommonAPIClientMockDistributionInspectExpectation{
		mock:   mmDistributionInspect.mock,
		params: &CommonAPIClientMockDistributionInspectParams{ctx, image, encodedRegistryAuth},
	}
	mmDistributionInspect.expectations = append(mmDistributionInspect.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.DistributionInspect return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockDistributionInspectExpectation) Then(d1 registry.DistributionInspect, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockDistributionInspectResults{d1, err}
	return e.mock
}

// DistributionInspect implements client.CommonAPIClient
func (mmDistributionInspect *CommonAPIClientMock) DistributionInspect(ctx context.Context, image string, encodedRegistryAuth string) (d1 registry.DistributionInspect, err error) {
	mm_atomic.AddUint64(&mmDistributionInspect.beforeDistributionInspectCounter, 1)
	defer mm_atomic.AddUint64(&mmDistributionInspect.afterDistributionInspectCounter, 1)

	if mmDistributionInspect.inspectFuncDistributionInspect != nil {
		mmDistributionInspect.inspectFuncDistributionInspect(ctx, image, encodedRegistryAuth)
	}

	mm_params := &CommonAPIClientMockDistributionInspectParams{ctx, image, encodedRegistryAuth}

	// Record call args
	mmDistributionInspect.DistributionInspectMock.mutex.Lock()
	mmDistributionInspect.DistributionInspectMock.callArgs = append(mmDistributionInspect.DistributionInspectMock.callArgs, mm_params)
	mmDistributionInspect.DistributionInspectMock.mutex.Unlock()

	for _, e := range mmDistributionInspect.DistributionInspectMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.d1, e.results.err
		}
	}

	if mmDistributionInspect.DistributionInspectMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDistributionInspect.DistributionInspectMock.defaultExpectation.Counter, 1)
		mm_want := mmDistributionInspect.DistributionInspectMock.defaultExpectation.params
		mm_got := CommonAPIClientMockDistributionInspectParams{ctx, image, encodedRegistryAuth}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDistributionInspect.t.Errorf("CommonAPIClientMock.DistributionInspect got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDistributionInspect.DistributionInspectMock.defaultExpectation.results
		if mm_results == nil {
			mmDistributionInspect.t.Fatal("No results are set for the CommonAPIClientMock.DistributionInspect")
		}
		return (*mm_results).d1, (*mm_results).err
	}
	if mmDistributionInspect.funcDistributionInspect != nil {
		return mmDistributionInspect.funcDistributionInspect(ctx, image, encodedRegistryAuth)
	}
	mmDistributionInspect.t.Fatalf("Unexpected call to CommonAPIClientMock.DistributionInspect. %v %v %v", ctx, image, encodedRegistryAuth)
	return
}

// DistributionInspectAfterCounter returns a count of finished CommonAPIClientMock.DistributionInspect invocations
func (mmDistributionInspect *CommonAPIClientMock) DistributionInspectAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDistributionInspect.afterDistributionInspectCounter)
}

// DistributionInspectBeforeCounter returns a count of CommonAPIClientMock.DistributionInspect invocations
func (mmDistributionInspect *CommonAPIClientMock) DistributionInspectBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDistributionInspect.beforeDistributionInspectCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.DistributionInspect.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDistributionInspect *mCommonAPIClientMockDistributionInspect) Calls() []*CommonAPIClientMockDistributionInspectParams {
	mmDistributionInspect.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockDistributionInspectParams, len(mmDistributionInspect.callArgs))
	copy(argCopy, mmDistributionInspect.callArgs)

	mmDistributionInspect.mutex.RUnlock()

	return argCopy
}

// MinimockDistributionInspectDone returns true if the count of the DistributionInspect invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockDistributionInspectDone() bool {
	for _, e := range m.DistributionInspectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DistributionInspectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDistributionInspectCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDistributionInspect != nil && mm_atomic.LoadUint64(&m.afterDistributionInspectCounter) < 1 {
		return false
	}
	return true
}

// MinimockDistributionInspectInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockDistributionInspectInspect() {
	for _, e := range m.DistributionInspectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.DistributionInspect with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DistributionInspectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDistributionInspectCounter) < 1 {
		if m.DistributionInspectMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.DistributionInspect")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.DistributionInspect with params: %#v", *m.DistributionInspectMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDistributionInspect != nil && mm_atomic.LoadUint64(&m.afterDistributionInspectCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.DistributionInspect")
	}
}

type mCommonAPIClientMockEvents struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockEventsExpectation
	expectations       []*CommonAPIClientMockEventsExpectation

	callArgs []*CommonAPIClientMockEventsParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockEventsExpectation specifies expectation struct of the CommonAPIClient.Events
type CommonAPIClientMockEventsExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockEventsParams
	results *CommonAPIClientMockEventsResults
	Counter uint64
}

// CommonAPIClientMockEventsParams contains parameters of the CommonAPIClient.Events
type CommonAPIClientMockEventsParams struct {
	ctx     context.Context
	options types.EventsOptions
}

// CommonAPIClientMockEventsResults contains results of the CommonAPIClient.Events
type CommonAPIClientMockEventsResults struct {
	ch1 <-chan events.Message
	ch2 <-chan error
}

// Expect sets up expected params for CommonAPIClient.Events
func (mmEvents *mCommonAPIClientMockEvents) Expect(ctx context.Context, options types.EventsOptions) *mCommonAPIClientMockEvents {
	if mmEvents.mock.funcEvents != nil {
		mmEvents.mock.t.Fatalf("CommonAPIClientMock.Events mock is already set by Set")
	}

	if mmEvents.defaultExpectation == nil {
		mmEvents.defaultExpectation = &CommonAPIClientMockEventsExpectation{}
	}

	mmEvents.defaultExpectation.params = &CommonAPIClientMockEventsParams{ctx, options}
	for _, e := range mmEvents.expectations {
		if minimock.Equal(e.params, mmEvents.defaultExpectation.params) {
			mmEvents.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmEvents.defaultExpectation.params)
		}
	}

	return mmEvents
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.Events
func (mmEvents *mCommonAPIClientMockEvents) Inspect(f func(ctx context.Context, options types.EventsOptions)) *mCommonAPIClientMockEvents {
	if mmEvents.mock.inspectFuncEvents != nil {
		mmEvents.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.Events")
	}

	mmEvents.mock.inspectFuncEvents = f

	return mmEvents
}

// Return sets up results that will be returned by CommonAPIClient.Events
func (mmEvents *mCommonAPIClientMockEvents) Return(ch1 <-chan events.Message, ch2 <-chan error) *CommonAPIClientMock {
	if mmEvents.mock.funcEvents != nil {
		mmEvents.mock.t.Fatalf("CommonAPIClientMock.Events mock is already set by Set")
	}

	if mmEvents.defaultExpectation == nil {
		mmEvents.defaultExpectation = &CommonAPIClientMockEventsExpectation{mock: mmEvents.mock}
	}
	mmEvents.defaultExpectation.results = &CommonAPIClientMockEventsResults{ch1, ch2}
	return mmEvents.mock
}

//Set uses given function f to mock the CommonAPIClient.Events method
func (mmEvents *mCommonAPIClientMockEvents) Set(f func(ctx context.Context, options types.EventsOptions) (ch1 <-chan events.Message, ch2 <-chan error)) *CommonAPIClientMock {
	if mmEvents.defaultExpectation != nil {
		mmEvents.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.Events method")
	}

	if len(mmEvents.expectations) > 0 {
		mmEvents.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.Events method")
	}

	mmEvents.mock.funcEvents = f
	return mmEvents.mock
}

// When sets expectation for the CommonAPIClient.Events which will trigger the result defined by the following
// Then helper
func (mmEvents *mCommonAPIClientMockEvents) When(ctx context.Context, options types.EventsOptions) *CommonAPIClientMockEventsExpectation {
	if mmEvents.mock.funcEvents != nil {
		mmEvents.mock.t.Fatalf("CommonAPIClientMock.Events mock is already set by Set")
	}

	expectation := &CommonAPIClientMockEventsExpectation{
		mock:   mmEvents.mock,
		params: &CommonAPIClientMockEventsParams{ctx, options},
	}
	mmEvents.expectations = append(mmEvents.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.Events return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockEventsExpectation) Then(ch1 <-chan events.Message, ch2 <-chan error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockEventsResults{ch1, ch2}
	return e.mock
}

// Events implements client.CommonAPIClient
func (mmEvents *CommonAPIClientMock) Events(ctx context.Context, options types.EventsOptions) (ch1 <-chan events.Message, ch2 <-chan error) {
	mm_atomic.AddUint64(&mmEvents.beforeEventsCounter, 1)
	defer mm_atomic.AddUint64(&mmEvents.afterEventsCounter, 1)

	if mmEvents.inspectFuncEvents != nil {
		mmEvents.inspectFuncEvents(ctx, options)
	}

	mm_params := &CommonAPIClientMockEventsParams{ctx, options}

	// Record call args
	mmEvents.EventsMock.mutex.Lock()
	mmEvents.EventsMock.callArgs = append(mmEvents.EventsMock.callArgs, mm_params)
	mmEvents.EventsMock.mutex.Unlock()

	for _, e := range mmEvents.EventsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ch1, e.results.ch2
		}
	}

	if mmEvents.EventsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmEvents.EventsMock.defaultExpectation.Counter, 1)
		mm_want := mmEvents.EventsMock.defaultExpectation.params
		mm_got := CommonAPIClientMockEventsParams{ctx, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmEvents.t.Errorf("CommonAPIClientMock.Events got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmEvents.EventsMock.defaultExpectation.results
		if mm_results == nil {
			mmEvents.t.Fatal("No results are set for the CommonAPIClientMock.Events")
		}
		return (*mm_results).ch1, (*mm_results).ch2
	}
	if mmEvents.funcEvents != nil {
		return mmEvents.funcEvents(ctx, options)
	}
	mmEvents.t.Fatalf("Unexpected call to CommonAPIClientMock.Events. %v %v", ctx, options)
	return
}

// EventsAfterCounter returns a count of finished CommonAPIClientMock.Events invocations
func (mmEvents *CommonAPIClientMock) EventsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmEvents.afterEventsCounter)
}

// EventsBeforeCounter returns a count of CommonAPIClientMock.Events invocations
func (mmEvents *CommonAPIClientMock) EventsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmEvents.beforeEventsCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.Events.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmEvents *mCommonAPIClientMockEvents) Calls() []*CommonAPIClientMockEventsParams {
	mmEvents.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockEventsParams, len(mmEvents.callArgs))
	copy(argCopy, mmEvents.callArgs)

	mmEvents.mutex.RUnlock()

	return argCopy
}

// MinimockEventsDone returns true if the count of the Events invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockEventsDone() bool {
	for _, e := range m.EventsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.EventsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterEventsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcEvents != nil && mm_atomic.LoadUint64(&m.afterEventsCounter) < 1 {
		return false
	}
	return true
}

// MinimockEventsInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockEventsInspect() {
	for _, e := range m.EventsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.Events with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.EventsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterEventsCounter) < 1 {
		if m.EventsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.Events")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.Events with params: %#v", *m.EventsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcEvents != nil && mm_atomic.LoadUint64(&m.afterEventsCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.Events")
	}
}

type mCommonAPIClientMockHTTPClient struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockHTTPClientExpectation
	expectations       []*CommonAPIClientMockHTTPClientExpectation
}

// CommonAPIClientMockHTTPClientExpectation specifies expectation struct of the CommonAPIClient.HTTPClient
type CommonAPIClientMockHTTPClientExpectation struct {
	mock *CommonAPIClientMock

	results *CommonAPIClientMockHTTPClientResults
	Counter uint64
}

// CommonAPIClientMockHTTPClientResults contains results of the CommonAPIClient.HTTPClient
type CommonAPIClientMockHTTPClientResults struct {
	cp1 *http.Client
}

// Expect sets up expected params for CommonAPIClient.HTTPClient
func (mmHTTPClient *mCommonAPIClientMockHTTPClient) Expect() *mCommonAPIClientMockHTTPClient {
	if mmHTTPClient.mock.funcHTTPClient != nil {
		mmHTTPClient.mock.t.Fatalf("CommonAPIClientMock.HTTPClient mock is already set by Set")
	}

	if mmHTTPClient.defaultExpectation == nil {
		mmHTTPClient.defaultExpectation = &CommonAPIClientMockHTTPClientExpectation{}
	}

	return mmHTTPClient
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.HTTPClient
func (mmHTTPClient *mCommonAPIClientMockHTTPClient) Inspect(f func()) *mCommonAPIClientMockHTTPClient {
	if mmHTTPClient.mock.inspectFuncHTTPClient != nil {
		mmHTTPClient.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.HTTPClient")
	}

	mmHTTPClient.mock.inspectFuncHTTPClient = f

	return mmHTTPClient
}

// Return sets up results that will be returned by CommonAPIClient.HTTPClient
func (mmHTTPClient *mCommonAPIClientMockHTTPClient) Return(cp1 *http.Client) *CommonAPIClientMock {
	if mmHTTPClient.mock.funcHTTPClient != nil {
		mmHTTPClient.mock.t.Fatalf("CommonAPIClientMock.HTTPClient mock is already set by Set")
	}

	if mmHTTPClient.defaultExpectation == nil {
		mmHTTPClient.defaultExpectation = &CommonAPIClientMockHTTPClientExpectation{mock: mmHTTPClient.mock}
	}
	mmHTTPClient.defaultExpectation.results = &CommonAPIClientMockHTTPClientResults{cp1}
	return mmHTTPClient.mock
}

//Set uses given function f to mock the CommonAPIClient.HTTPClient method
func (mmHTTPClient *mCommonAPIClientMockHTTPClient) Set(f func() (cp1 *http.Client)) *CommonAPIClientMock {
	if mmHTTPClient.defaultExpectation != nil {
		mmHTTPClient.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.HTTPClient method")
	}

	if len(mmHTTPClient.expectations) > 0 {
		mmHTTPClient.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.HTTPClient method")
	}

	mmHTTPClient.mock.funcHTTPClient = f
	return mmHTTPClient.mock
}

// HTTPClient implements client.CommonAPIClient
func (mmHTTPClient *CommonAPIClientMock) HTTPClient() (cp1 *http.Client) {
	mm_atomic.AddUint64(&mmHTTPClient.beforeHTTPClientCounter, 1)
	defer mm_atomic.AddUint64(&mmHTTPClient.afterHTTPClientCounter, 1)

	if mmHTTPClient.inspectFuncHTTPClient != nil {
		mmHTTPClient.inspectFuncHTTPClient()
	}

	if mmHTTPClient.HTTPClientMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmHTTPClient.HTTPClientMock.defaultExpectation.Counter, 1)

		mm_results := mmHTTPClient.HTTPClientMock.defaultExpectation.results
		if mm_results == nil {
			mmHTTPClient.t.Fatal("No results are set for the CommonAPIClientMock.HTTPClient")
		}
		return (*mm_results).cp1
	}
	if mmHTTPClient.funcHTTPClient != nil {
		return mmHTTPClient.funcHTTPClient()
	}
	mmHTTPClient.t.Fatalf("Unexpected call to CommonAPIClientMock.HTTPClient.")
	return
}

// HTTPClientAfterCounter returns a count of finished CommonAPIClientMock.HTTPClient invocations
func (mmHTTPClient *CommonAPIClientMock) HTTPClientAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHTTPClient.afterHTTPClientCounter)
}

// HTTPClientBeforeCounter returns a count of CommonAPIClientMock.HTTPClient invocations
func (mmHTTPClient *CommonAPIClientMock) HTTPClientBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHTTPClient.beforeHTTPClientCounter)
}

// MinimockHTTPClientDone returns true if the count of the HTTPClient invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockHTTPClientDone() bool {
	for _, e := range m.HTTPClientMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.HTTPClientMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterHTTPClientCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHTTPClient != nil && mm_atomic.LoadUint64(&m.afterHTTPClientCounter) < 1 {
		return false
	}
	return true
}

// MinimockHTTPClientInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockHTTPClientInspect() {
	for _, e := range m.HTTPClientMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CommonAPIClientMock.HTTPClient")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.HTTPClientMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterHTTPClientCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.HTTPClient")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHTTPClient != nil && mm_atomic.LoadUint64(&m.afterHTTPClientCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.HTTPClient")
	}
}

type mCommonAPIClientMockImageBuild struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockImageBuildExpectation
	expectations       []*CommonAPIClientMockImageBuildExpectation

	callArgs []*CommonAPIClientMockImageBuildParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockImageBuildExpectation specifies expectation struct of the CommonAPIClient.ImageBuild
type CommonAPIClientMockImageBuildExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockImageBuildParams
	results *CommonAPIClientMockImageBuildResults
	Counter uint64
}

// CommonAPIClientMockImageBuildParams contains parameters of the CommonAPIClient.ImageBuild
type CommonAPIClientMockImageBuildParams struct {
	ctx     context.Context
	context io.Reader
	options types.ImageBuildOptions
}

// CommonAPIClientMockImageBuildResults contains results of the CommonAPIClient.ImageBuild
type CommonAPIClientMockImageBuildResults struct {
	i1  types.ImageBuildResponse
	err error
}

// Expect sets up expected params for CommonAPIClient.ImageBuild
func (mmImageBuild *mCommonAPIClientMockImageBuild) Expect(ctx context.Context, context io.Reader, options types.ImageBuildOptions) *mCommonAPIClientMockImageBuild {
	if mmImageBuild.mock.funcImageBuild != nil {
		mmImageBuild.mock.t.Fatalf("CommonAPIClientMock.ImageBuild mock is already set by Set")
	}

	if mmImageBuild.defaultExpectation == nil {
		mmImageBuild.defaultExpectation = &CommonAPIClientMockImageBuildExpectation{}
	}

	mmImageBuild.defaultExpectation.params = &CommonAPIClientMockImageBuildParams{ctx, context, options}
	for _, e := range mmImageBuild.expectations {
		if minimock.Equal(e.params, mmImageBuild.defaultExpectation.params) {
			mmImageBuild.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmImageBuild.defaultExpectation.params)
		}
	}

	return mmImageBuild
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ImageBuild
func (mmImageBuild *mCommonAPIClientMockImageBuild) Inspect(f func(ctx context.Context, context io.Reader, options types.ImageBuildOptions)) *mCommonAPIClientMockImageBuild {
	if mmImageBuild.mock.inspectFuncImageBuild != nil {
		mmImageBuild.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ImageBuild")
	}

	mmImageBuild.mock.inspectFuncImageBuild = f

	return mmImageBuild
}

// Return sets up results that will be returned by CommonAPIClient.ImageBuild
func (mmImageBuild *mCommonAPIClientMockImageBuild) Return(i1 types.ImageBuildResponse, err error) *CommonAPIClientMock {
	if mmImageBuild.mock.funcImageBuild != nil {
		mmImageBuild.mock.t.Fatalf("CommonAPIClientMock.ImageBuild mock is already set by Set")
	}

	if mmImageBuild.defaultExpectation == nil {
		mmImageBuild.defaultExpectation = &CommonAPIClientMockImageBuildExpectation{mock: mmImageBuild.mock}
	}
	mmImageBuild.defaultExpectation.results = &CommonAPIClientMockImageBuildResults{i1, err}
	return mmImageBuild.mock
}

//Set uses given function f to mock the CommonAPIClient.ImageBuild method
func (mmImageBuild *mCommonAPIClientMockImageBuild) Set(f func(ctx context.Context, context io.Reader, options types.ImageBuildOptions) (i1 types.ImageBuildResponse, err error)) *CommonAPIClientMock {
	if mmImageBuild.defaultExpectation != nil {
		mmImageBuild.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ImageBuild method")
	}

	if len(mmImageBuild.expectations) > 0 {
		mmImageBuild.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ImageBuild method")
	}

	mmImageBuild.mock.funcImageBuild = f
	return mmImageBuild.mock
}

// When sets expectation for the CommonAPIClient.ImageBuild which will trigger the result defined by the following
// Then helper
func (mmImageBuild *mCommonAPIClientMockImageBuild) When(ctx context.Context, context io.Reader, options types.ImageBuildOptions) *CommonAPIClientMockImageBuildExpectation {
	if mmImageBuild.mock.funcImageBuild != nil {
		mmImageBuild.mock.t.Fatalf("CommonAPIClientMock.ImageBuild mock is already set by Set")
	}

	expectation := &CommonAPIClientMockImageBuildExpectation{
		mock:   mmImageBuild.mock,
		params: &CommonAPIClientMockImageBuildParams{ctx, context, options},
	}
	mmImageBuild.expectations = append(mmImageBuild.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ImageBuild return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockImageBuildExpectation) Then(i1 types.ImageBuildResponse, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockImageBuildResults{i1, err}
	return e.mock
}

// ImageBuild implements client.CommonAPIClient
func (mmImageBuild *CommonAPIClientMock) ImageBuild(ctx context.Context, context io.Reader, options types.ImageBuildOptions) (i1 types.ImageBuildResponse, err error) {
	mm_atomic.AddUint64(&mmImageBuild.beforeImageBuildCounter, 1)
	defer mm_atomic.AddUint64(&mmImageBuild.afterImageBuildCounter, 1)

	if mmImageBuild.inspectFuncImageBuild != nil {
		mmImageBuild.inspectFuncImageBuild(ctx, context, options)
	}

	mm_params := &CommonAPIClientMockImageBuildParams{ctx, context, options}

	// Record call args
	mmImageBuild.ImageBuildMock.mutex.Lock()
	mmImageBuild.ImageBuildMock.callArgs = append(mmImageBuild.ImageBuildMock.callArgs, mm_params)
	mmImageBuild.ImageBuildMock.mutex.Unlock()

	for _, e := range mmImageBuild.ImageBuildMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmImageBuild.ImageBuildMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmImageBuild.ImageBuildMock.defaultExpectation.Counter, 1)
		mm_want := mmImageBuild.ImageBuildMock.defaultExpectation.params
		mm_got := CommonAPIClientMockImageBuildParams{ctx, context, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmImageBuild.t.Errorf("CommonAPIClientMock.ImageBuild got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmImageBuild.ImageBuildMock.defaultExpectation.results
		if mm_results == nil {
			mmImageBuild.t.Fatal("No results are set for the CommonAPIClientMock.ImageBuild")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmImageBuild.funcImageBuild != nil {
		return mmImageBuild.funcImageBuild(ctx, context, options)
	}
	mmImageBuild.t.Fatalf("Unexpected call to CommonAPIClientMock.ImageBuild. %v %v %v", ctx, context, options)
	return
}

// ImageBuildAfterCounter returns a count of finished CommonAPIClientMock.ImageBuild invocations
func (mmImageBuild *CommonAPIClientMock) ImageBuildAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImageBuild.afterImageBuildCounter)
}

// ImageBuildBeforeCounter returns a count of CommonAPIClientMock.ImageBuild invocations
func (mmImageBuild *CommonAPIClientMock) ImageBuildBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImageBuild.beforeImageBuildCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ImageBuild.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmImageBuild *mCommonAPIClientMockImageBuild) Calls() []*CommonAPIClientMockImageBuildParams {
	mmImageBuild.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockImageBuildParams, len(mmImageBuild.callArgs))
	copy(argCopy, mmImageBuild.callArgs)

	mmImageBuild.mutex.RUnlock()

	return argCopy
}

// MinimockImageBuildDone returns true if the count of the ImageBuild invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockImageBuildDone() bool {
	for _, e := range m.ImageBuildMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImageBuildMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImageBuildCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImageBuild != nil && mm_atomic.LoadUint64(&m.afterImageBuildCounter) < 1 {
		return false
	}
	return true
}

// MinimockImageBuildInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockImageBuildInspect() {
	for _, e := range m.ImageBuildMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImageBuild with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImageBuildMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImageBuildCounter) < 1 {
		if m.ImageBuildMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ImageBuild")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImageBuild with params: %#v", *m.ImageBuildMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImageBuild != nil && mm_atomic.LoadUint64(&m.afterImageBuildCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ImageBuild")
	}
}

type mCommonAPIClientMockImageCreate struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockImageCreateExpectation
	expectations       []*CommonAPIClientMockImageCreateExpectation

	callArgs []*CommonAPIClientMockImageCreateParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockImageCreateExpectation specifies expectation struct of the CommonAPIClient.ImageCreate
type CommonAPIClientMockImageCreateExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockImageCreateParams
	results *CommonAPIClientMockImageCreateResults
	Counter uint64
}

// CommonAPIClientMockImageCreateParams contains parameters of the CommonAPIClient.ImageCreate
type CommonAPIClientMockImageCreateParams struct {
	ctx             context.Context
	parentReference string
	options         types.ImageCreateOptions
}

// CommonAPIClientMockImageCreateResults contains results of the CommonAPIClient.ImageCreate
type CommonAPIClientMockImageCreateResults struct {
	r1  io.ReadCloser
	err error
}

// Expect sets up expected params for CommonAPIClient.ImageCreate
func (mmImageCreate *mCommonAPIClientMockImageCreate) Expect(ctx context.Context, parentReference string, options types.ImageCreateOptions) *mCommonAPIClientMockImageCreate {
	if mmImageCreate.mock.funcImageCreate != nil {
		mmImageCreate.mock.t.Fatalf("CommonAPIClientMock.ImageCreate mock is already set by Set")
	}

	if mmImageCreate.defaultExpectation == nil {
		mmImageCreate.defaultExpectation = &CommonAPIClientMockImageCreateExpectation{}
	}

	mmImageCreate.defaultExpectation.params = &CommonAPIClientMockImageCreateParams{ctx, parentReference, options}
	for _, e := range mmImageCreate.expectations {
		if minimock.Equal(e.params, mmImageCreate.defaultExpectation.params) {
			mmImageCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmImageCreate.defaultExpectation.params)
		}
	}

	return mmImageCreate
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ImageCreate
func (mmImageCreate *mCommonAPIClientMockImageCreate) Inspect(f func(ctx context.Context, parentReference string, options types.ImageCreateOptions)) *mCommonAPIClientMockImageCreate {
	if mmImageCreate.mock.inspectFuncImageCreate != nil {
		mmImageCreate.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ImageCreate")
	}

	mmImageCreate.mock.inspectFuncImageCreate = f

	return mmImageCreate
}

// Return sets up results that will be returned by CommonAPIClient.ImageCreate
func (mmImageCreate *mCommonAPIClientMockImageCreate) Return(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	if mmImageCreate.mock.funcImageCreate != nil {
		mmImageCreate.mock.t.Fatalf("CommonAPIClientMock.ImageCreate mock is already set by Set")
	}

	if mmImageCreate.defaultExpectation == nil {
		mmImageCreate.defaultExpectation = &CommonAPIClientMockImageCreateExpectation{mock: mmImageCreate.mock}
	}
	mmImageCreate.defaultExpectation.results = &CommonAPIClientMockImageCreateResults{r1, err}
	return mmImageCreate.mock
}

//Set uses given function f to mock the CommonAPIClient.ImageCreate method
func (mmImageCreate *mCommonAPIClientMockImageCreate) Set(f func(ctx context.Context, parentReference string, options types.ImageCreateOptions) (r1 io.ReadCloser, err error)) *CommonAPIClientMock {
	if mmImageCreate.defaultExpectation != nil {
		mmImageCreate.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ImageCreate method")
	}

	if len(mmImageCreate.expectations) > 0 {
		mmImageCreate.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ImageCreate method")
	}

	mmImageCreate.mock.funcImageCreate = f
	return mmImageCreate.mock
}

// When sets expectation for the CommonAPIClient.ImageCreate which will trigger the result defined by the following
// Then helper
func (mmImageCreate *mCommonAPIClientMockImageCreate) When(ctx context.Context, parentReference string, options types.ImageCreateOptions) *CommonAPIClientMockImageCreateExpectation {
	if mmImageCreate.mock.funcImageCreate != nil {
		mmImageCreate.mock.t.Fatalf("CommonAPIClientMock.ImageCreate mock is already set by Set")
	}

	expectation := &CommonAPIClientMockImageCreateExpectation{
		mock:   mmImageCreate.mock,
		params: &CommonAPIClientMockImageCreateParams{ctx, parentReference, options},
	}
	mmImageCreate.expectations = append(mmImageCreate.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ImageCreate return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockImageCreateExpectation) Then(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockImageCreateResults{r1, err}
	return e.mock
}

// ImageCreate implements client.CommonAPIClient
func (mmImageCreate *CommonAPIClientMock) ImageCreate(ctx context.Context, parentReference string, options types.ImageCreateOptions) (r1 io.ReadCloser, err error) {
	mm_atomic.AddUint64(&mmImageCreate.beforeImageCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmImageCreate.afterImageCreateCounter, 1)

	if mmImageCreate.inspectFuncImageCreate != nil {
		mmImageCreate.inspectFuncImageCreate(ctx, parentReference, options)
	}

	mm_params := &CommonAPIClientMockImageCreateParams{ctx, parentReference, options}

	// Record call args
	mmImageCreate.ImageCreateMock.mutex.Lock()
	mmImageCreate.ImageCreateMock.callArgs = append(mmImageCreate.ImageCreateMock.callArgs, mm_params)
	mmImageCreate.ImageCreateMock.mutex.Unlock()

	for _, e := range mmImageCreate.ImageCreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmImageCreate.ImageCreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmImageCreate.ImageCreateMock.defaultExpectation.Counter, 1)
		mm_want := mmImageCreate.ImageCreateMock.defaultExpectation.params
		mm_got := CommonAPIClientMockImageCreateParams{ctx, parentReference, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmImageCreate.t.Errorf("CommonAPIClientMock.ImageCreate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmImageCreate.ImageCreateMock.defaultExpectation.results
		if mm_results == nil {
			mmImageCreate.t.Fatal("No results are set for the CommonAPIClientMock.ImageCreate")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmImageCreate.funcImageCreate != nil {
		return mmImageCreate.funcImageCreate(ctx, parentReference, options)
	}
	mmImageCreate.t.Fatalf("Unexpected call to CommonAPIClientMock.ImageCreate. %v %v %v", ctx, parentReference, options)
	return
}

// ImageCreateAfterCounter returns a count of finished CommonAPIClientMock.ImageCreate invocations
func (mmImageCreate *CommonAPIClientMock) ImageCreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImageCreate.afterImageCreateCounter)
}

// ImageCreateBeforeCounter returns a count of CommonAPIClientMock.ImageCreate invocations
func (mmImageCreate *CommonAPIClientMock) ImageCreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImageCreate.beforeImageCreateCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ImageCreate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmImageCreate *mCommonAPIClientMockImageCreate) Calls() []*CommonAPIClientMockImageCreateParams {
	mmImageCreate.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockImageCreateParams, len(mmImageCreate.callArgs))
	copy(argCopy, mmImageCreate.callArgs)

	mmImageCreate.mutex.RUnlock()

	return argCopy
}

// MinimockImageCreateDone returns true if the count of the ImageCreate invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockImageCreateDone() bool {
	for _, e := range m.ImageCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImageCreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImageCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImageCreate != nil && mm_atomic.LoadUint64(&m.afterImageCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockImageCreateInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockImageCreateInspect() {
	for _, e := range m.ImageCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImageCreate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImageCreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImageCreateCounter) < 1 {
		if m.ImageCreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ImageCreate")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImageCreate with params: %#v", *m.ImageCreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImageCreate != nil && mm_atomic.LoadUint64(&m.afterImageCreateCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ImageCreate")
	}
}

type mCommonAPIClientMockImageHistory struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockImageHistoryExpectation
	expectations       []*CommonAPIClientMockImageHistoryExpectation

	callArgs []*CommonAPIClientMockImageHistoryParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockImageHistoryExpectation specifies expectation struct of the CommonAPIClient.ImageHistory
type CommonAPIClientMockImageHistoryExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockImageHistoryParams
	results *CommonAPIClientMockImageHistoryResults
	Counter uint64
}

// CommonAPIClientMockImageHistoryParams contains parameters of the CommonAPIClient.ImageHistory
type CommonAPIClientMockImageHistoryParams struct {
	ctx   context.Context
	image string
}

// CommonAPIClientMockImageHistoryResults contains results of the CommonAPIClient.ImageHistory
type CommonAPIClientMockImageHistoryResults struct {
	ha1 []image.HistoryResponseItem
	err error
}

// Expect sets up expected params for CommonAPIClient.ImageHistory
func (mmImageHistory *mCommonAPIClientMockImageHistory) Expect(ctx context.Context, image string) *mCommonAPIClientMockImageHistory {
	if mmImageHistory.mock.funcImageHistory != nil {
		mmImageHistory.mock.t.Fatalf("CommonAPIClientMock.ImageHistory mock is already set by Set")
	}

	if mmImageHistory.defaultExpectation == nil {
		mmImageHistory.defaultExpectation = &CommonAPIClientMockImageHistoryExpectation{}
	}

	mmImageHistory.defaultExpectation.params = &CommonAPIClientMockImageHistoryParams{ctx, image}
	for _, e := range mmImageHistory.expectations {
		if minimock.Equal(e.params, mmImageHistory.defaultExpectation.params) {
			mmImageHistory.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmImageHistory.defaultExpectation.params)
		}
	}

	return mmImageHistory
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ImageHistory
func (mmImageHistory *mCommonAPIClientMockImageHistory) Inspect(f func(ctx context.Context, image string)) *mCommonAPIClientMockImageHistory {
	if mmImageHistory.mock.inspectFuncImageHistory != nil {
		mmImageHistory.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ImageHistory")
	}

	mmImageHistory.mock.inspectFuncImageHistory = f

	return mmImageHistory
}

// Return sets up results that will be returned by CommonAPIClient.ImageHistory
func (mmImageHistory *mCommonAPIClientMockImageHistory) Return(ha1 []image.HistoryResponseItem, err error) *CommonAPIClientMock {
	if mmImageHistory.mock.funcImageHistory != nil {
		mmImageHistory.mock.t.Fatalf("CommonAPIClientMock.ImageHistory mock is already set by Set")
	}

	if mmImageHistory.defaultExpectation == nil {
		mmImageHistory.defaultExpectation = &CommonAPIClientMockImageHistoryExpectation{mock: mmImageHistory.mock}
	}
	mmImageHistory.defaultExpectation.results = &CommonAPIClientMockImageHistoryResults{ha1, err}
	return mmImageHistory.mock
}

//Set uses given function f to mock the CommonAPIClient.ImageHistory method
func (mmImageHistory *mCommonAPIClientMockImageHistory) Set(f func(ctx context.Context, image string) (ha1 []image.HistoryResponseItem, err error)) *CommonAPIClientMock {
	if mmImageHistory.defaultExpectation != nil {
		mmImageHistory.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ImageHistory method")
	}

	if len(mmImageHistory.expectations) > 0 {
		mmImageHistory.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ImageHistory method")
	}

	mmImageHistory.mock.funcImageHistory = f
	return mmImageHistory.mock
}

// When sets expectation for the CommonAPIClient.ImageHistory which will trigger the result defined by the following
// Then helper
func (mmImageHistory *mCommonAPIClientMockImageHistory) When(ctx context.Context, image string) *CommonAPIClientMockImageHistoryExpectation {
	if mmImageHistory.mock.funcImageHistory != nil {
		mmImageHistory.mock.t.Fatalf("CommonAPIClientMock.ImageHistory mock is already set by Set")
	}

	expectation := &CommonAPIClientMockImageHistoryExpectation{
		mock:   mmImageHistory.mock,
		params: &CommonAPIClientMockImageHistoryParams{ctx, image},
	}
	mmImageHistory.expectations = append(mmImageHistory.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ImageHistory return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockImageHistoryExpectation) Then(ha1 []image.HistoryResponseItem, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockImageHistoryResults{ha1, err}
	return e.mock
}

// ImageHistory implements client.CommonAPIClient
func (mmImageHistory *CommonAPIClientMock) ImageHistory(ctx context.Context, image string) (ha1 []image.HistoryResponseItem, err error) {
	mm_atomic.AddUint64(&mmImageHistory.beforeImageHistoryCounter, 1)
	defer mm_atomic.AddUint64(&mmImageHistory.afterImageHistoryCounter, 1)

	if mmImageHistory.inspectFuncImageHistory != nil {
		mmImageHistory.inspectFuncImageHistory(ctx, image)
	}

	mm_params := &CommonAPIClientMockImageHistoryParams{ctx, image}

	// Record call args
	mmImageHistory.ImageHistoryMock.mutex.Lock()
	mmImageHistory.ImageHistoryMock.callArgs = append(mmImageHistory.ImageHistoryMock.callArgs, mm_params)
	mmImageHistory.ImageHistoryMock.mutex.Unlock()

	for _, e := range mmImageHistory.ImageHistoryMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ha1, e.results.err
		}
	}

	if mmImageHistory.ImageHistoryMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmImageHistory.ImageHistoryMock.defaultExpectation.Counter, 1)
		mm_want := mmImageHistory.ImageHistoryMock.defaultExpectation.params
		mm_got := CommonAPIClientMockImageHistoryParams{ctx, image}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmImageHistory.t.Errorf("CommonAPIClientMock.ImageHistory got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmImageHistory.ImageHistoryMock.defaultExpectation.results
		if mm_results == nil {
			mmImageHistory.t.Fatal("No results are set for the CommonAPIClientMock.ImageHistory")
		}
		return (*mm_results).ha1, (*mm_results).err
	}
	if mmImageHistory.funcImageHistory != nil {
		return mmImageHistory.funcImageHistory(ctx, image)
	}
	mmImageHistory.t.Fatalf("Unexpected call to CommonAPIClientMock.ImageHistory. %v %v", ctx, image)
	return
}

// ImageHistoryAfterCounter returns a count of finished CommonAPIClientMock.ImageHistory invocations
func (mmImageHistory *CommonAPIClientMock) ImageHistoryAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImageHistory.afterImageHistoryCounter)
}

// ImageHistoryBeforeCounter returns a count of CommonAPIClientMock.ImageHistory invocations
func (mmImageHistory *CommonAPIClientMock) ImageHistoryBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImageHistory.beforeImageHistoryCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ImageHistory.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmImageHistory *mCommonAPIClientMockImageHistory) Calls() []*CommonAPIClientMockImageHistoryParams {
	mmImageHistory.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockImageHistoryParams, len(mmImageHistory.callArgs))
	copy(argCopy, mmImageHistory.callArgs)

	mmImageHistory.mutex.RUnlock()

	return argCopy
}

// MinimockImageHistoryDone returns true if the count of the ImageHistory invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockImageHistoryDone() bool {
	for _, e := range m.ImageHistoryMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImageHistoryMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImageHistoryCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImageHistory != nil && mm_atomic.LoadUint64(&m.afterImageHistoryCounter) < 1 {
		return false
	}
	return true
}

// MinimockImageHistoryInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockImageHistoryInspect() {
	for _, e := range m.ImageHistoryMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImageHistory with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImageHistoryMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImageHistoryCounter) < 1 {
		if m.ImageHistoryMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ImageHistory")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImageHistory with params: %#v", *m.ImageHistoryMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImageHistory != nil && mm_atomic.LoadUint64(&m.afterImageHistoryCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ImageHistory")
	}
}

type mCommonAPIClientMockImageImport struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockImageImportExpectation
	expectations       []*CommonAPIClientMockImageImportExpectation

	callArgs []*CommonAPIClientMockImageImportParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockImageImportExpectation specifies expectation struct of the CommonAPIClient.ImageImport
type CommonAPIClientMockImageImportExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockImageImportParams
	results *CommonAPIClientMockImageImportResults
	Counter uint64
}

// CommonAPIClientMockImageImportParams contains parameters of the CommonAPIClient.ImageImport
type CommonAPIClientMockImageImportParams struct {
	ctx     context.Context
	source  types.ImageImportSource
	ref     string
	options types.ImageImportOptions
}

// CommonAPIClientMockImageImportResults contains results of the CommonAPIClient.ImageImport
type CommonAPIClientMockImageImportResults struct {
	r1  io.ReadCloser
	err error
}

// Expect sets up expected params for CommonAPIClient.ImageImport
func (mmImageImport *mCommonAPIClientMockImageImport) Expect(ctx context.Context, source types.ImageImportSource, ref string, options types.ImageImportOptions) *mCommonAPIClientMockImageImport {
	if mmImageImport.mock.funcImageImport != nil {
		mmImageImport.mock.t.Fatalf("CommonAPIClientMock.ImageImport mock is already set by Set")
	}

	if mmImageImport.defaultExpectation == nil {
		mmImageImport.defaultExpectation = &CommonAPIClientMockImageImportExpectation{}
	}

	mmImageImport.defaultExpectation.params = &CommonAPIClientMockImageImportParams{ctx, source, ref, options}
	for _, e := range mmImageImport.expectations {
		if minimock.Equal(e.params, mmImageImport.defaultExpectation.params) {
			mmImageImport.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmImageImport.defaultExpectation.params)
		}
	}

	return mmImageImport
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ImageImport
func (mmImageImport *mCommonAPIClientMockImageImport) Inspect(f func(ctx context.Context, source types.ImageImportSource, ref string, options types.ImageImportOptions)) *mCommonAPIClientMockImageImport {
	if mmImageImport.mock.inspectFuncImageImport != nil {
		mmImageImport.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ImageImport")
	}

	mmImageImport.mock.inspectFuncImageImport = f

	return mmImageImport
}

// Return sets up results that will be returned by CommonAPIClient.ImageImport
func (mmImageImport *mCommonAPIClientMockImageImport) Return(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	if mmImageImport.mock.funcImageImport != nil {
		mmImageImport.mock.t.Fatalf("CommonAPIClientMock.ImageImport mock is already set by Set")
	}

	if mmImageImport.defaultExpectation == nil {
		mmImageImport.defaultExpectation = &CommonAPIClientMockImageImportExpectation{mock: mmImageImport.mock}
	}
	mmImageImport.defaultExpectation.results = &CommonAPIClientMockImageImportResults{r1, err}
	return mmImageImport.mock
}

//Set uses given function f to mock the CommonAPIClient.ImageImport method
func (mmImageImport *mCommonAPIClientMockImageImport) Set(f func(ctx context.Context, source types.ImageImportSource, ref string, options types.ImageImportOptions) (r1 io.ReadCloser, err error)) *CommonAPIClientMock {
	if mmImageImport.defaultExpectation != nil {
		mmImageImport.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ImageImport method")
	}

	if len(mmImageImport.expectations) > 0 {
		mmImageImport.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ImageImport method")
	}

	mmImageImport.mock.funcImageImport = f
	return mmImageImport.mock
}

// When sets expectation for the CommonAPIClient.ImageImport which will trigger the result defined by the following
// Then helper
func (mmImageImport *mCommonAPIClientMockImageImport) When(ctx context.Context, source types.ImageImportSource, ref string, options types.ImageImportOptions) *CommonAPIClientMockImageImportExpectation {
	if mmImageImport.mock.funcImageImport != nil {
		mmImageImport.mock.t.Fatalf("CommonAPIClientMock.ImageImport mock is already set by Set")
	}

	expectation := &CommonAPIClientMockImageImportExpectation{
		mock:   mmImageImport.mock,
		params: &CommonAPIClientMockImageImportParams{ctx, source, ref, options},
	}
	mmImageImport.expectations = append(mmImageImport.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ImageImport return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockImageImportExpectation) Then(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockImageImportResults{r1, err}
	return e.mock
}

// ImageImport implements client.CommonAPIClient
func (mmImageImport *CommonAPIClientMock) ImageImport(ctx context.Context, source types.ImageImportSource, ref string, options types.ImageImportOptions) (r1 io.ReadCloser, err error) {
	mm_atomic.AddUint64(&mmImageImport.beforeImageImportCounter, 1)
	defer mm_atomic.AddUint64(&mmImageImport.afterImageImportCounter, 1)

	if mmImageImport.inspectFuncImageImport != nil {
		mmImageImport.inspectFuncImageImport(ctx, source, ref, options)
	}

	mm_params := &CommonAPIClientMockImageImportParams{ctx, source, ref, options}

	// Record call args
	mmImageImport.ImageImportMock.mutex.Lock()
	mmImageImport.ImageImportMock.callArgs = append(mmImageImport.ImageImportMock.callArgs, mm_params)
	mmImageImport.ImageImportMock.mutex.Unlock()

	for _, e := range mmImageImport.ImageImportMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmImageImport.ImageImportMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmImageImport.ImageImportMock.defaultExpectation.Counter, 1)
		mm_want := mmImageImport.ImageImportMock.defaultExpectation.params
		mm_got := CommonAPIClientMockImageImportParams{ctx, source, ref, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmImageImport.t.Errorf("CommonAPIClientMock.ImageImport got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmImageImport.ImageImportMock.defaultExpectation.results
		if mm_results == nil {
			mmImageImport.t.Fatal("No results are set for the CommonAPIClientMock.ImageImport")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmImageImport.funcImageImport != nil {
		return mmImageImport.funcImageImport(ctx, source, ref, options)
	}
	mmImageImport.t.Fatalf("Unexpected call to CommonAPIClientMock.ImageImport. %v %v %v %v", ctx, source, ref, options)
	return
}

// ImageImportAfterCounter returns a count of finished CommonAPIClientMock.ImageImport invocations
func (mmImageImport *CommonAPIClientMock) ImageImportAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImageImport.afterImageImportCounter)
}

// ImageImportBeforeCounter returns a count of CommonAPIClientMock.ImageImport invocations
func (mmImageImport *CommonAPIClientMock) ImageImportBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImageImport.beforeImageImportCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ImageImport.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmImageImport *mCommonAPIClientMockImageImport) Calls() []*CommonAPIClientMockImageImportParams {
	mmImageImport.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockImageImportParams, len(mmImageImport.callArgs))
	copy(argCopy, mmImageImport.callArgs)

	mmImageImport.mutex.RUnlock()

	return argCopy
}

// MinimockImageImportDone returns true if the count of the ImageImport invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockImageImportDone() bool {
	for _, e := range m.ImageImportMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImageImportMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImageImportCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImageImport != nil && mm_atomic.LoadUint64(&m.afterImageImportCounter) < 1 {
		return false
	}
	return true
}

// MinimockImageImportInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockImageImportInspect() {
	for _, e := range m.ImageImportMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImageImport with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImageImportMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImageImportCounter) < 1 {
		if m.ImageImportMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ImageImport")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImageImport with params: %#v", *m.ImageImportMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImageImport != nil && mm_atomic.LoadUint64(&m.afterImageImportCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ImageImport")
	}
}

type mCommonAPIClientMockImageInspectWithRaw struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockImageInspectWithRawExpectation
	expectations       []*CommonAPIClientMockImageInspectWithRawExpectation

	callArgs []*CommonAPIClientMockImageInspectWithRawParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockImageInspectWithRawExpectation specifies expectation struct of the CommonAPIClient.ImageInspectWithRaw
type CommonAPIClientMockImageInspectWithRawExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockImageInspectWithRawParams
	results *CommonAPIClientMockImageInspectWithRawResults
	Counter uint64
}

// CommonAPIClientMockImageInspectWithRawParams contains parameters of the CommonAPIClient.ImageInspectWithRaw
type CommonAPIClientMockImageInspectWithRawParams struct {
	ctx   context.Context
	image string
}

// CommonAPIClientMockImageInspectWithRawResults contains results of the CommonAPIClient.ImageInspectWithRaw
type CommonAPIClientMockImageInspectWithRawResults struct {
	i1  types.ImageInspect
	ba1 []byte
	err error
}

// Expect sets up expected params for CommonAPIClient.ImageInspectWithRaw
func (mmImageInspectWithRaw *mCommonAPIClientMockImageInspectWithRaw) Expect(ctx context.Context, image string) *mCommonAPIClientMockImageInspectWithRaw {
	if mmImageInspectWithRaw.mock.funcImageInspectWithRaw != nil {
		mmImageInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.ImageInspectWithRaw mock is already set by Set")
	}

	if mmImageInspectWithRaw.defaultExpectation == nil {
		mmImageInspectWithRaw.defaultExpectation = &CommonAPIClientMockImageInspectWithRawExpectation{}
	}

	mmImageInspectWithRaw.defaultExpectation.params = &CommonAPIClientMockImageInspectWithRawParams{ctx, image}
	for _, e := range mmImageInspectWithRaw.expectations {
		if minimock.Equal(e.params, mmImageInspectWithRaw.defaultExpectation.params) {
			mmImageInspectWithRaw.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmImageInspectWithRaw.defaultExpectation.params)
		}
	}

	return mmImageInspectWithRaw
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ImageInspectWithRaw
func (mmImageInspectWithRaw *mCommonAPIClientMockImageInspectWithRaw) Inspect(f func(ctx context.Context, image string)) *mCommonAPIClientMockImageInspectWithRaw {
	if mmImageInspectWithRaw.mock.inspectFuncImageInspectWithRaw != nil {
		mmImageInspectWithRaw.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ImageInspectWithRaw")
	}

	mmImageInspectWithRaw.mock.inspectFuncImageInspectWithRaw = f

	return mmImageInspectWithRaw
}

// Return sets up results that will be returned by CommonAPIClient.ImageInspectWithRaw
func (mmImageInspectWithRaw *mCommonAPIClientMockImageInspectWithRaw) Return(i1 types.ImageInspect, ba1 []byte, err error) *CommonAPIClientMock {
	if mmImageInspectWithRaw.mock.funcImageInspectWithRaw != nil {
		mmImageInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.ImageInspectWithRaw mock is already set by Set")
	}

	if mmImageInspectWithRaw.defaultExpectation == nil {
		mmImageInspectWithRaw.defaultExpectation = &CommonAPIClientMockImageInspectWithRawExpectation{mock: mmImageInspectWithRaw.mock}
	}
	mmImageInspectWithRaw.defaultExpectation.results = &CommonAPIClientMockImageInspectWithRawResults{i1, ba1, err}
	return mmImageInspectWithRaw.mock
}

//Set uses given function f to mock the CommonAPIClient.ImageInspectWithRaw method
func (mmImageInspectWithRaw *mCommonAPIClientMockImageInspectWithRaw) Set(f func(ctx context.Context, image string) (i1 types.ImageInspect, ba1 []byte, err error)) *CommonAPIClientMock {
	if mmImageInspectWithRaw.defaultExpectation != nil {
		mmImageInspectWithRaw.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ImageInspectWithRaw method")
	}

	if len(mmImageInspectWithRaw.expectations) > 0 {
		mmImageInspectWithRaw.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ImageInspectWithRaw method")
	}

	mmImageInspectWithRaw.mock.funcImageInspectWithRaw = f
	return mmImageInspectWithRaw.mock
}

// When sets expectation for the CommonAPIClient.ImageInspectWithRaw which will trigger the result defined by the following
// Then helper
func (mmImageInspectWithRaw *mCommonAPIClientMockImageInspectWithRaw) When(ctx context.Context, image string) *CommonAPIClientMockImageInspectWithRawExpectation {
	if mmImageInspectWithRaw.mock.funcImageInspectWithRaw != nil {
		mmImageInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.ImageInspectWithRaw mock is already set by Set")
	}

	expectation := &CommonAPIClientMockImageInspectWithRawExpectation{
		mock:   mmImageInspectWithRaw.mock,
		params: &CommonAPIClientMockImageInspectWithRawParams{ctx, image},
	}
	mmImageInspectWithRaw.expectations = append(mmImageInspectWithRaw.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ImageInspectWithRaw return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockImageInspectWithRawExpectation) Then(i1 types.ImageInspect, ba1 []byte, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockImageInspectWithRawResults{i1, ba1, err}
	return e.mock
}

// ImageInspectWithRaw implements client.CommonAPIClient
func (mmImageInspectWithRaw *CommonAPIClientMock) ImageInspectWithRaw(ctx context.Context, image string) (i1 types.ImageInspect, ba1 []byte, err error) {
	mm_atomic.AddUint64(&mmImageInspectWithRaw.beforeImageInspectWithRawCounter, 1)
	defer mm_atomic.AddUint64(&mmImageInspectWithRaw.afterImageInspectWithRawCounter, 1)

	if mmImageInspectWithRaw.inspectFuncImageInspectWithRaw != nil {
		mmImageInspectWithRaw.inspectFuncImageInspectWithRaw(ctx, image)
	}

	mm_params := &CommonAPIClientMockImageInspectWithRawParams{ctx, image}

	// Record call args
	mmImageInspectWithRaw.ImageInspectWithRawMock.mutex.Lock()
	mmImageInspectWithRaw.ImageInspectWithRawMock.callArgs = append(mmImageInspectWithRaw.ImageInspectWithRawMock.callArgs, mm_params)
	mmImageInspectWithRaw.ImageInspectWithRawMock.mutex.Unlock()

	for _, e := range mmImageInspectWithRaw.ImageInspectWithRawMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.ba1, e.results.err
		}
	}

	if mmImageInspectWithRaw.ImageInspectWithRawMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmImageInspectWithRaw.ImageInspectWithRawMock.defaultExpectation.Counter, 1)
		mm_want := mmImageInspectWithRaw.ImageInspectWithRawMock.defaultExpectation.params
		mm_got := CommonAPIClientMockImageInspectWithRawParams{ctx, image}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmImageInspectWithRaw.t.Errorf("CommonAPIClientMock.ImageInspectWithRaw got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmImageInspectWithRaw.ImageInspectWithRawMock.defaultExpectation.results
		if mm_results == nil {
			mmImageInspectWithRaw.t.Fatal("No results are set for the CommonAPIClientMock.ImageInspectWithRaw")
		}
		return (*mm_results).i1, (*mm_results).ba1, (*mm_results).err
	}
	if mmImageInspectWithRaw.funcImageInspectWithRaw != nil {
		return mmImageInspectWithRaw.funcImageInspectWithRaw(ctx, image)
	}
	mmImageInspectWithRaw.t.Fatalf("Unexpected call to CommonAPIClientMock.ImageInspectWithRaw. %v %v", ctx, image)
	return
}

// ImageInspectWithRawAfterCounter returns a count of finished CommonAPIClientMock.ImageInspectWithRaw invocations
func (mmImageInspectWithRaw *CommonAPIClientMock) ImageInspectWithRawAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImageInspectWithRaw.afterImageInspectWithRawCounter)
}

// ImageInspectWithRawBeforeCounter returns a count of CommonAPIClientMock.ImageInspectWithRaw invocations
func (mmImageInspectWithRaw *CommonAPIClientMock) ImageInspectWithRawBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImageInspectWithRaw.beforeImageInspectWithRawCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ImageInspectWithRaw.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmImageInspectWithRaw *mCommonAPIClientMockImageInspectWithRaw) Calls() []*CommonAPIClientMockImageInspectWithRawParams {
	mmImageInspectWithRaw.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockImageInspectWithRawParams, len(mmImageInspectWithRaw.callArgs))
	copy(argCopy, mmImageInspectWithRaw.callArgs)

	mmImageInspectWithRaw.mutex.RUnlock()

	return argCopy
}

// MinimockImageInspectWithRawDone returns true if the count of the ImageInspectWithRaw invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockImageInspectWithRawDone() bool {
	for _, e := range m.ImageInspectWithRawMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImageInspectWithRawMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImageInspectWithRawCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImageInspectWithRaw != nil && mm_atomic.LoadUint64(&m.afterImageInspectWithRawCounter) < 1 {
		return false
	}
	return true
}

// MinimockImageInspectWithRawInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockImageInspectWithRawInspect() {
	for _, e := range m.ImageInspectWithRawMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImageInspectWithRaw with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImageInspectWithRawMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImageInspectWithRawCounter) < 1 {
		if m.ImageInspectWithRawMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ImageInspectWithRaw")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImageInspectWithRaw with params: %#v", *m.ImageInspectWithRawMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImageInspectWithRaw != nil && mm_atomic.LoadUint64(&m.afterImageInspectWithRawCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ImageInspectWithRaw")
	}
}

type mCommonAPIClientMockImageList struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockImageListExpectation
	expectations       []*CommonAPIClientMockImageListExpectation

	callArgs []*CommonAPIClientMockImageListParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockImageListExpectation specifies expectation struct of the CommonAPIClient.ImageList
type CommonAPIClientMockImageListExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockImageListParams
	results *CommonAPIClientMockImageListResults
	Counter uint64
}

// CommonAPIClientMockImageListParams contains parameters of the CommonAPIClient.ImageList
type CommonAPIClientMockImageListParams struct {
	ctx     context.Context
	options types.ImageListOptions
}

// CommonAPIClientMockImageListResults contains results of the CommonAPIClient.ImageList
type CommonAPIClientMockImageListResults struct {
	ia1 []types.ImageSummary
	err error
}

// Expect sets up expected params for CommonAPIClient.ImageList
func (mmImageList *mCommonAPIClientMockImageList) Expect(ctx context.Context, options types.ImageListOptions) *mCommonAPIClientMockImageList {
	if mmImageList.mock.funcImageList != nil {
		mmImageList.mock.t.Fatalf("CommonAPIClientMock.ImageList mock is already set by Set")
	}

	if mmImageList.defaultExpectation == nil {
		mmImageList.defaultExpectation = &CommonAPIClientMockImageListExpectation{}
	}

	mmImageList.defaultExpectation.params = &CommonAPIClientMockImageListParams{ctx, options}
	for _, e := range mmImageList.expectations {
		if minimock.Equal(e.params, mmImageList.defaultExpectation.params) {
			mmImageList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmImageList.defaultExpectation.params)
		}
	}

	return mmImageList
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ImageList
func (mmImageList *mCommonAPIClientMockImageList) Inspect(f func(ctx context.Context, options types.ImageListOptions)) *mCommonAPIClientMockImageList {
	if mmImageList.mock.inspectFuncImageList != nil {
		mmImageList.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ImageList")
	}

	mmImageList.mock.inspectFuncImageList = f

	return mmImageList
}

// Return sets up results that will be returned by CommonAPIClient.ImageList
func (mmImageList *mCommonAPIClientMockImageList) Return(ia1 []types.ImageSummary, err error) *CommonAPIClientMock {
	if mmImageList.mock.funcImageList != nil {
		mmImageList.mock.t.Fatalf("CommonAPIClientMock.ImageList mock is already set by Set")
	}

	if mmImageList.defaultExpectation == nil {
		mmImageList.defaultExpectation = &CommonAPIClientMockImageListExpectation{mock: mmImageList.mock}
	}
	mmImageList.defaultExpectation.results = &CommonAPIClientMockImageListResults{ia1, err}
	return mmImageList.mock
}

//Set uses given function f to mock the CommonAPIClient.ImageList method
func (mmImageList *mCommonAPIClientMockImageList) Set(f func(ctx context.Context, options types.ImageListOptions) (ia1 []types.ImageSummary, err error)) *CommonAPIClientMock {
	if mmImageList.defaultExpectation != nil {
		mmImageList.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ImageList method")
	}

	if len(mmImageList.expectations) > 0 {
		mmImageList.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ImageList method")
	}

	mmImageList.mock.funcImageList = f
	return mmImageList.mock
}

// When sets expectation for the CommonAPIClient.ImageList which will trigger the result defined by the following
// Then helper
func (mmImageList *mCommonAPIClientMockImageList) When(ctx context.Context, options types.ImageListOptions) *CommonAPIClientMockImageListExpectation {
	if mmImageList.mock.funcImageList != nil {
		mmImageList.mock.t.Fatalf("CommonAPIClientMock.ImageList mock is already set by Set")
	}

	expectation := &CommonAPIClientMockImageListExpectation{
		mock:   mmImageList.mock,
		params: &CommonAPIClientMockImageListParams{ctx, options},
	}
	mmImageList.expectations = append(mmImageList.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ImageList return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockImageListExpectation) Then(ia1 []types.ImageSummary, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockImageListResults{ia1, err}
	return e.mock
}

// ImageList implements client.CommonAPIClient
func (mmImageList *CommonAPIClientMock) ImageList(ctx context.Context, options types.ImageListOptions) (ia1 []types.ImageSummary, err error) {
	mm_atomic.AddUint64(&mmImageList.beforeImageListCounter, 1)
	defer mm_atomic.AddUint64(&mmImageList.afterImageListCounter, 1)

	if mmImageList.inspectFuncImageList != nil {
		mmImageList.inspectFuncImageList(ctx, options)
	}

	mm_params := &CommonAPIClientMockImageListParams{ctx, options}

	// Record call args
	mmImageList.ImageListMock.mutex.Lock()
	mmImageList.ImageListMock.callArgs = append(mmImageList.ImageListMock.callArgs, mm_params)
	mmImageList.ImageListMock.mutex.Unlock()

	for _, e := range mmImageList.ImageListMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ia1, e.results.err
		}
	}

	if mmImageList.ImageListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmImageList.ImageListMock.defaultExpectation.Counter, 1)
		mm_want := mmImageList.ImageListMock.defaultExpectation.params
		mm_got := CommonAPIClientMockImageListParams{ctx, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmImageList.t.Errorf("CommonAPIClientMock.ImageList got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmImageList.ImageListMock.defaultExpectation.results
		if mm_results == nil {
			mmImageList.t.Fatal("No results are set for the CommonAPIClientMock.ImageList")
		}
		return (*mm_results).ia1, (*mm_results).err
	}
	if mmImageList.funcImageList != nil {
		return mmImageList.funcImageList(ctx, options)
	}
	mmImageList.t.Fatalf("Unexpected call to CommonAPIClientMock.ImageList. %v %v", ctx, options)
	return
}

// ImageListAfterCounter returns a count of finished CommonAPIClientMock.ImageList invocations
func (mmImageList *CommonAPIClientMock) ImageListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImageList.afterImageListCounter)
}

// ImageListBeforeCounter returns a count of CommonAPIClientMock.ImageList invocations
func (mmImageList *CommonAPIClientMock) ImageListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImageList.beforeImageListCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ImageList.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmImageList *mCommonAPIClientMockImageList) Calls() []*CommonAPIClientMockImageListParams {
	mmImageList.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockImageListParams, len(mmImageList.callArgs))
	copy(argCopy, mmImageList.callArgs)

	mmImageList.mutex.RUnlock()

	return argCopy
}

// MinimockImageListDone returns true if the count of the ImageList invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockImageListDone() bool {
	for _, e := range m.ImageListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImageListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImageListCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImageList != nil && mm_atomic.LoadUint64(&m.afterImageListCounter) < 1 {
		return false
	}
	return true
}

// MinimockImageListInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockImageListInspect() {
	for _, e := range m.ImageListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImageList with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImageListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImageListCounter) < 1 {
		if m.ImageListMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ImageList")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImageList with params: %#v", *m.ImageListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImageList != nil && mm_atomic.LoadUint64(&m.afterImageListCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ImageList")
	}
}

type mCommonAPIClientMockImageLoad struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockImageLoadExpectation
	expectations       []*CommonAPIClientMockImageLoadExpectation

	callArgs []*CommonAPIClientMockImageLoadParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockImageLoadExpectation specifies expectation struct of the CommonAPIClient.ImageLoad
type CommonAPIClientMockImageLoadExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockImageLoadParams
	results *CommonAPIClientMockImageLoadResults
	Counter uint64
}

// CommonAPIClientMockImageLoadParams contains parameters of the CommonAPIClient.ImageLoad
type CommonAPIClientMockImageLoadParams struct {
	ctx   context.Context
	input io.Reader
	quiet bool
}

// CommonAPIClientMockImageLoadResults contains results of the CommonAPIClient.ImageLoad
type CommonAPIClientMockImageLoadResults struct {
	i1  types.ImageLoadResponse
	err error
}

// Expect sets up expected params for CommonAPIClient.ImageLoad
func (mmImageLoad *mCommonAPIClientMockImageLoad) Expect(ctx context.Context, input io.Reader, quiet bool) *mCommonAPIClientMockImageLoad {
	if mmImageLoad.mock.funcImageLoad != nil {
		mmImageLoad.mock.t.Fatalf("CommonAPIClientMock.ImageLoad mock is already set by Set")
	}

	if mmImageLoad.defaultExpectation == nil {
		mmImageLoad.defaultExpectation = &CommonAPIClientMockImageLoadExpectation{}
	}

	mmImageLoad.defaultExpectation.params = &CommonAPIClientMockImageLoadParams{ctx, input, quiet}
	for _, e := range mmImageLoad.expectations {
		if minimock.Equal(e.params, mmImageLoad.defaultExpectation.params) {
			mmImageLoad.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmImageLoad.defaultExpectation.params)
		}
	}

	return mmImageLoad
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ImageLoad
func (mmImageLoad *mCommonAPIClientMockImageLoad) Inspect(f func(ctx context.Context, input io.Reader, quiet bool)) *mCommonAPIClientMockImageLoad {
	if mmImageLoad.mock.inspectFuncImageLoad != nil {
		mmImageLoad.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ImageLoad")
	}

	mmImageLoad.mock.inspectFuncImageLoad = f

	return mmImageLoad
}

// Return sets up results that will be returned by CommonAPIClient.ImageLoad
func (mmImageLoad *mCommonAPIClientMockImageLoad) Return(i1 types.ImageLoadResponse, err error) *CommonAPIClientMock {
	if mmImageLoad.mock.funcImageLoad != nil {
		mmImageLoad.mock.t.Fatalf("CommonAPIClientMock.ImageLoad mock is already set by Set")
	}

	if mmImageLoad.defaultExpectation == nil {
		mmImageLoad.defaultExpectation = &CommonAPIClientMockImageLoadExpectation{mock: mmImageLoad.mock}
	}
	mmImageLoad.defaultExpectation.results = &CommonAPIClientMockImageLoadResults{i1, err}
	return mmImageLoad.mock
}

//Set uses given function f to mock the CommonAPIClient.ImageLoad method
func (mmImageLoad *mCommonAPIClientMockImageLoad) Set(f func(ctx context.Context, input io.Reader, quiet bool) (i1 types.ImageLoadResponse, err error)) *CommonAPIClientMock {
	if mmImageLoad.defaultExpectation != nil {
		mmImageLoad.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ImageLoad method")
	}

	if len(mmImageLoad.expectations) > 0 {
		mmImageLoad.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ImageLoad method")
	}

	mmImageLoad.mock.funcImageLoad = f
	return mmImageLoad.mock
}

// When sets expectation for the CommonAPIClient.ImageLoad which will trigger the result defined by the following
// Then helper
func (mmImageLoad *mCommonAPIClientMockImageLoad) When(ctx context.Context, input io.Reader, quiet bool) *CommonAPIClientMockImageLoadExpectation {
	if mmImageLoad.mock.funcImageLoad != nil {
		mmImageLoad.mock.t.Fatalf("CommonAPIClientMock.ImageLoad mock is already set by Set")
	}

	expectation := &CommonAPIClientMockImageLoadExpectation{
		mock:   mmImageLoad.mock,
		params: &CommonAPIClientMockImageLoadParams{ctx, input, quiet},
	}
	mmImageLoad.expectations = append(mmImageLoad.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ImageLoad return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockImageLoadExpectation) Then(i1 types.ImageLoadResponse, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockImageLoadResults{i1, err}
	return e.mock
}

// ImageLoad implements client.CommonAPIClient
func (mmImageLoad *CommonAPIClientMock) ImageLoad(ctx context.Context, input io.Reader, quiet bool) (i1 types.ImageLoadResponse, err error) {
	mm_atomic.AddUint64(&mmImageLoad.beforeImageLoadCounter, 1)
	defer mm_atomic.AddUint64(&mmImageLoad.afterImageLoadCounter, 1)

	if mmImageLoad.inspectFuncImageLoad != nil {
		mmImageLoad.inspectFuncImageLoad(ctx, input, quiet)
	}

	mm_params := &CommonAPIClientMockImageLoadParams{ctx, input, quiet}

	// Record call args
	mmImageLoad.ImageLoadMock.mutex.Lock()
	mmImageLoad.ImageLoadMock.callArgs = append(mmImageLoad.ImageLoadMock.callArgs, mm_params)
	mmImageLoad.ImageLoadMock.mutex.Unlock()

	for _, e := range mmImageLoad.ImageLoadMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmImageLoad.ImageLoadMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmImageLoad.ImageLoadMock.defaultExpectation.Counter, 1)
		mm_want := mmImageLoad.ImageLoadMock.defaultExpectation.params
		mm_got := CommonAPIClientMockImageLoadParams{ctx, input, quiet}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmImageLoad.t.Errorf("CommonAPIClientMock.ImageLoad got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmImageLoad.ImageLoadMock.defaultExpectation.results
		if mm_results == nil {
			mmImageLoad.t.Fatal("No results are set for the CommonAPIClientMock.ImageLoad")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmImageLoad.funcImageLoad != nil {
		return mmImageLoad.funcImageLoad(ctx, input, quiet)
	}
	mmImageLoad.t.Fatalf("Unexpected call to CommonAPIClientMock.ImageLoad. %v %v %v", ctx, input, quiet)
	return
}

// ImageLoadAfterCounter returns a count of finished CommonAPIClientMock.ImageLoad invocations
func (mmImageLoad *CommonAPIClientMock) ImageLoadAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImageLoad.afterImageLoadCounter)
}

// ImageLoadBeforeCounter returns a count of CommonAPIClientMock.ImageLoad invocations
func (mmImageLoad *CommonAPIClientMock) ImageLoadBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImageLoad.beforeImageLoadCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ImageLoad.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmImageLoad *mCommonAPIClientMockImageLoad) Calls() []*CommonAPIClientMockImageLoadParams {
	mmImageLoad.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockImageLoadParams, len(mmImageLoad.callArgs))
	copy(argCopy, mmImageLoad.callArgs)

	mmImageLoad.mutex.RUnlock()

	return argCopy
}

// MinimockImageLoadDone returns true if the count of the ImageLoad invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockImageLoadDone() bool {
	for _, e := range m.ImageLoadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImageLoadMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImageLoadCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImageLoad != nil && mm_atomic.LoadUint64(&m.afterImageLoadCounter) < 1 {
		return false
	}
	return true
}

// MinimockImageLoadInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockImageLoadInspect() {
	for _, e := range m.ImageLoadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImageLoad with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImageLoadMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImageLoadCounter) < 1 {
		if m.ImageLoadMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ImageLoad")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImageLoad with params: %#v", *m.ImageLoadMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImageLoad != nil && mm_atomic.LoadUint64(&m.afterImageLoadCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ImageLoad")
	}
}

type mCommonAPIClientMockImagePull struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockImagePullExpectation
	expectations       []*CommonAPIClientMockImagePullExpectation

	callArgs []*CommonAPIClientMockImagePullParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockImagePullExpectation specifies expectation struct of the CommonAPIClient.ImagePull
type CommonAPIClientMockImagePullExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockImagePullParams
	results *CommonAPIClientMockImagePullResults
	Counter uint64
}

// CommonAPIClientMockImagePullParams contains parameters of the CommonAPIClient.ImagePull
type CommonAPIClientMockImagePullParams struct {
	ctx     context.Context
	ref     string
	options types.ImagePullOptions
}

// CommonAPIClientMockImagePullResults contains results of the CommonAPIClient.ImagePull
type CommonAPIClientMockImagePullResults struct {
	r1  io.ReadCloser
	err error
}

// Expect sets up expected params for CommonAPIClient.ImagePull
func (mmImagePull *mCommonAPIClientMockImagePull) Expect(ctx context.Context, ref string, options types.ImagePullOptions) *mCommonAPIClientMockImagePull {
	if mmImagePull.mock.funcImagePull != nil {
		mmImagePull.mock.t.Fatalf("CommonAPIClientMock.ImagePull mock is already set by Set")
	}

	if mmImagePull.defaultExpectation == nil {
		mmImagePull.defaultExpectation = &CommonAPIClientMockImagePullExpectation{}
	}

	mmImagePull.defaultExpectation.params = &CommonAPIClientMockImagePullParams{ctx, ref, options}
	for _, e := range mmImagePull.expectations {
		if minimock.Equal(e.params, mmImagePull.defaultExpectation.params) {
			mmImagePull.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmImagePull.defaultExpectation.params)
		}
	}

	return mmImagePull
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ImagePull
func (mmImagePull *mCommonAPIClientMockImagePull) Inspect(f func(ctx context.Context, ref string, options types.ImagePullOptions)) *mCommonAPIClientMockImagePull {
	if mmImagePull.mock.inspectFuncImagePull != nil {
		mmImagePull.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ImagePull")
	}

	mmImagePull.mock.inspectFuncImagePull = f

	return mmImagePull
}

// Return sets up results that will be returned by CommonAPIClient.ImagePull
func (mmImagePull *mCommonAPIClientMockImagePull) Return(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	if mmImagePull.mock.funcImagePull != nil {
		mmImagePull.mock.t.Fatalf("CommonAPIClientMock.ImagePull mock is already set by Set")
	}

	if mmImagePull.defaultExpectation == nil {
		mmImagePull.defaultExpectation = &CommonAPIClientMockImagePullExpectation{mock: mmImagePull.mock}
	}
	mmImagePull.defaultExpectation.results = &CommonAPIClientMockImagePullResults{r1, err}
	return mmImagePull.mock
}

//Set uses given function f to mock the CommonAPIClient.ImagePull method
func (mmImagePull *mCommonAPIClientMockImagePull) Set(f func(ctx context.Context, ref string, options types.ImagePullOptions) (r1 io.ReadCloser, err error)) *CommonAPIClientMock {
	if mmImagePull.defaultExpectation != nil {
		mmImagePull.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ImagePull method")
	}

	if len(mmImagePull.expectations) > 0 {
		mmImagePull.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ImagePull method")
	}

	mmImagePull.mock.funcImagePull = f
	return mmImagePull.mock
}

// When sets expectation for the CommonAPIClient.ImagePull which will trigger the result defined by the following
// Then helper
func (mmImagePull *mCommonAPIClientMockImagePull) When(ctx context.Context, ref string, options types.ImagePullOptions) *CommonAPIClientMockImagePullExpectation {
	if mmImagePull.mock.funcImagePull != nil {
		mmImagePull.mock.t.Fatalf("CommonAPIClientMock.ImagePull mock is already set by Set")
	}

	expectation := &CommonAPIClientMockImagePullExpectation{
		mock:   mmImagePull.mock,
		params: &CommonAPIClientMockImagePullParams{ctx, ref, options},
	}
	mmImagePull.expectations = append(mmImagePull.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ImagePull return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockImagePullExpectation) Then(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockImagePullResults{r1, err}
	return e.mock
}

// ImagePull implements client.CommonAPIClient
func (mmImagePull *CommonAPIClientMock) ImagePull(ctx context.Context, ref string, options types.ImagePullOptions) (r1 io.ReadCloser, err error) {
	mm_atomic.AddUint64(&mmImagePull.beforeImagePullCounter, 1)
	defer mm_atomic.AddUint64(&mmImagePull.afterImagePullCounter, 1)

	if mmImagePull.inspectFuncImagePull != nil {
		mmImagePull.inspectFuncImagePull(ctx, ref, options)
	}

	mm_params := &CommonAPIClientMockImagePullParams{ctx, ref, options}

	// Record call args
	mmImagePull.ImagePullMock.mutex.Lock()
	mmImagePull.ImagePullMock.callArgs = append(mmImagePull.ImagePullMock.callArgs, mm_params)
	mmImagePull.ImagePullMock.mutex.Unlock()

	for _, e := range mmImagePull.ImagePullMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmImagePull.ImagePullMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmImagePull.ImagePullMock.defaultExpectation.Counter, 1)
		mm_want := mmImagePull.ImagePullMock.defaultExpectation.params
		mm_got := CommonAPIClientMockImagePullParams{ctx, ref, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmImagePull.t.Errorf("CommonAPIClientMock.ImagePull got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmImagePull.ImagePullMock.defaultExpectation.results
		if mm_results == nil {
			mmImagePull.t.Fatal("No results are set for the CommonAPIClientMock.ImagePull")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmImagePull.funcImagePull != nil {
		return mmImagePull.funcImagePull(ctx, ref, options)
	}
	mmImagePull.t.Fatalf("Unexpected call to CommonAPIClientMock.ImagePull. %v %v %v", ctx, ref, options)
	return
}

// ImagePullAfterCounter returns a count of finished CommonAPIClientMock.ImagePull invocations
func (mmImagePull *CommonAPIClientMock) ImagePullAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImagePull.afterImagePullCounter)
}

// ImagePullBeforeCounter returns a count of CommonAPIClientMock.ImagePull invocations
func (mmImagePull *CommonAPIClientMock) ImagePullBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImagePull.beforeImagePullCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ImagePull.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmImagePull *mCommonAPIClientMockImagePull) Calls() []*CommonAPIClientMockImagePullParams {
	mmImagePull.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockImagePullParams, len(mmImagePull.callArgs))
	copy(argCopy, mmImagePull.callArgs)

	mmImagePull.mutex.RUnlock()

	return argCopy
}

// MinimockImagePullDone returns true if the count of the ImagePull invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockImagePullDone() bool {
	for _, e := range m.ImagePullMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImagePullMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImagePullCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImagePull != nil && mm_atomic.LoadUint64(&m.afterImagePullCounter) < 1 {
		return false
	}
	return true
}

// MinimockImagePullInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockImagePullInspect() {
	for _, e := range m.ImagePullMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImagePull with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImagePullMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImagePullCounter) < 1 {
		if m.ImagePullMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ImagePull")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImagePull with params: %#v", *m.ImagePullMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImagePull != nil && mm_atomic.LoadUint64(&m.afterImagePullCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ImagePull")
	}
}

type mCommonAPIClientMockImagePush struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockImagePushExpectation
	expectations       []*CommonAPIClientMockImagePushExpectation

	callArgs []*CommonAPIClientMockImagePushParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockImagePushExpectation specifies expectation struct of the CommonAPIClient.ImagePush
type CommonAPIClientMockImagePushExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockImagePushParams
	results *CommonAPIClientMockImagePushResults
	Counter uint64
}

// CommonAPIClientMockImagePushParams contains parameters of the CommonAPIClient.ImagePush
type CommonAPIClientMockImagePushParams struct {
	ctx     context.Context
	ref     string
	options types.ImagePushOptions
}

// CommonAPIClientMockImagePushResults contains results of the CommonAPIClient.ImagePush
type CommonAPIClientMockImagePushResults struct {
	r1  io.ReadCloser
	err error
}

// Expect sets up expected params for CommonAPIClient.ImagePush
func (mmImagePush *mCommonAPIClientMockImagePush) Expect(ctx context.Context, ref string, options types.ImagePushOptions) *mCommonAPIClientMockImagePush {
	if mmImagePush.mock.funcImagePush != nil {
		mmImagePush.mock.t.Fatalf("CommonAPIClientMock.ImagePush mock is already set by Set")
	}

	if mmImagePush.defaultExpectation == nil {
		mmImagePush.defaultExpectation = &CommonAPIClientMockImagePushExpectation{}
	}

	mmImagePush.defaultExpectation.params = &CommonAPIClientMockImagePushParams{ctx, ref, options}
	for _, e := range mmImagePush.expectations {
		if minimock.Equal(e.params, mmImagePush.defaultExpectation.params) {
			mmImagePush.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmImagePush.defaultExpectation.params)
		}
	}

	return mmImagePush
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ImagePush
func (mmImagePush *mCommonAPIClientMockImagePush) Inspect(f func(ctx context.Context, ref string, options types.ImagePushOptions)) *mCommonAPIClientMockImagePush {
	if mmImagePush.mock.inspectFuncImagePush != nil {
		mmImagePush.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ImagePush")
	}

	mmImagePush.mock.inspectFuncImagePush = f

	return mmImagePush
}

// Return sets up results that will be returned by CommonAPIClient.ImagePush
func (mmImagePush *mCommonAPIClientMockImagePush) Return(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	if mmImagePush.mock.funcImagePush != nil {
		mmImagePush.mock.t.Fatalf("CommonAPIClientMock.ImagePush mock is already set by Set")
	}

	if mmImagePush.defaultExpectation == nil {
		mmImagePush.defaultExpectation = &CommonAPIClientMockImagePushExpectation{mock: mmImagePush.mock}
	}
	mmImagePush.defaultExpectation.results = &CommonAPIClientMockImagePushResults{r1, err}
	return mmImagePush.mock
}

//Set uses given function f to mock the CommonAPIClient.ImagePush method
func (mmImagePush *mCommonAPIClientMockImagePush) Set(f func(ctx context.Context, ref string, options types.ImagePushOptions) (r1 io.ReadCloser, err error)) *CommonAPIClientMock {
	if mmImagePush.defaultExpectation != nil {
		mmImagePush.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ImagePush method")
	}

	if len(mmImagePush.expectations) > 0 {
		mmImagePush.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ImagePush method")
	}

	mmImagePush.mock.funcImagePush = f
	return mmImagePush.mock
}

// When sets expectation for the CommonAPIClient.ImagePush which will trigger the result defined by the following
// Then helper
func (mmImagePush *mCommonAPIClientMockImagePush) When(ctx context.Context, ref string, options types.ImagePushOptions) *CommonAPIClientMockImagePushExpectation {
	if mmImagePush.mock.funcImagePush != nil {
		mmImagePush.mock.t.Fatalf("CommonAPIClientMock.ImagePush mock is already set by Set")
	}

	expectation := &CommonAPIClientMockImagePushExpectation{
		mock:   mmImagePush.mock,
		params: &CommonAPIClientMockImagePushParams{ctx, ref, options},
	}
	mmImagePush.expectations = append(mmImagePush.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ImagePush return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockImagePushExpectation) Then(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockImagePushResults{r1, err}
	return e.mock
}

// ImagePush implements client.CommonAPIClient
func (mmImagePush *CommonAPIClientMock) ImagePush(ctx context.Context, ref string, options types.ImagePushOptions) (r1 io.ReadCloser, err error) {
	mm_atomic.AddUint64(&mmImagePush.beforeImagePushCounter, 1)
	defer mm_atomic.AddUint64(&mmImagePush.afterImagePushCounter, 1)

	if mmImagePush.inspectFuncImagePush != nil {
		mmImagePush.inspectFuncImagePush(ctx, ref, options)
	}

	mm_params := &CommonAPIClientMockImagePushParams{ctx, ref, options}

	// Record call args
	mmImagePush.ImagePushMock.mutex.Lock()
	mmImagePush.ImagePushMock.callArgs = append(mmImagePush.ImagePushMock.callArgs, mm_params)
	mmImagePush.ImagePushMock.mutex.Unlock()

	for _, e := range mmImagePush.ImagePushMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmImagePush.ImagePushMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmImagePush.ImagePushMock.defaultExpectation.Counter, 1)
		mm_want := mmImagePush.ImagePushMock.defaultExpectation.params
		mm_got := CommonAPIClientMockImagePushParams{ctx, ref, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmImagePush.t.Errorf("CommonAPIClientMock.ImagePush got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmImagePush.ImagePushMock.defaultExpectation.results
		if mm_results == nil {
			mmImagePush.t.Fatal("No results are set for the CommonAPIClientMock.ImagePush")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmImagePush.funcImagePush != nil {
		return mmImagePush.funcImagePush(ctx, ref, options)
	}
	mmImagePush.t.Fatalf("Unexpected call to CommonAPIClientMock.ImagePush. %v %v %v", ctx, ref, options)
	return
}

// ImagePushAfterCounter returns a count of finished CommonAPIClientMock.ImagePush invocations
func (mmImagePush *CommonAPIClientMock) ImagePushAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImagePush.afterImagePushCounter)
}

// ImagePushBeforeCounter returns a count of CommonAPIClientMock.ImagePush invocations
func (mmImagePush *CommonAPIClientMock) ImagePushBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImagePush.beforeImagePushCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ImagePush.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmImagePush *mCommonAPIClientMockImagePush) Calls() []*CommonAPIClientMockImagePushParams {
	mmImagePush.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockImagePushParams, len(mmImagePush.callArgs))
	copy(argCopy, mmImagePush.callArgs)

	mmImagePush.mutex.RUnlock()

	return argCopy
}

// MinimockImagePushDone returns true if the count of the ImagePush invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockImagePushDone() bool {
	for _, e := range m.ImagePushMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImagePushMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImagePushCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImagePush != nil && mm_atomic.LoadUint64(&m.afterImagePushCounter) < 1 {
		return false
	}
	return true
}

// MinimockImagePushInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockImagePushInspect() {
	for _, e := range m.ImagePushMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImagePush with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImagePushMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImagePushCounter) < 1 {
		if m.ImagePushMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ImagePush")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImagePush with params: %#v", *m.ImagePushMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImagePush != nil && mm_atomic.LoadUint64(&m.afterImagePushCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ImagePush")
	}
}

type mCommonAPIClientMockImageRemove struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockImageRemoveExpectation
	expectations       []*CommonAPIClientMockImageRemoveExpectation

	callArgs []*CommonAPIClientMockImageRemoveParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockImageRemoveExpectation specifies expectation struct of the CommonAPIClient.ImageRemove
type CommonAPIClientMockImageRemoveExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockImageRemoveParams
	results *CommonAPIClientMockImageRemoveResults
	Counter uint64
}

// CommonAPIClientMockImageRemoveParams contains parameters of the CommonAPIClient.ImageRemove
type CommonAPIClientMockImageRemoveParams struct {
	ctx     context.Context
	image   string
	options types.ImageRemoveOptions
}

// CommonAPIClientMockImageRemoveResults contains results of the CommonAPIClient.ImageRemove
type CommonAPIClientMockImageRemoveResults struct {
	ia1 []types.ImageDeleteResponseItem
	err error
}

// Expect sets up expected params for CommonAPIClient.ImageRemove
func (mmImageRemove *mCommonAPIClientMockImageRemove) Expect(ctx context.Context, image string, options types.ImageRemoveOptions) *mCommonAPIClientMockImageRemove {
	if mmImageRemove.mock.funcImageRemove != nil {
		mmImageRemove.mock.t.Fatalf("CommonAPIClientMock.ImageRemove mock is already set by Set")
	}

	if mmImageRemove.defaultExpectation == nil {
		mmImageRemove.defaultExpectation = &CommonAPIClientMockImageRemoveExpectation{}
	}

	mmImageRemove.defaultExpectation.params = &CommonAPIClientMockImageRemoveParams{ctx, image, options}
	for _, e := range mmImageRemove.expectations {
		if minimock.Equal(e.params, mmImageRemove.defaultExpectation.params) {
			mmImageRemove.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmImageRemove.defaultExpectation.params)
		}
	}

	return mmImageRemove
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ImageRemove
func (mmImageRemove *mCommonAPIClientMockImageRemove) Inspect(f func(ctx context.Context, image string, options types.ImageRemoveOptions)) *mCommonAPIClientMockImageRemove {
	if mmImageRemove.mock.inspectFuncImageRemove != nil {
		mmImageRemove.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ImageRemove")
	}

	mmImageRemove.mock.inspectFuncImageRemove = f

	return mmImageRemove
}

// Return sets up results that will be returned by CommonAPIClient.ImageRemove
func (mmImageRemove *mCommonAPIClientMockImageRemove) Return(ia1 []types.ImageDeleteResponseItem, err error) *CommonAPIClientMock {
	if mmImageRemove.mock.funcImageRemove != nil {
		mmImageRemove.mock.t.Fatalf("CommonAPIClientMock.ImageRemove mock is already set by Set")
	}

	if mmImageRemove.defaultExpectation == nil {
		mmImageRemove.defaultExpectation = &CommonAPIClientMockImageRemoveExpectation{mock: mmImageRemove.mock}
	}
	mmImageRemove.defaultExpectation.results = &CommonAPIClientMockImageRemoveResults{ia1, err}
	return mmImageRemove.mock
}

//Set uses given function f to mock the CommonAPIClient.ImageRemove method
func (mmImageRemove *mCommonAPIClientMockImageRemove) Set(f func(ctx context.Context, image string, options types.ImageRemoveOptions) (ia1 []types.ImageDeleteResponseItem, err error)) *CommonAPIClientMock {
	if mmImageRemove.defaultExpectation != nil {
		mmImageRemove.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ImageRemove method")
	}

	if len(mmImageRemove.expectations) > 0 {
		mmImageRemove.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ImageRemove method")
	}

	mmImageRemove.mock.funcImageRemove = f
	return mmImageRemove.mock
}

// When sets expectation for the CommonAPIClient.ImageRemove which will trigger the result defined by the following
// Then helper
func (mmImageRemove *mCommonAPIClientMockImageRemove) When(ctx context.Context, image string, options types.ImageRemoveOptions) *CommonAPIClientMockImageRemoveExpectation {
	if mmImageRemove.mock.funcImageRemove != nil {
		mmImageRemove.mock.t.Fatalf("CommonAPIClientMock.ImageRemove mock is already set by Set")
	}

	expectation := &CommonAPIClientMockImageRemoveExpectation{
		mock:   mmImageRemove.mock,
		params: &CommonAPIClientMockImageRemoveParams{ctx, image, options},
	}
	mmImageRemove.expectations = append(mmImageRemove.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ImageRemove return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockImageRemoveExpectation) Then(ia1 []types.ImageDeleteResponseItem, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockImageRemoveResults{ia1, err}
	return e.mock
}

// ImageRemove implements client.CommonAPIClient
func (mmImageRemove *CommonAPIClientMock) ImageRemove(ctx context.Context, image string, options types.ImageRemoveOptions) (ia1 []types.ImageDeleteResponseItem, err error) {
	mm_atomic.AddUint64(&mmImageRemove.beforeImageRemoveCounter, 1)
	defer mm_atomic.AddUint64(&mmImageRemove.afterImageRemoveCounter, 1)

	if mmImageRemove.inspectFuncImageRemove != nil {
		mmImageRemove.inspectFuncImageRemove(ctx, image, options)
	}

	mm_params := &CommonAPIClientMockImageRemoveParams{ctx, image, options}

	// Record call args
	mmImageRemove.ImageRemoveMock.mutex.Lock()
	mmImageRemove.ImageRemoveMock.callArgs = append(mmImageRemove.ImageRemoveMock.callArgs, mm_params)
	mmImageRemove.ImageRemoveMock.mutex.Unlock()

	for _, e := range mmImageRemove.ImageRemoveMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ia1, e.results.err
		}
	}

	if mmImageRemove.ImageRemoveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmImageRemove.ImageRemoveMock.defaultExpectation.Counter, 1)
		mm_want := mmImageRemove.ImageRemoveMock.defaultExpectation.params
		mm_got := CommonAPIClientMockImageRemoveParams{ctx, image, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmImageRemove.t.Errorf("CommonAPIClientMock.ImageRemove got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmImageRemove.ImageRemoveMock.defaultExpectation.results
		if mm_results == nil {
			mmImageRemove.t.Fatal("No results are set for the CommonAPIClientMock.ImageRemove")
		}
		return (*mm_results).ia1, (*mm_results).err
	}
	if mmImageRemove.funcImageRemove != nil {
		return mmImageRemove.funcImageRemove(ctx, image, options)
	}
	mmImageRemove.t.Fatalf("Unexpected call to CommonAPIClientMock.ImageRemove. %v %v %v", ctx, image, options)
	return
}

// ImageRemoveAfterCounter returns a count of finished CommonAPIClientMock.ImageRemove invocations
func (mmImageRemove *CommonAPIClientMock) ImageRemoveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImageRemove.afterImageRemoveCounter)
}

// ImageRemoveBeforeCounter returns a count of CommonAPIClientMock.ImageRemove invocations
func (mmImageRemove *CommonAPIClientMock) ImageRemoveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImageRemove.beforeImageRemoveCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ImageRemove.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmImageRemove *mCommonAPIClientMockImageRemove) Calls() []*CommonAPIClientMockImageRemoveParams {
	mmImageRemove.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockImageRemoveParams, len(mmImageRemove.callArgs))
	copy(argCopy, mmImageRemove.callArgs)

	mmImageRemove.mutex.RUnlock()

	return argCopy
}

// MinimockImageRemoveDone returns true if the count of the ImageRemove invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockImageRemoveDone() bool {
	for _, e := range m.ImageRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImageRemoveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImageRemoveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImageRemove != nil && mm_atomic.LoadUint64(&m.afterImageRemoveCounter) < 1 {
		return false
	}
	return true
}

// MinimockImageRemoveInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockImageRemoveInspect() {
	for _, e := range m.ImageRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImageRemove with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImageRemoveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImageRemoveCounter) < 1 {
		if m.ImageRemoveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ImageRemove")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImageRemove with params: %#v", *m.ImageRemoveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImageRemove != nil && mm_atomic.LoadUint64(&m.afterImageRemoveCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ImageRemove")
	}
}

type mCommonAPIClientMockImageSave struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockImageSaveExpectation
	expectations       []*CommonAPIClientMockImageSaveExpectation

	callArgs []*CommonAPIClientMockImageSaveParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockImageSaveExpectation specifies expectation struct of the CommonAPIClient.ImageSave
type CommonAPIClientMockImageSaveExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockImageSaveParams
	results *CommonAPIClientMockImageSaveResults
	Counter uint64
}

// CommonAPIClientMockImageSaveParams contains parameters of the CommonAPIClient.ImageSave
type CommonAPIClientMockImageSaveParams struct {
	ctx    context.Context
	images []string
}

// CommonAPIClientMockImageSaveResults contains results of the CommonAPIClient.ImageSave
type CommonAPIClientMockImageSaveResults struct {
	r1  io.ReadCloser
	err error
}

// Expect sets up expected params for CommonAPIClient.ImageSave
func (mmImageSave *mCommonAPIClientMockImageSave) Expect(ctx context.Context, images []string) *mCommonAPIClientMockImageSave {
	if mmImageSave.mock.funcImageSave != nil {
		mmImageSave.mock.t.Fatalf("CommonAPIClientMock.ImageSave mock is already set by Set")
	}

	if mmImageSave.defaultExpectation == nil {
		mmImageSave.defaultExpectation = &CommonAPIClientMockImageSaveExpectation{}
	}

	mmImageSave.defaultExpectation.params = &CommonAPIClientMockImageSaveParams{ctx, images}
	for _, e := range mmImageSave.expectations {
		if minimock.Equal(e.params, mmImageSave.defaultExpectation.params) {
			mmImageSave.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmImageSave.defaultExpectation.params)
		}
	}

	return mmImageSave
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ImageSave
func (mmImageSave *mCommonAPIClientMockImageSave) Inspect(f func(ctx context.Context, images []string)) *mCommonAPIClientMockImageSave {
	if mmImageSave.mock.inspectFuncImageSave != nil {
		mmImageSave.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ImageSave")
	}

	mmImageSave.mock.inspectFuncImageSave = f

	return mmImageSave
}

// Return sets up results that will be returned by CommonAPIClient.ImageSave
func (mmImageSave *mCommonAPIClientMockImageSave) Return(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	if mmImageSave.mock.funcImageSave != nil {
		mmImageSave.mock.t.Fatalf("CommonAPIClientMock.ImageSave mock is already set by Set")
	}

	if mmImageSave.defaultExpectation == nil {
		mmImageSave.defaultExpectation = &CommonAPIClientMockImageSaveExpectation{mock: mmImageSave.mock}
	}
	mmImageSave.defaultExpectation.results = &CommonAPIClientMockImageSaveResults{r1, err}
	return mmImageSave.mock
}

//Set uses given function f to mock the CommonAPIClient.ImageSave method
func (mmImageSave *mCommonAPIClientMockImageSave) Set(f func(ctx context.Context, images []string) (r1 io.ReadCloser, err error)) *CommonAPIClientMock {
	if mmImageSave.defaultExpectation != nil {
		mmImageSave.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ImageSave method")
	}

	if len(mmImageSave.expectations) > 0 {
		mmImageSave.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ImageSave method")
	}

	mmImageSave.mock.funcImageSave = f
	return mmImageSave.mock
}

// When sets expectation for the CommonAPIClient.ImageSave which will trigger the result defined by the following
// Then helper
func (mmImageSave *mCommonAPIClientMockImageSave) When(ctx context.Context, images []string) *CommonAPIClientMockImageSaveExpectation {
	if mmImageSave.mock.funcImageSave != nil {
		mmImageSave.mock.t.Fatalf("CommonAPIClientMock.ImageSave mock is already set by Set")
	}

	expectation := &CommonAPIClientMockImageSaveExpectation{
		mock:   mmImageSave.mock,
		params: &CommonAPIClientMockImageSaveParams{ctx, images},
	}
	mmImageSave.expectations = append(mmImageSave.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ImageSave return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockImageSaveExpectation) Then(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockImageSaveResults{r1, err}
	return e.mock
}

// ImageSave implements client.CommonAPIClient
func (mmImageSave *CommonAPIClientMock) ImageSave(ctx context.Context, images []string) (r1 io.ReadCloser, err error) {
	mm_atomic.AddUint64(&mmImageSave.beforeImageSaveCounter, 1)
	defer mm_atomic.AddUint64(&mmImageSave.afterImageSaveCounter, 1)

	if mmImageSave.inspectFuncImageSave != nil {
		mmImageSave.inspectFuncImageSave(ctx, images)
	}

	mm_params := &CommonAPIClientMockImageSaveParams{ctx, images}

	// Record call args
	mmImageSave.ImageSaveMock.mutex.Lock()
	mmImageSave.ImageSaveMock.callArgs = append(mmImageSave.ImageSaveMock.callArgs, mm_params)
	mmImageSave.ImageSaveMock.mutex.Unlock()

	for _, e := range mmImageSave.ImageSaveMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmImageSave.ImageSaveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmImageSave.ImageSaveMock.defaultExpectation.Counter, 1)
		mm_want := mmImageSave.ImageSaveMock.defaultExpectation.params
		mm_got := CommonAPIClientMockImageSaveParams{ctx, images}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmImageSave.t.Errorf("CommonAPIClientMock.ImageSave got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmImageSave.ImageSaveMock.defaultExpectation.results
		if mm_results == nil {
			mmImageSave.t.Fatal("No results are set for the CommonAPIClientMock.ImageSave")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmImageSave.funcImageSave != nil {
		return mmImageSave.funcImageSave(ctx, images)
	}
	mmImageSave.t.Fatalf("Unexpected call to CommonAPIClientMock.ImageSave. %v %v", ctx, images)
	return
}

// ImageSaveAfterCounter returns a count of finished CommonAPIClientMock.ImageSave invocations
func (mmImageSave *CommonAPIClientMock) ImageSaveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImageSave.afterImageSaveCounter)
}

// ImageSaveBeforeCounter returns a count of CommonAPIClientMock.ImageSave invocations
func (mmImageSave *CommonAPIClientMock) ImageSaveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImageSave.beforeImageSaveCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ImageSave.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmImageSave *mCommonAPIClientMockImageSave) Calls() []*CommonAPIClientMockImageSaveParams {
	mmImageSave.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockImageSaveParams, len(mmImageSave.callArgs))
	copy(argCopy, mmImageSave.callArgs)

	mmImageSave.mutex.RUnlock()

	return argCopy
}

// MinimockImageSaveDone returns true if the count of the ImageSave invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockImageSaveDone() bool {
	for _, e := range m.ImageSaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImageSaveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImageSaveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImageSave != nil && mm_atomic.LoadUint64(&m.afterImageSaveCounter) < 1 {
		return false
	}
	return true
}

// MinimockImageSaveInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockImageSaveInspect() {
	for _, e := range m.ImageSaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImageSave with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImageSaveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImageSaveCounter) < 1 {
		if m.ImageSaveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ImageSave")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImageSave with params: %#v", *m.ImageSaveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImageSave != nil && mm_atomic.LoadUint64(&m.afterImageSaveCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ImageSave")
	}
}

type mCommonAPIClientMockImageSearch struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockImageSearchExpectation
	expectations       []*CommonAPIClientMockImageSearchExpectation

	callArgs []*CommonAPIClientMockImageSearchParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockImageSearchExpectation specifies expectation struct of the CommonAPIClient.ImageSearch
type CommonAPIClientMockImageSearchExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockImageSearchParams
	results *CommonAPIClientMockImageSearchResults
	Counter uint64
}

// CommonAPIClientMockImageSearchParams contains parameters of the CommonAPIClient.ImageSearch
type CommonAPIClientMockImageSearchParams struct {
	ctx     context.Context
	term    string
	options types.ImageSearchOptions
}

// CommonAPIClientMockImageSearchResults contains results of the CommonAPIClient.ImageSearch
type CommonAPIClientMockImageSearchResults struct {
	sa1 []registry.SearchResult
	err error
}

// Expect sets up expected params for CommonAPIClient.ImageSearch
func (mmImageSearch *mCommonAPIClientMockImageSearch) Expect(ctx context.Context, term string, options types.ImageSearchOptions) *mCommonAPIClientMockImageSearch {
	if mmImageSearch.mock.funcImageSearch != nil {
		mmImageSearch.mock.t.Fatalf("CommonAPIClientMock.ImageSearch mock is already set by Set")
	}

	if mmImageSearch.defaultExpectation == nil {
		mmImageSearch.defaultExpectation = &CommonAPIClientMockImageSearchExpectation{}
	}

	mmImageSearch.defaultExpectation.params = &CommonAPIClientMockImageSearchParams{ctx, term, options}
	for _, e := range mmImageSearch.expectations {
		if minimock.Equal(e.params, mmImageSearch.defaultExpectation.params) {
			mmImageSearch.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmImageSearch.defaultExpectation.params)
		}
	}

	return mmImageSearch
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ImageSearch
func (mmImageSearch *mCommonAPIClientMockImageSearch) Inspect(f func(ctx context.Context, term string, options types.ImageSearchOptions)) *mCommonAPIClientMockImageSearch {
	if mmImageSearch.mock.inspectFuncImageSearch != nil {
		mmImageSearch.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ImageSearch")
	}

	mmImageSearch.mock.inspectFuncImageSearch = f

	return mmImageSearch
}

// Return sets up results that will be returned by CommonAPIClient.ImageSearch
func (mmImageSearch *mCommonAPIClientMockImageSearch) Return(sa1 []registry.SearchResult, err error) *CommonAPIClientMock {
	if mmImageSearch.mock.funcImageSearch != nil {
		mmImageSearch.mock.t.Fatalf("CommonAPIClientMock.ImageSearch mock is already set by Set")
	}

	if mmImageSearch.defaultExpectation == nil {
		mmImageSearch.defaultExpectation = &CommonAPIClientMockImageSearchExpectation{mock: mmImageSearch.mock}
	}
	mmImageSearch.defaultExpectation.results = &CommonAPIClientMockImageSearchResults{sa1, err}
	return mmImageSearch.mock
}

//Set uses given function f to mock the CommonAPIClient.ImageSearch method
func (mmImageSearch *mCommonAPIClientMockImageSearch) Set(f func(ctx context.Context, term string, options types.ImageSearchOptions) (sa1 []registry.SearchResult, err error)) *CommonAPIClientMock {
	if mmImageSearch.defaultExpectation != nil {
		mmImageSearch.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ImageSearch method")
	}

	if len(mmImageSearch.expectations) > 0 {
		mmImageSearch.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ImageSearch method")
	}

	mmImageSearch.mock.funcImageSearch = f
	return mmImageSearch.mock
}

// When sets expectation for the CommonAPIClient.ImageSearch which will trigger the result defined by the following
// Then helper
func (mmImageSearch *mCommonAPIClientMockImageSearch) When(ctx context.Context, term string, options types.ImageSearchOptions) *CommonAPIClientMockImageSearchExpectation {
	if mmImageSearch.mock.funcImageSearch != nil {
		mmImageSearch.mock.t.Fatalf("CommonAPIClientMock.ImageSearch mock is already set by Set")
	}

	expectation := &CommonAPIClientMockImageSearchExpectation{
		mock:   mmImageSearch.mock,
		params: &CommonAPIClientMockImageSearchParams{ctx, term, options},
	}
	mmImageSearch.expectations = append(mmImageSearch.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ImageSearch return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockImageSearchExpectation) Then(sa1 []registry.SearchResult, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockImageSearchResults{sa1, err}
	return e.mock
}

// ImageSearch implements client.CommonAPIClient
func (mmImageSearch *CommonAPIClientMock) ImageSearch(ctx context.Context, term string, options types.ImageSearchOptions) (sa1 []registry.SearchResult, err error) {
	mm_atomic.AddUint64(&mmImageSearch.beforeImageSearchCounter, 1)
	defer mm_atomic.AddUint64(&mmImageSearch.afterImageSearchCounter, 1)

	if mmImageSearch.inspectFuncImageSearch != nil {
		mmImageSearch.inspectFuncImageSearch(ctx, term, options)
	}

	mm_params := &CommonAPIClientMockImageSearchParams{ctx, term, options}

	// Record call args
	mmImageSearch.ImageSearchMock.mutex.Lock()
	mmImageSearch.ImageSearchMock.callArgs = append(mmImageSearch.ImageSearchMock.callArgs, mm_params)
	mmImageSearch.ImageSearchMock.mutex.Unlock()

	for _, e := range mmImageSearch.ImageSearchMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sa1, e.results.err
		}
	}

	if mmImageSearch.ImageSearchMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmImageSearch.ImageSearchMock.defaultExpectation.Counter, 1)
		mm_want := mmImageSearch.ImageSearchMock.defaultExpectation.params
		mm_got := CommonAPIClientMockImageSearchParams{ctx, term, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmImageSearch.t.Errorf("CommonAPIClientMock.ImageSearch got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmImageSearch.ImageSearchMock.defaultExpectation.results
		if mm_results == nil {
			mmImageSearch.t.Fatal("No results are set for the CommonAPIClientMock.ImageSearch")
		}
		return (*mm_results).sa1, (*mm_results).err
	}
	if mmImageSearch.funcImageSearch != nil {
		return mmImageSearch.funcImageSearch(ctx, term, options)
	}
	mmImageSearch.t.Fatalf("Unexpected call to CommonAPIClientMock.ImageSearch. %v %v %v", ctx, term, options)
	return
}

// ImageSearchAfterCounter returns a count of finished CommonAPIClientMock.ImageSearch invocations
func (mmImageSearch *CommonAPIClientMock) ImageSearchAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImageSearch.afterImageSearchCounter)
}

// ImageSearchBeforeCounter returns a count of CommonAPIClientMock.ImageSearch invocations
func (mmImageSearch *CommonAPIClientMock) ImageSearchBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImageSearch.beforeImageSearchCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ImageSearch.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmImageSearch *mCommonAPIClientMockImageSearch) Calls() []*CommonAPIClientMockImageSearchParams {
	mmImageSearch.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockImageSearchParams, len(mmImageSearch.callArgs))
	copy(argCopy, mmImageSearch.callArgs)

	mmImageSearch.mutex.RUnlock()

	return argCopy
}

// MinimockImageSearchDone returns true if the count of the ImageSearch invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockImageSearchDone() bool {
	for _, e := range m.ImageSearchMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImageSearchMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImageSearchCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImageSearch != nil && mm_atomic.LoadUint64(&m.afterImageSearchCounter) < 1 {
		return false
	}
	return true
}

// MinimockImageSearchInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockImageSearchInspect() {
	for _, e := range m.ImageSearchMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImageSearch with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImageSearchMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImageSearchCounter) < 1 {
		if m.ImageSearchMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ImageSearch")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImageSearch with params: %#v", *m.ImageSearchMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImageSearch != nil && mm_atomic.LoadUint64(&m.afterImageSearchCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ImageSearch")
	}
}

type mCommonAPIClientMockImageTag struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockImageTagExpectation
	expectations       []*CommonAPIClientMockImageTagExpectation

	callArgs []*CommonAPIClientMockImageTagParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockImageTagExpectation specifies expectation struct of the CommonAPIClient.ImageTag
type CommonAPIClientMockImageTagExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockImageTagParams
	results *CommonAPIClientMockImageTagResults
	Counter uint64
}

// CommonAPIClientMockImageTagParams contains parameters of the CommonAPIClient.ImageTag
type CommonAPIClientMockImageTagParams struct {
	ctx   context.Context
	image string
	ref   string
}

// CommonAPIClientMockImageTagResults contains results of the CommonAPIClient.ImageTag
type CommonAPIClientMockImageTagResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.ImageTag
func (mmImageTag *mCommonAPIClientMockImageTag) Expect(ctx context.Context, image string, ref string) *mCommonAPIClientMockImageTag {
	if mmImageTag.mock.funcImageTag != nil {
		mmImageTag.mock.t.Fatalf("CommonAPIClientMock.ImageTag mock is already set by Set")
	}

	if mmImageTag.defaultExpectation == nil {
		mmImageTag.defaultExpectation = &CommonAPIClientMockImageTagExpectation{}
	}

	mmImageTag.defaultExpectation.params = &CommonAPIClientMockImageTagParams{ctx, image, ref}
	for _, e := range mmImageTag.expectations {
		if minimock.Equal(e.params, mmImageTag.defaultExpectation.params) {
			mmImageTag.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmImageTag.defaultExpectation.params)
		}
	}

	return mmImageTag
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ImageTag
func (mmImageTag *mCommonAPIClientMockImageTag) Inspect(f func(ctx context.Context, image string, ref string)) *mCommonAPIClientMockImageTag {
	if mmImageTag.mock.inspectFuncImageTag != nil {
		mmImageTag.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ImageTag")
	}

	mmImageTag.mock.inspectFuncImageTag = f

	return mmImageTag
}

// Return sets up results that will be returned by CommonAPIClient.ImageTag
func (mmImageTag *mCommonAPIClientMockImageTag) Return(err error) *CommonAPIClientMock {
	if mmImageTag.mock.funcImageTag != nil {
		mmImageTag.mock.t.Fatalf("CommonAPIClientMock.ImageTag mock is already set by Set")
	}

	if mmImageTag.defaultExpectation == nil {
		mmImageTag.defaultExpectation = &CommonAPIClientMockImageTagExpectation{mock: mmImageTag.mock}
	}
	mmImageTag.defaultExpectation.results = &CommonAPIClientMockImageTagResults{err}
	return mmImageTag.mock
}

//Set uses given function f to mock the CommonAPIClient.ImageTag method
func (mmImageTag *mCommonAPIClientMockImageTag) Set(f func(ctx context.Context, image string, ref string) (err error)) *CommonAPIClientMock {
	if mmImageTag.defaultExpectation != nil {
		mmImageTag.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ImageTag method")
	}

	if len(mmImageTag.expectations) > 0 {
		mmImageTag.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ImageTag method")
	}

	mmImageTag.mock.funcImageTag = f
	return mmImageTag.mock
}

// When sets expectation for the CommonAPIClient.ImageTag which will trigger the result defined by the following
// Then helper
func (mmImageTag *mCommonAPIClientMockImageTag) When(ctx context.Context, image string, ref string) *CommonAPIClientMockImageTagExpectation {
	if mmImageTag.mock.funcImageTag != nil {
		mmImageTag.mock.t.Fatalf("CommonAPIClientMock.ImageTag mock is already set by Set")
	}

	expectation := &CommonAPIClientMockImageTagExpectation{
		mock:   mmImageTag.mock,
		params: &CommonAPIClientMockImageTagParams{ctx, image, ref},
	}
	mmImageTag.expectations = append(mmImageTag.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ImageTag return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockImageTagExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockImageTagResults{err}
	return e.mock
}

// ImageTag implements client.CommonAPIClient
func (mmImageTag *CommonAPIClientMock) ImageTag(ctx context.Context, image string, ref string) (err error) {
	mm_atomic.AddUint64(&mmImageTag.beforeImageTagCounter, 1)
	defer mm_atomic.AddUint64(&mmImageTag.afterImageTagCounter, 1)

	if mmImageTag.inspectFuncImageTag != nil {
		mmImageTag.inspectFuncImageTag(ctx, image, ref)
	}

	mm_params := &CommonAPIClientMockImageTagParams{ctx, image, ref}

	// Record call args
	mmImageTag.ImageTagMock.mutex.Lock()
	mmImageTag.ImageTagMock.callArgs = append(mmImageTag.ImageTagMock.callArgs, mm_params)
	mmImageTag.ImageTagMock.mutex.Unlock()

	for _, e := range mmImageTag.ImageTagMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmImageTag.ImageTagMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmImageTag.ImageTagMock.defaultExpectation.Counter, 1)
		mm_want := mmImageTag.ImageTagMock.defaultExpectation.params
		mm_got := CommonAPIClientMockImageTagParams{ctx, image, ref}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmImageTag.t.Errorf("CommonAPIClientMock.ImageTag got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmImageTag.ImageTagMock.defaultExpectation.results
		if mm_results == nil {
			mmImageTag.t.Fatal("No results are set for the CommonAPIClientMock.ImageTag")
		}
		return (*mm_results).err
	}
	if mmImageTag.funcImageTag != nil {
		return mmImageTag.funcImageTag(ctx, image, ref)
	}
	mmImageTag.t.Fatalf("Unexpected call to CommonAPIClientMock.ImageTag. %v %v %v", ctx, image, ref)
	return
}

// ImageTagAfterCounter returns a count of finished CommonAPIClientMock.ImageTag invocations
func (mmImageTag *CommonAPIClientMock) ImageTagAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImageTag.afterImageTagCounter)
}

// ImageTagBeforeCounter returns a count of CommonAPIClientMock.ImageTag invocations
func (mmImageTag *CommonAPIClientMock) ImageTagBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImageTag.beforeImageTagCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ImageTag.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmImageTag *mCommonAPIClientMockImageTag) Calls() []*CommonAPIClientMockImageTagParams {
	mmImageTag.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockImageTagParams, len(mmImageTag.callArgs))
	copy(argCopy, mmImageTag.callArgs)

	mmImageTag.mutex.RUnlock()

	return argCopy
}

// MinimockImageTagDone returns true if the count of the ImageTag invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockImageTagDone() bool {
	for _, e := range m.ImageTagMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImageTagMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImageTagCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImageTag != nil && mm_atomic.LoadUint64(&m.afterImageTagCounter) < 1 {
		return false
	}
	return true
}

// MinimockImageTagInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockImageTagInspect() {
	for _, e := range m.ImageTagMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImageTag with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImageTagMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImageTagCounter) < 1 {
		if m.ImageTagMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ImageTag")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImageTag with params: %#v", *m.ImageTagMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImageTag != nil && mm_atomic.LoadUint64(&m.afterImageTagCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ImageTag")
	}
}

type mCommonAPIClientMockImagesPrune struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockImagesPruneExpectation
	expectations       []*CommonAPIClientMockImagesPruneExpectation

	callArgs []*CommonAPIClientMockImagesPruneParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockImagesPruneExpectation specifies expectation struct of the CommonAPIClient.ImagesPrune
type CommonAPIClientMockImagesPruneExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockImagesPruneParams
	results *CommonAPIClientMockImagesPruneResults
	Counter uint64
}

// CommonAPIClientMockImagesPruneParams contains parameters of the CommonAPIClient.ImagesPrune
type CommonAPIClientMockImagesPruneParams struct {
	ctx         context.Context
	pruneFilter filters.Args
}

// CommonAPIClientMockImagesPruneResults contains results of the CommonAPIClient.ImagesPrune
type CommonAPIClientMockImagesPruneResults struct {
	i1  types.ImagesPruneReport
	err error
}

// Expect sets up expected params for CommonAPIClient.ImagesPrune
func (mmImagesPrune *mCommonAPIClientMockImagesPrune) Expect(ctx context.Context, pruneFilter filters.Args) *mCommonAPIClientMockImagesPrune {
	if mmImagesPrune.mock.funcImagesPrune != nil {
		mmImagesPrune.mock.t.Fatalf("CommonAPIClientMock.ImagesPrune mock is already set by Set")
	}

	if mmImagesPrune.defaultExpectation == nil {
		mmImagesPrune.defaultExpectation = &CommonAPIClientMockImagesPruneExpectation{}
	}

	mmImagesPrune.defaultExpectation.params = &CommonAPIClientMockImagesPruneParams{ctx, pruneFilter}
	for _, e := range mmImagesPrune.expectations {
		if minimock.Equal(e.params, mmImagesPrune.defaultExpectation.params) {
			mmImagesPrune.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmImagesPrune.defaultExpectation.params)
		}
	}

	return mmImagesPrune
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ImagesPrune
func (mmImagesPrune *mCommonAPIClientMockImagesPrune) Inspect(f func(ctx context.Context, pruneFilter filters.Args)) *mCommonAPIClientMockImagesPrune {
	if mmImagesPrune.mock.inspectFuncImagesPrune != nil {
		mmImagesPrune.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ImagesPrune")
	}

	mmImagesPrune.mock.inspectFuncImagesPrune = f

	return mmImagesPrune
}

// Return sets up results that will be returned by CommonAPIClient.ImagesPrune
func (mmImagesPrune *mCommonAPIClientMockImagesPrune) Return(i1 types.ImagesPruneReport, err error) *CommonAPIClientMock {
	if mmImagesPrune.mock.funcImagesPrune != nil {
		mmImagesPrune.mock.t.Fatalf("CommonAPIClientMock.ImagesPrune mock is already set by Set")
	}

	if mmImagesPrune.defaultExpectation == nil {
		mmImagesPrune.defaultExpectation = &CommonAPIClientMockImagesPruneExpectation{mock: mmImagesPrune.mock}
	}
	mmImagesPrune.defaultExpectation.results = &CommonAPIClientMockImagesPruneResults{i1, err}
	return mmImagesPrune.mock
}

//Set uses given function f to mock the CommonAPIClient.ImagesPrune method
func (mmImagesPrune *mCommonAPIClientMockImagesPrune) Set(f func(ctx context.Context, pruneFilter filters.Args) (i1 types.ImagesPruneReport, err error)) *CommonAPIClientMock {
	if mmImagesPrune.defaultExpectation != nil {
		mmImagesPrune.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ImagesPrune method")
	}

	if len(mmImagesPrune.expectations) > 0 {
		mmImagesPrune.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ImagesPrune method")
	}

	mmImagesPrune.mock.funcImagesPrune = f
	return mmImagesPrune.mock
}

// When sets expectation for the CommonAPIClient.ImagesPrune which will trigger the result defined by the following
// Then helper
func (mmImagesPrune *mCommonAPIClientMockImagesPrune) When(ctx context.Context, pruneFilter filters.Args) *CommonAPIClientMockImagesPruneExpectation {
	if mmImagesPrune.mock.funcImagesPrune != nil {
		mmImagesPrune.mock.t.Fatalf("CommonAPIClientMock.ImagesPrune mock is already set by Set")
	}

	expectation := &CommonAPIClientMockImagesPruneExpectation{
		mock:   mmImagesPrune.mock,
		params: &CommonAPIClientMockImagesPruneParams{ctx, pruneFilter},
	}
	mmImagesPrune.expectations = append(mmImagesPrune.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ImagesPrune return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockImagesPruneExpectation) Then(i1 types.ImagesPruneReport, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockImagesPruneResults{i1, err}
	return e.mock
}

// ImagesPrune implements client.CommonAPIClient
func (mmImagesPrune *CommonAPIClientMock) ImagesPrune(ctx context.Context, pruneFilter filters.Args) (i1 types.ImagesPruneReport, err error) {
	mm_atomic.AddUint64(&mmImagesPrune.beforeImagesPruneCounter, 1)
	defer mm_atomic.AddUint64(&mmImagesPrune.afterImagesPruneCounter, 1)

	if mmImagesPrune.inspectFuncImagesPrune != nil {
		mmImagesPrune.inspectFuncImagesPrune(ctx, pruneFilter)
	}

	mm_params := &CommonAPIClientMockImagesPruneParams{ctx, pruneFilter}

	// Record call args
	mmImagesPrune.ImagesPruneMock.mutex.Lock()
	mmImagesPrune.ImagesPruneMock.callArgs = append(mmImagesPrune.ImagesPruneMock.callArgs, mm_params)
	mmImagesPrune.ImagesPruneMock.mutex.Unlock()

	for _, e := range mmImagesPrune.ImagesPruneMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmImagesPrune.ImagesPruneMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmImagesPrune.ImagesPruneMock.defaultExpectation.Counter, 1)
		mm_want := mmImagesPrune.ImagesPruneMock.defaultExpectation.params
		mm_got := CommonAPIClientMockImagesPruneParams{ctx, pruneFilter}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmImagesPrune.t.Errorf("CommonAPIClientMock.ImagesPrune got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmImagesPrune.ImagesPruneMock.defaultExpectation.results
		if mm_results == nil {
			mmImagesPrune.t.Fatal("No results are set for the CommonAPIClientMock.ImagesPrune")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmImagesPrune.funcImagesPrune != nil {
		return mmImagesPrune.funcImagesPrune(ctx, pruneFilter)
	}
	mmImagesPrune.t.Fatalf("Unexpected call to CommonAPIClientMock.ImagesPrune. %v %v", ctx, pruneFilter)
	return
}

// ImagesPruneAfterCounter returns a count of finished CommonAPIClientMock.ImagesPrune invocations
func (mmImagesPrune *CommonAPIClientMock) ImagesPruneAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImagesPrune.afterImagesPruneCounter)
}

// ImagesPruneBeforeCounter returns a count of CommonAPIClientMock.ImagesPrune invocations
func (mmImagesPrune *CommonAPIClientMock) ImagesPruneBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmImagesPrune.beforeImagesPruneCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ImagesPrune.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmImagesPrune *mCommonAPIClientMockImagesPrune) Calls() []*CommonAPIClientMockImagesPruneParams {
	mmImagesPrune.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockImagesPruneParams, len(mmImagesPrune.callArgs))
	copy(argCopy, mmImagesPrune.callArgs)

	mmImagesPrune.mutex.RUnlock()

	return argCopy
}

// MinimockImagesPruneDone returns true if the count of the ImagesPrune invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockImagesPruneDone() bool {
	for _, e := range m.ImagesPruneMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImagesPruneMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImagesPruneCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImagesPrune != nil && mm_atomic.LoadUint64(&m.afterImagesPruneCounter) < 1 {
		return false
	}
	return true
}

// MinimockImagesPruneInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockImagesPruneInspect() {
	for _, e := range m.ImagesPruneMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImagesPrune with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ImagesPruneMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterImagesPruneCounter) < 1 {
		if m.ImagesPruneMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ImagesPrune")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ImagesPrune with params: %#v", *m.ImagesPruneMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcImagesPrune != nil && mm_atomic.LoadUint64(&m.afterImagesPruneCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ImagesPrune")
	}
}

type mCommonAPIClientMockInfo struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockInfoExpectation
	expectations       []*CommonAPIClientMockInfoExpectation

	callArgs []*CommonAPIClientMockInfoParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockInfoExpectation specifies expectation struct of the CommonAPIClient.Info
type CommonAPIClientMockInfoExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockInfoParams
	results *CommonAPIClientMockInfoResults
	Counter uint64
}

// CommonAPIClientMockInfoParams contains parameters of the CommonAPIClient.Info
type CommonAPIClientMockInfoParams struct {
	ctx context.Context
}

// CommonAPIClientMockInfoResults contains results of the CommonAPIClient.Info
type CommonAPIClientMockInfoResults struct {
	i1  types.Info
	err error
}

// Expect sets up expected params for CommonAPIClient.Info
func (mmInfo *mCommonAPIClientMockInfo) Expect(ctx context.Context) *mCommonAPIClientMockInfo {
	if mmInfo.mock.funcInfo != nil {
		mmInfo.mock.t.Fatalf("CommonAPIClientMock.Info mock is already set by Set")
	}

	if mmInfo.defaultExpectation == nil {
		mmInfo.defaultExpectation = &CommonAPIClientMockInfoExpectation{}
	}

	mmInfo.defaultExpectation.params = &CommonAPIClientMockInfoParams{ctx}
	for _, e := range mmInfo.expectations {
		if minimock.Equal(e.params, mmInfo.defaultExpectation.params) {
			mmInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmInfo.defaultExpectation.params)
		}
	}

	return mmInfo
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.Info
func (mmInfo *mCommonAPIClientMockInfo) Inspect(f func(ctx context.Context)) *mCommonAPIClientMockInfo {
	if mmInfo.mock.inspectFuncInfo != nil {
		mmInfo.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.Info")
	}

	mmInfo.mock.inspectFuncInfo = f

	return mmInfo
}

// Return sets up results that will be returned by CommonAPIClient.Info
func (mmInfo *mCommonAPIClientMockInfo) Return(i1 types.Info, err error) *CommonAPIClientMock {
	if mmInfo.mock.funcInfo != nil {
		mmInfo.mock.t.Fatalf("CommonAPIClientMock.Info mock is already set by Set")
	}

	if mmInfo.defaultExpectation == nil {
		mmInfo.defaultExpectation = &CommonAPIClientMockInfoExpectation{mock: mmInfo.mock}
	}
	mmInfo.defaultExpectation.results = &CommonAPIClientMockInfoResults{i1, err}
	return mmInfo.mock
}

//Set uses given function f to mock the CommonAPIClient.Info method
func (mmInfo *mCommonAPIClientMockInfo) Set(f func(ctx context.Context) (i1 types.Info, err error)) *CommonAPIClientMock {
	if mmInfo.defaultExpectation != nil {
		mmInfo.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.Info method")
	}

	if len(mmInfo.expectations) > 0 {
		mmInfo.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.Info method")
	}

	mmInfo.mock.funcInfo = f
	return mmInfo.mock
}

// When sets expectation for the CommonAPIClient.Info which will trigger the result defined by the following
// Then helper
func (mmInfo *mCommonAPIClientMockInfo) When(ctx context.Context) *CommonAPIClientMockInfoExpectation {
	if mmInfo.mock.funcInfo != nil {
		mmInfo.mock.t.Fatalf("CommonAPIClientMock.Info mock is already set by Set")
	}

	expectation := &CommonAPIClientMockInfoExpectation{
		mock:   mmInfo.mock,
		params: &CommonAPIClientMockInfoParams{ctx},
	}
	mmInfo.expectations = append(mmInfo.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.Info return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockInfoExpectation) Then(i1 types.Info, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockInfoResults{i1, err}
	return e.mock
}

// Info implements client.CommonAPIClient
func (mmInfo *CommonAPIClientMock) Info(ctx context.Context) (i1 types.Info, err error) {
	mm_atomic.AddUint64(&mmInfo.beforeInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmInfo.afterInfoCounter, 1)

	if mmInfo.inspectFuncInfo != nil {
		mmInfo.inspectFuncInfo(ctx)
	}

	mm_params := &CommonAPIClientMockInfoParams{ctx}

	// Record call args
	mmInfo.InfoMock.mutex.Lock()
	mmInfo.InfoMock.callArgs = append(mmInfo.InfoMock.callArgs, mm_params)
	mmInfo.InfoMock.mutex.Unlock()

	for _, e := range mmInfo.InfoMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmInfo.InfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmInfo.InfoMock.defaultExpectation.Counter, 1)
		mm_want := mmInfo.InfoMock.defaultExpectation.params
		mm_got := CommonAPIClientMockInfoParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmInfo.t.Errorf("CommonAPIClientMock.Info got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmInfo.InfoMock.defaultExpectation.results
		if mm_results == nil {
			mmInfo.t.Fatal("No results are set for the CommonAPIClientMock.Info")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmInfo.funcInfo != nil {
		return mmInfo.funcInfo(ctx)
	}
	mmInfo.t.Fatalf("Unexpected call to CommonAPIClientMock.Info. %v", ctx)
	return
}

// InfoAfterCounter returns a count of finished CommonAPIClientMock.Info invocations
func (mmInfo *CommonAPIClientMock) InfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInfo.afterInfoCounter)
}

// InfoBeforeCounter returns a count of CommonAPIClientMock.Info invocations
func (mmInfo *CommonAPIClientMock) InfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInfo.beforeInfoCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.Info.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmInfo *mCommonAPIClientMockInfo) Calls() []*CommonAPIClientMockInfoParams {
	mmInfo.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockInfoParams, len(mmInfo.callArgs))
	copy(argCopy, mmInfo.callArgs)

	mmInfo.mutex.RUnlock()

	return argCopy
}

// MinimockInfoDone returns true if the count of the Info invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockInfoDone() bool {
	for _, e := range m.InfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInfoCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInfo != nil && mm_atomic.LoadUint64(&m.afterInfoCounter) < 1 {
		return false
	}
	return true
}

// MinimockInfoInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockInfoInspect() {
	for _, e := range m.InfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.Info with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInfoCounter) < 1 {
		if m.InfoMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.Info")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.Info with params: %#v", *m.InfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInfo != nil && mm_atomic.LoadUint64(&m.afterInfoCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.Info")
	}
}

type mCommonAPIClientMockNegotiateAPIVersion struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockNegotiateAPIVersionExpectation
	expectations       []*CommonAPIClientMockNegotiateAPIVersionExpectation

	callArgs []*CommonAPIClientMockNegotiateAPIVersionParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockNegotiateAPIVersionExpectation specifies expectation struct of the CommonAPIClient.NegotiateAPIVersion
type CommonAPIClientMockNegotiateAPIVersionExpectation struct {
	mock   *CommonAPIClientMock
	params *CommonAPIClientMockNegotiateAPIVersionParams

	Counter uint64
}

// CommonAPIClientMockNegotiateAPIVersionParams contains parameters of the CommonAPIClient.NegotiateAPIVersion
type CommonAPIClientMockNegotiateAPIVersionParams struct {
	ctx context.Context
}

// Expect sets up expected params for CommonAPIClient.NegotiateAPIVersion
func (mmNegotiateAPIVersion *mCommonAPIClientMockNegotiateAPIVersion) Expect(ctx context.Context) *mCommonAPIClientMockNegotiateAPIVersion {
	if mmNegotiateAPIVersion.mock.funcNegotiateAPIVersion != nil {
		mmNegotiateAPIVersion.mock.t.Fatalf("CommonAPIClientMock.NegotiateAPIVersion mock is already set by Set")
	}

	if mmNegotiateAPIVersion.defaultExpectation == nil {
		mmNegotiateAPIVersion.defaultExpectation = &CommonAPIClientMockNegotiateAPIVersionExpectation{}
	}

	mmNegotiateAPIVersion.defaultExpectation.params = &CommonAPIClientMockNegotiateAPIVersionParams{ctx}
	for _, e := range mmNegotiateAPIVersion.expectations {
		if minimock.Equal(e.params, mmNegotiateAPIVersion.defaultExpectation.params) {
			mmNegotiateAPIVersion.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNegotiateAPIVersion.defaultExpectation.params)
		}
	}

	return mmNegotiateAPIVersion
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.NegotiateAPIVersion
func (mmNegotiateAPIVersion *mCommonAPIClientMockNegotiateAPIVersion) Inspect(f func(ctx context.Context)) *mCommonAPIClientMockNegotiateAPIVersion {
	if mmNegotiateAPIVersion.mock.inspectFuncNegotiateAPIVersion != nil {
		mmNegotiateAPIVersion.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.NegotiateAPIVersion")
	}

	mmNegotiateAPIVersion.mock.inspectFuncNegotiateAPIVersion = f

	return mmNegotiateAPIVersion
}

// Return sets up results that will be returned by CommonAPIClient.NegotiateAPIVersion
func (mmNegotiateAPIVersion *mCommonAPIClientMockNegotiateAPIVersion) Return() *CommonAPIClientMock {
	if mmNegotiateAPIVersion.mock.funcNegotiateAPIVersion != nil {
		mmNegotiateAPIVersion.mock.t.Fatalf("CommonAPIClientMock.NegotiateAPIVersion mock is already set by Set")
	}

	if mmNegotiateAPIVersion.defaultExpectation == nil {
		mmNegotiateAPIVersion.defaultExpectation = &CommonAPIClientMockNegotiateAPIVersionExpectation{mock: mmNegotiateAPIVersion.mock}
	}

	return mmNegotiateAPIVersion.mock
}

//Set uses given function f to mock the CommonAPIClient.NegotiateAPIVersion method
func (mmNegotiateAPIVersion *mCommonAPIClientMockNegotiateAPIVersion) Set(f func(ctx context.Context)) *CommonAPIClientMock {
	if mmNegotiateAPIVersion.defaultExpectation != nil {
		mmNegotiateAPIVersion.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.NegotiateAPIVersion method")
	}

	if len(mmNegotiateAPIVersion.expectations) > 0 {
		mmNegotiateAPIVersion.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.NegotiateAPIVersion method")
	}

	mmNegotiateAPIVersion.mock.funcNegotiateAPIVersion = f
	return mmNegotiateAPIVersion.mock
}

// NegotiateAPIVersion implements client.CommonAPIClient
func (mmNegotiateAPIVersion *CommonAPIClientMock) NegotiateAPIVersion(ctx context.Context) {
	mm_atomic.AddUint64(&mmNegotiateAPIVersion.beforeNegotiateAPIVersionCounter, 1)
	defer mm_atomic.AddUint64(&mmNegotiateAPIVersion.afterNegotiateAPIVersionCounter, 1)

	if mmNegotiateAPIVersion.inspectFuncNegotiateAPIVersion != nil {
		mmNegotiateAPIVersion.inspectFuncNegotiateAPIVersion(ctx)
	}

	mm_params := &CommonAPIClientMockNegotiateAPIVersionParams{ctx}

	// Record call args
	mmNegotiateAPIVersion.NegotiateAPIVersionMock.mutex.Lock()
	mmNegotiateAPIVersion.NegotiateAPIVersionMock.callArgs = append(mmNegotiateAPIVersion.NegotiateAPIVersionMock.callArgs, mm_params)
	mmNegotiateAPIVersion.NegotiateAPIVersionMock.mutex.Unlock()

	for _, e := range mmNegotiateAPIVersion.NegotiateAPIVersionMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmNegotiateAPIVersion.NegotiateAPIVersionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNegotiateAPIVersion.NegotiateAPIVersionMock.defaultExpectation.Counter, 1)
		mm_want := mmNegotiateAPIVersion.NegotiateAPIVersionMock.defaultExpectation.params
		mm_got := CommonAPIClientMockNegotiateAPIVersionParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNegotiateAPIVersion.t.Errorf("CommonAPIClientMock.NegotiateAPIVersion got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmNegotiateAPIVersion.funcNegotiateAPIVersion != nil {
		mmNegotiateAPIVersion.funcNegotiateAPIVersion(ctx)
		return
	}
	mmNegotiateAPIVersion.t.Fatalf("Unexpected call to CommonAPIClientMock.NegotiateAPIVersion. %v", ctx)

}

// NegotiateAPIVersionAfterCounter returns a count of finished CommonAPIClientMock.NegotiateAPIVersion invocations
func (mmNegotiateAPIVersion *CommonAPIClientMock) NegotiateAPIVersionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNegotiateAPIVersion.afterNegotiateAPIVersionCounter)
}

// NegotiateAPIVersionBeforeCounter returns a count of CommonAPIClientMock.NegotiateAPIVersion invocations
func (mmNegotiateAPIVersion *CommonAPIClientMock) NegotiateAPIVersionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNegotiateAPIVersion.beforeNegotiateAPIVersionCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.NegotiateAPIVersion.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNegotiateAPIVersion *mCommonAPIClientMockNegotiateAPIVersion) Calls() []*CommonAPIClientMockNegotiateAPIVersionParams {
	mmNegotiateAPIVersion.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockNegotiateAPIVersionParams, len(mmNegotiateAPIVersion.callArgs))
	copy(argCopy, mmNegotiateAPIVersion.callArgs)

	mmNegotiateAPIVersion.mutex.RUnlock()

	return argCopy
}

// MinimockNegotiateAPIVersionDone returns true if the count of the NegotiateAPIVersion invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockNegotiateAPIVersionDone() bool {
	for _, e := range m.NegotiateAPIVersionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NegotiateAPIVersionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNegotiateAPIVersionCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNegotiateAPIVersion != nil && mm_atomic.LoadUint64(&m.afterNegotiateAPIVersionCounter) < 1 {
		return false
	}
	return true
}

// MinimockNegotiateAPIVersionInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockNegotiateAPIVersionInspect() {
	for _, e := range m.NegotiateAPIVersionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.NegotiateAPIVersion with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NegotiateAPIVersionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNegotiateAPIVersionCounter) < 1 {
		if m.NegotiateAPIVersionMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.NegotiateAPIVersion")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.NegotiateAPIVersion with params: %#v", *m.NegotiateAPIVersionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNegotiateAPIVersion != nil && mm_atomic.LoadUint64(&m.afterNegotiateAPIVersionCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.NegotiateAPIVersion")
	}
}

type mCommonAPIClientMockNegotiateAPIVersionPing struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockNegotiateAPIVersionPingExpectation
	expectations       []*CommonAPIClientMockNegotiateAPIVersionPingExpectation

	callArgs []*CommonAPIClientMockNegotiateAPIVersionPingParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockNegotiateAPIVersionPingExpectation specifies expectation struct of the CommonAPIClient.NegotiateAPIVersionPing
type CommonAPIClientMockNegotiateAPIVersionPingExpectation struct {
	mock   *CommonAPIClientMock
	params *CommonAPIClientMockNegotiateAPIVersionPingParams

	Counter uint64
}

// CommonAPIClientMockNegotiateAPIVersionPingParams contains parameters of the CommonAPIClient.NegotiateAPIVersionPing
type CommonAPIClientMockNegotiateAPIVersionPingParams struct {
	p1 types.Ping
}

// Expect sets up expected params for CommonAPIClient.NegotiateAPIVersionPing
func (mmNegotiateAPIVersionPing *mCommonAPIClientMockNegotiateAPIVersionPing) Expect(p1 types.Ping) *mCommonAPIClientMockNegotiateAPIVersionPing {
	if mmNegotiateAPIVersionPing.mock.funcNegotiateAPIVersionPing != nil {
		mmNegotiateAPIVersionPing.mock.t.Fatalf("CommonAPIClientMock.NegotiateAPIVersionPing mock is already set by Set")
	}

	if mmNegotiateAPIVersionPing.defaultExpectation == nil {
		mmNegotiateAPIVersionPing.defaultExpectation = &CommonAPIClientMockNegotiateAPIVersionPingExpectation{}
	}

	mmNegotiateAPIVersionPing.defaultExpectation.params = &CommonAPIClientMockNegotiateAPIVersionPingParams{p1}
	for _, e := range mmNegotiateAPIVersionPing.expectations {
		if minimock.Equal(e.params, mmNegotiateAPIVersionPing.defaultExpectation.params) {
			mmNegotiateAPIVersionPing.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNegotiateAPIVersionPing.defaultExpectation.params)
		}
	}

	return mmNegotiateAPIVersionPing
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.NegotiateAPIVersionPing
func (mmNegotiateAPIVersionPing *mCommonAPIClientMockNegotiateAPIVersionPing) Inspect(f func(p1 types.Ping)) *mCommonAPIClientMockNegotiateAPIVersionPing {
	if mmNegotiateAPIVersionPing.mock.inspectFuncNegotiateAPIVersionPing != nil {
		mmNegotiateAPIVersionPing.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.NegotiateAPIVersionPing")
	}

	mmNegotiateAPIVersionPing.mock.inspectFuncNegotiateAPIVersionPing = f

	return mmNegotiateAPIVersionPing
}

// Return sets up results that will be returned by CommonAPIClient.NegotiateAPIVersionPing
func (mmNegotiateAPIVersionPing *mCommonAPIClientMockNegotiateAPIVersionPing) Return() *CommonAPIClientMock {
	if mmNegotiateAPIVersionPing.mock.funcNegotiateAPIVersionPing != nil {
		mmNegotiateAPIVersionPing.mock.t.Fatalf("CommonAPIClientMock.NegotiateAPIVersionPing mock is already set by Set")
	}

	if mmNegotiateAPIVersionPing.defaultExpectation == nil {
		mmNegotiateAPIVersionPing.defaultExpectation = &CommonAPIClientMockNegotiateAPIVersionPingExpectation{mock: mmNegotiateAPIVersionPing.mock}
	}

	return mmNegotiateAPIVersionPing.mock
}

//Set uses given function f to mock the CommonAPIClient.NegotiateAPIVersionPing method
func (mmNegotiateAPIVersionPing *mCommonAPIClientMockNegotiateAPIVersionPing) Set(f func(p1 types.Ping)) *CommonAPIClientMock {
	if mmNegotiateAPIVersionPing.defaultExpectation != nil {
		mmNegotiateAPIVersionPing.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.NegotiateAPIVersionPing method")
	}

	if len(mmNegotiateAPIVersionPing.expectations) > 0 {
		mmNegotiateAPIVersionPing.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.NegotiateAPIVersionPing method")
	}

	mmNegotiateAPIVersionPing.mock.funcNegotiateAPIVersionPing = f
	return mmNegotiateAPIVersionPing.mock
}

// NegotiateAPIVersionPing implements client.CommonAPIClient
func (mmNegotiateAPIVersionPing *CommonAPIClientMock) NegotiateAPIVersionPing(p1 types.Ping) {
	mm_atomic.AddUint64(&mmNegotiateAPIVersionPing.beforeNegotiateAPIVersionPingCounter, 1)
	defer mm_atomic.AddUint64(&mmNegotiateAPIVersionPing.afterNegotiateAPIVersionPingCounter, 1)

	if mmNegotiateAPIVersionPing.inspectFuncNegotiateAPIVersionPing != nil {
		mmNegotiateAPIVersionPing.inspectFuncNegotiateAPIVersionPing(p1)
	}

	mm_params := &CommonAPIClientMockNegotiateAPIVersionPingParams{p1}

	// Record call args
	mmNegotiateAPIVersionPing.NegotiateAPIVersionPingMock.mutex.Lock()
	mmNegotiateAPIVersionPing.NegotiateAPIVersionPingMock.callArgs = append(mmNegotiateAPIVersionPing.NegotiateAPIVersionPingMock.callArgs, mm_params)
	mmNegotiateAPIVersionPing.NegotiateAPIVersionPingMock.mutex.Unlock()

	for _, e := range mmNegotiateAPIVersionPing.NegotiateAPIVersionPingMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmNegotiateAPIVersionPing.NegotiateAPIVersionPingMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNegotiateAPIVersionPing.NegotiateAPIVersionPingMock.defaultExpectation.Counter, 1)
		mm_want := mmNegotiateAPIVersionPing.NegotiateAPIVersionPingMock.defaultExpectation.params
		mm_got := CommonAPIClientMockNegotiateAPIVersionPingParams{p1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNegotiateAPIVersionPing.t.Errorf("CommonAPIClientMock.NegotiateAPIVersionPing got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmNegotiateAPIVersionPing.funcNegotiateAPIVersionPing != nil {
		mmNegotiateAPIVersionPing.funcNegotiateAPIVersionPing(p1)
		return
	}
	mmNegotiateAPIVersionPing.t.Fatalf("Unexpected call to CommonAPIClientMock.NegotiateAPIVersionPing. %v", p1)

}

// NegotiateAPIVersionPingAfterCounter returns a count of finished CommonAPIClientMock.NegotiateAPIVersionPing invocations
func (mmNegotiateAPIVersionPing *CommonAPIClientMock) NegotiateAPIVersionPingAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNegotiateAPIVersionPing.afterNegotiateAPIVersionPingCounter)
}

// NegotiateAPIVersionPingBeforeCounter returns a count of CommonAPIClientMock.NegotiateAPIVersionPing invocations
func (mmNegotiateAPIVersionPing *CommonAPIClientMock) NegotiateAPIVersionPingBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNegotiateAPIVersionPing.beforeNegotiateAPIVersionPingCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.NegotiateAPIVersionPing.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNegotiateAPIVersionPing *mCommonAPIClientMockNegotiateAPIVersionPing) Calls() []*CommonAPIClientMockNegotiateAPIVersionPingParams {
	mmNegotiateAPIVersionPing.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockNegotiateAPIVersionPingParams, len(mmNegotiateAPIVersionPing.callArgs))
	copy(argCopy, mmNegotiateAPIVersionPing.callArgs)

	mmNegotiateAPIVersionPing.mutex.RUnlock()

	return argCopy
}

// MinimockNegotiateAPIVersionPingDone returns true if the count of the NegotiateAPIVersionPing invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockNegotiateAPIVersionPingDone() bool {
	for _, e := range m.NegotiateAPIVersionPingMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NegotiateAPIVersionPingMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNegotiateAPIVersionPingCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNegotiateAPIVersionPing != nil && mm_atomic.LoadUint64(&m.afterNegotiateAPIVersionPingCounter) < 1 {
		return false
	}
	return true
}

// MinimockNegotiateAPIVersionPingInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockNegotiateAPIVersionPingInspect() {
	for _, e := range m.NegotiateAPIVersionPingMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.NegotiateAPIVersionPing with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NegotiateAPIVersionPingMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNegotiateAPIVersionPingCounter) < 1 {
		if m.NegotiateAPIVersionPingMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.NegotiateAPIVersionPing")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.NegotiateAPIVersionPing with params: %#v", *m.NegotiateAPIVersionPingMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNegotiateAPIVersionPing != nil && mm_atomic.LoadUint64(&m.afterNegotiateAPIVersionPingCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.NegotiateAPIVersionPing")
	}
}

type mCommonAPIClientMockNetworkConnect struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockNetworkConnectExpectation
	expectations       []*CommonAPIClientMockNetworkConnectExpectation

	callArgs []*CommonAPIClientMockNetworkConnectParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockNetworkConnectExpectation specifies expectation struct of the CommonAPIClient.NetworkConnect
type CommonAPIClientMockNetworkConnectExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockNetworkConnectParams
	results *CommonAPIClientMockNetworkConnectResults
	Counter uint64
}

// CommonAPIClientMockNetworkConnectParams contains parameters of the CommonAPIClient.NetworkConnect
type CommonAPIClientMockNetworkConnectParams struct {
	ctx       context.Context
	network   string
	container string
	config    *networktypes.EndpointSettings
}

// CommonAPIClientMockNetworkConnectResults contains results of the CommonAPIClient.NetworkConnect
type CommonAPIClientMockNetworkConnectResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.NetworkConnect
func (mmNetworkConnect *mCommonAPIClientMockNetworkConnect) Expect(ctx context.Context, network string, container string, config *networktypes.EndpointSettings) *mCommonAPIClientMockNetworkConnect {
	if mmNetworkConnect.mock.funcNetworkConnect != nil {
		mmNetworkConnect.mock.t.Fatalf("CommonAPIClientMock.NetworkConnect mock is already set by Set")
	}

	if mmNetworkConnect.defaultExpectation == nil {
		mmNetworkConnect.defaultExpectation = &CommonAPIClientMockNetworkConnectExpectation{}
	}

	mmNetworkConnect.defaultExpectation.params = &CommonAPIClientMockNetworkConnectParams{ctx, network, container, config}
	for _, e := range mmNetworkConnect.expectations {
		if minimock.Equal(e.params, mmNetworkConnect.defaultExpectation.params) {
			mmNetworkConnect.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNetworkConnect.defaultExpectation.params)
		}
	}

	return mmNetworkConnect
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.NetworkConnect
func (mmNetworkConnect *mCommonAPIClientMockNetworkConnect) Inspect(f func(ctx context.Context, network string, container string, config *networktypes.EndpointSettings)) *mCommonAPIClientMockNetworkConnect {
	if mmNetworkConnect.mock.inspectFuncNetworkConnect != nil {
		mmNetworkConnect.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.NetworkConnect")
	}

	mmNetworkConnect.mock.inspectFuncNetworkConnect = f

	return mmNetworkConnect
}

// Return sets up results that will be returned by CommonAPIClient.NetworkConnect
func (mmNetworkConnect *mCommonAPIClientMockNetworkConnect) Return(err error) *CommonAPIClientMock {
	if mmNetworkConnect.mock.funcNetworkConnect != nil {
		mmNetworkConnect.mock.t.Fatalf("CommonAPIClientMock.NetworkConnect mock is already set by Set")
	}

	if mmNetworkConnect.defaultExpectation == nil {
		mmNetworkConnect.defaultExpectation = &CommonAPIClientMockNetworkConnectExpectation{mock: mmNetworkConnect.mock}
	}
	mmNetworkConnect.defaultExpectation.results = &CommonAPIClientMockNetworkConnectResults{err}
	return mmNetworkConnect.mock
}

//Set uses given function f to mock the CommonAPIClient.NetworkConnect method
func (mmNetworkConnect *mCommonAPIClientMockNetworkConnect) Set(f func(ctx context.Context, network string, container string, config *networktypes.EndpointSettings) (err error)) *CommonAPIClientMock {
	if mmNetworkConnect.defaultExpectation != nil {
		mmNetworkConnect.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.NetworkConnect method")
	}

	if len(mmNetworkConnect.expectations) > 0 {
		mmNetworkConnect.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.NetworkConnect method")
	}

	mmNetworkConnect.mock.funcNetworkConnect = f
	return mmNetworkConnect.mock
}

// When sets expectation for the CommonAPIClient.NetworkConnect which will trigger the result defined by the following
// Then helper
func (mmNetworkConnect *mCommonAPIClientMockNetworkConnect) When(ctx context.Context, network string, container string, config *networktypes.EndpointSettings) *CommonAPIClientMockNetworkConnectExpectation {
	if mmNetworkConnect.mock.funcNetworkConnect != nil {
		mmNetworkConnect.mock.t.Fatalf("CommonAPIClientMock.NetworkConnect mock is already set by Set")
	}

	expectation := &CommonAPIClientMockNetworkConnectExpectation{
		mock:   mmNetworkConnect.mock,
		params: &CommonAPIClientMockNetworkConnectParams{ctx, network, container, config},
	}
	mmNetworkConnect.expectations = append(mmNetworkConnect.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.NetworkConnect return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockNetworkConnectExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockNetworkConnectResults{err}
	return e.mock
}

// NetworkConnect implements client.CommonAPIClient
func (mmNetworkConnect *CommonAPIClientMock) NetworkConnect(ctx context.Context, network string, container string, config *networktypes.EndpointSettings) (err error) {
	mm_atomic.AddUint64(&mmNetworkConnect.beforeNetworkConnectCounter, 1)
	defer mm_atomic.AddUint64(&mmNetworkConnect.afterNetworkConnectCounter, 1)

	if mmNetworkConnect.inspectFuncNetworkConnect != nil {
		mmNetworkConnect.inspectFuncNetworkConnect(ctx, network, container, config)
	}

	mm_params := &CommonAPIClientMockNetworkConnectParams{ctx, network, container, config}

	// Record call args
	mmNetworkConnect.NetworkConnectMock.mutex.Lock()
	mmNetworkConnect.NetworkConnectMock.callArgs = append(mmNetworkConnect.NetworkConnectMock.callArgs, mm_params)
	mmNetworkConnect.NetworkConnectMock.mutex.Unlock()

	for _, e := range mmNetworkConnect.NetworkConnectMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmNetworkConnect.NetworkConnectMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNetworkConnect.NetworkConnectMock.defaultExpectation.Counter, 1)
		mm_want := mmNetworkConnect.NetworkConnectMock.defaultExpectation.params
		mm_got := CommonAPIClientMockNetworkConnectParams{ctx, network, container, config}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNetworkConnect.t.Errorf("CommonAPIClientMock.NetworkConnect got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmNetworkConnect.NetworkConnectMock.defaultExpectation.results
		if mm_results == nil {
			mmNetworkConnect.t.Fatal("No results are set for the CommonAPIClientMock.NetworkConnect")
		}
		return (*mm_results).err
	}
	if mmNetworkConnect.funcNetworkConnect != nil {
		return mmNetworkConnect.funcNetworkConnect(ctx, network, container, config)
	}
	mmNetworkConnect.t.Fatalf("Unexpected call to CommonAPIClientMock.NetworkConnect. %v %v %v %v", ctx, network, container, config)
	return
}

// NetworkConnectAfterCounter returns a count of finished CommonAPIClientMock.NetworkConnect invocations
func (mmNetworkConnect *CommonAPIClientMock) NetworkConnectAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNetworkConnect.afterNetworkConnectCounter)
}

// NetworkConnectBeforeCounter returns a count of CommonAPIClientMock.NetworkConnect invocations
func (mmNetworkConnect *CommonAPIClientMock) NetworkConnectBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNetworkConnect.beforeNetworkConnectCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.NetworkConnect.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNetworkConnect *mCommonAPIClientMockNetworkConnect) Calls() []*CommonAPIClientMockNetworkConnectParams {
	mmNetworkConnect.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockNetworkConnectParams, len(mmNetworkConnect.callArgs))
	copy(argCopy, mmNetworkConnect.callArgs)

	mmNetworkConnect.mutex.RUnlock()

	return argCopy
}

// MinimockNetworkConnectDone returns true if the count of the NetworkConnect invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockNetworkConnectDone() bool {
	for _, e := range m.NetworkConnectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NetworkConnectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNetworkConnectCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNetworkConnect != nil && mm_atomic.LoadUint64(&m.afterNetworkConnectCounter) < 1 {
		return false
	}
	return true
}

// MinimockNetworkConnectInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockNetworkConnectInspect() {
	for _, e := range m.NetworkConnectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.NetworkConnect with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NetworkConnectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNetworkConnectCounter) < 1 {
		if m.NetworkConnectMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.NetworkConnect")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.NetworkConnect with params: %#v", *m.NetworkConnectMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNetworkConnect != nil && mm_atomic.LoadUint64(&m.afterNetworkConnectCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.NetworkConnect")
	}
}

type mCommonAPIClientMockNetworkCreate struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockNetworkCreateExpectation
	expectations       []*CommonAPIClientMockNetworkCreateExpectation

	callArgs []*CommonAPIClientMockNetworkCreateParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockNetworkCreateExpectation specifies expectation struct of the CommonAPIClient.NetworkCreate
type CommonAPIClientMockNetworkCreateExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockNetworkCreateParams
	results *CommonAPIClientMockNetworkCreateResults
	Counter uint64
}

// CommonAPIClientMockNetworkCreateParams contains parameters of the CommonAPIClient.NetworkCreate
type CommonAPIClientMockNetworkCreateParams struct {
	ctx     context.Context
	name    string
	options types.NetworkCreate
}

// CommonAPIClientMockNetworkCreateResults contains results of the CommonAPIClient.NetworkCreate
type CommonAPIClientMockNetworkCreateResults struct {
	n1  types.NetworkCreateResponse
	err error
}

// Expect sets up expected params for CommonAPIClient.NetworkCreate
func (mmNetworkCreate *mCommonAPIClientMockNetworkCreate) Expect(ctx context.Context, name string, options types.NetworkCreate) *mCommonAPIClientMockNetworkCreate {
	if mmNetworkCreate.mock.funcNetworkCreate != nil {
		mmNetworkCreate.mock.t.Fatalf("CommonAPIClientMock.NetworkCreate mock is already set by Set")
	}

	if mmNetworkCreate.defaultExpectation == nil {
		mmNetworkCreate.defaultExpectation = &CommonAPIClientMockNetworkCreateExpectation{}
	}

	mmNetworkCreate.defaultExpectation.params = &CommonAPIClientMockNetworkCreateParams{ctx, name, options}
	for _, e := range mmNetworkCreate.expectations {
		if minimock.Equal(e.params, mmNetworkCreate.defaultExpectation.params) {
			mmNetworkCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNetworkCreate.defaultExpectation.params)
		}
	}

	return mmNetworkCreate
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.NetworkCreate
func (mmNetworkCreate *mCommonAPIClientMockNetworkCreate) Inspect(f func(ctx context.Context, name string, options types.NetworkCreate)) *mCommonAPIClientMockNetworkCreate {
	if mmNetworkCreate.mock.inspectFuncNetworkCreate != nil {
		mmNetworkCreate.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.NetworkCreate")
	}

	mmNetworkCreate.mock.inspectFuncNetworkCreate = f

	return mmNetworkCreate
}

// Return sets up results that will be returned by CommonAPIClient.NetworkCreate
func (mmNetworkCreate *mCommonAPIClientMockNetworkCreate) Return(n1 types.NetworkCreateResponse, err error) *CommonAPIClientMock {
	if mmNetworkCreate.mock.funcNetworkCreate != nil {
		mmNetworkCreate.mock.t.Fatalf("CommonAPIClientMock.NetworkCreate mock is already set by Set")
	}

	if mmNetworkCreate.defaultExpectation == nil {
		mmNetworkCreate.defaultExpectation = &CommonAPIClientMockNetworkCreateExpectation{mock: mmNetworkCreate.mock}
	}
	mmNetworkCreate.defaultExpectation.results = &CommonAPIClientMockNetworkCreateResults{n1, err}
	return mmNetworkCreate.mock
}

//Set uses given function f to mock the CommonAPIClient.NetworkCreate method
func (mmNetworkCreate *mCommonAPIClientMockNetworkCreate) Set(f func(ctx context.Context, name string, options types.NetworkCreate) (n1 types.NetworkCreateResponse, err error)) *CommonAPIClientMock {
	if mmNetworkCreate.defaultExpectation != nil {
		mmNetworkCreate.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.NetworkCreate method")
	}

	if len(mmNetworkCreate.expectations) > 0 {
		mmNetworkCreate.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.NetworkCreate method")
	}

	mmNetworkCreate.mock.funcNetworkCreate = f
	return mmNetworkCreate.mock
}

// When sets expectation for the CommonAPIClient.NetworkCreate which will trigger the result defined by the following
// Then helper
func (mmNetworkCreate *mCommonAPIClientMockNetworkCreate) When(ctx context.Context, name string, options types.NetworkCreate) *CommonAPIClientMockNetworkCreateExpectation {
	if mmNetworkCreate.mock.funcNetworkCreate != nil {
		mmNetworkCreate.mock.t.Fatalf("CommonAPIClientMock.NetworkCreate mock is already set by Set")
	}

	expectation := &CommonAPIClientMockNetworkCreateExpectation{
		mock:   mmNetworkCreate.mock,
		params: &CommonAPIClientMockNetworkCreateParams{ctx, name, options},
	}
	mmNetworkCreate.expectations = append(mmNetworkCreate.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.NetworkCreate return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockNetworkCreateExpectation) Then(n1 types.NetworkCreateResponse, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockNetworkCreateResults{n1, err}
	return e.mock
}

// NetworkCreate implements client.CommonAPIClient
func (mmNetworkCreate *CommonAPIClientMock) NetworkCreate(ctx context.Context, name string, options types.NetworkCreate) (n1 types.NetworkCreateResponse, err error) {
	mm_atomic.AddUint64(&mmNetworkCreate.beforeNetworkCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmNetworkCreate.afterNetworkCreateCounter, 1)

	if mmNetworkCreate.inspectFuncNetworkCreate != nil {
		mmNetworkCreate.inspectFuncNetworkCreate(ctx, name, options)
	}

	mm_params := &CommonAPIClientMockNetworkCreateParams{ctx, name, options}

	// Record call args
	mmNetworkCreate.NetworkCreateMock.mutex.Lock()
	mmNetworkCreate.NetworkCreateMock.callArgs = append(mmNetworkCreate.NetworkCreateMock.callArgs, mm_params)
	mmNetworkCreate.NetworkCreateMock.mutex.Unlock()

	for _, e := range mmNetworkCreate.NetworkCreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.n1, e.results.err
		}
	}

	if mmNetworkCreate.NetworkCreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNetworkCreate.NetworkCreateMock.defaultExpectation.Counter, 1)
		mm_want := mmNetworkCreate.NetworkCreateMock.defaultExpectation.params
		mm_got := CommonAPIClientMockNetworkCreateParams{ctx, name, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNetworkCreate.t.Errorf("CommonAPIClientMock.NetworkCreate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmNetworkCreate.NetworkCreateMock.defaultExpectation.results
		if mm_results == nil {
			mmNetworkCreate.t.Fatal("No results are set for the CommonAPIClientMock.NetworkCreate")
		}
		return (*mm_results).n1, (*mm_results).err
	}
	if mmNetworkCreate.funcNetworkCreate != nil {
		return mmNetworkCreate.funcNetworkCreate(ctx, name, options)
	}
	mmNetworkCreate.t.Fatalf("Unexpected call to CommonAPIClientMock.NetworkCreate. %v %v %v", ctx, name, options)
	return
}

// NetworkCreateAfterCounter returns a count of finished CommonAPIClientMock.NetworkCreate invocations
func (mmNetworkCreate *CommonAPIClientMock) NetworkCreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNetworkCreate.afterNetworkCreateCounter)
}

// NetworkCreateBeforeCounter returns a count of CommonAPIClientMock.NetworkCreate invocations
func (mmNetworkCreate *CommonAPIClientMock) NetworkCreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNetworkCreate.beforeNetworkCreateCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.NetworkCreate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNetworkCreate *mCommonAPIClientMockNetworkCreate) Calls() []*CommonAPIClientMockNetworkCreateParams {
	mmNetworkCreate.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockNetworkCreateParams, len(mmNetworkCreate.callArgs))
	copy(argCopy, mmNetworkCreate.callArgs)

	mmNetworkCreate.mutex.RUnlock()

	return argCopy
}

// MinimockNetworkCreateDone returns true if the count of the NetworkCreate invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockNetworkCreateDone() bool {
	for _, e := range m.NetworkCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NetworkCreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNetworkCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNetworkCreate != nil && mm_atomic.LoadUint64(&m.afterNetworkCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockNetworkCreateInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockNetworkCreateInspect() {
	for _, e := range m.NetworkCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.NetworkCreate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NetworkCreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNetworkCreateCounter) < 1 {
		if m.NetworkCreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.NetworkCreate")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.NetworkCreate with params: %#v", *m.NetworkCreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNetworkCreate != nil && mm_atomic.LoadUint64(&m.afterNetworkCreateCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.NetworkCreate")
	}
}

type mCommonAPIClientMockNetworkDisconnect struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockNetworkDisconnectExpectation
	expectations       []*CommonAPIClientMockNetworkDisconnectExpectation

	callArgs []*CommonAPIClientMockNetworkDisconnectParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockNetworkDisconnectExpectation specifies expectation struct of the CommonAPIClient.NetworkDisconnect
type CommonAPIClientMockNetworkDisconnectExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockNetworkDisconnectParams
	results *CommonAPIClientMockNetworkDisconnectResults
	Counter uint64
}

// CommonAPIClientMockNetworkDisconnectParams contains parameters of the CommonAPIClient.NetworkDisconnect
type CommonAPIClientMockNetworkDisconnectParams struct {
	ctx       context.Context
	network   string
	container string
	force     bool
}

// CommonAPIClientMockNetworkDisconnectResults contains results of the CommonAPIClient.NetworkDisconnect
type CommonAPIClientMockNetworkDisconnectResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.NetworkDisconnect
func (mmNetworkDisconnect *mCommonAPIClientMockNetworkDisconnect) Expect(ctx context.Context, network string, container string, force bool) *mCommonAPIClientMockNetworkDisconnect {
	if mmNetworkDisconnect.mock.funcNetworkDisconnect != nil {
		mmNetworkDisconnect.mock.t.Fatalf("CommonAPIClientMock.NetworkDisconnect mock is already set by Set")
	}

	if mmNetworkDisconnect.defaultExpectation == nil {
		mmNetworkDisconnect.defaultExpectation = &CommonAPIClientMockNetworkDisconnectExpectation{}
	}

	mmNetworkDisconnect.defaultExpectation.params = &CommonAPIClientMockNetworkDisconnectParams{ctx, network, container, force}
	for _, e := range mmNetworkDisconnect.expectations {
		if minimock.Equal(e.params, mmNetworkDisconnect.defaultExpectation.params) {
			mmNetworkDisconnect.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNetworkDisconnect.defaultExpectation.params)
		}
	}

	return mmNetworkDisconnect
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.NetworkDisconnect
func (mmNetworkDisconnect *mCommonAPIClientMockNetworkDisconnect) Inspect(f func(ctx context.Context, network string, container string, force bool)) *mCommonAPIClientMockNetworkDisconnect {
	if mmNetworkDisconnect.mock.inspectFuncNetworkDisconnect != nil {
		mmNetworkDisconnect.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.NetworkDisconnect")
	}

	mmNetworkDisconnect.mock.inspectFuncNetworkDisconnect = f

	return mmNetworkDisconnect
}

// Return sets up results that will be returned by CommonAPIClient.NetworkDisconnect
func (mmNetworkDisconnect *mCommonAPIClientMockNetworkDisconnect) Return(err error) *CommonAPIClientMock {
	if mmNetworkDisconnect.mock.funcNetworkDisconnect != nil {
		mmNetworkDisconnect.mock.t.Fatalf("CommonAPIClientMock.NetworkDisconnect mock is already set by Set")
	}

	if mmNetworkDisconnect.defaultExpectation == nil {
		mmNetworkDisconnect.defaultExpectation = &CommonAPIClientMockNetworkDisconnectExpectation{mock: mmNetworkDisconnect.mock}
	}
	mmNetworkDisconnect.defaultExpectation.results = &CommonAPIClientMockNetworkDisconnectResults{err}
	return mmNetworkDisconnect.mock
}

//Set uses given function f to mock the CommonAPIClient.NetworkDisconnect method
func (mmNetworkDisconnect *mCommonAPIClientMockNetworkDisconnect) Set(f func(ctx context.Context, network string, container string, force bool) (err error)) *CommonAPIClientMock {
	if mmNetworkDisconnect.defaultExpectation != nil {
		mmNetworkDisconnect.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.NetworkDisconnect method")
	}

	if len(mmNetworkDisconnect.expectations) > 0 {
		mmNetworkDisconnect.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.NetworkDisconnect method")
	}

	mmNetworkDisconnect.mock.funcNetworkDisconnect = f
	return mmNetworkDisconnect.mock
}

// When sets expectation for the CommonAPIClient.NetworkDisconnect which will trigger the result defined by the following
// Then helper
func (mmNetworkDisconnect *mCommonAPIClientMockNetworkDisconnect) When(ctx context.Context, network string, container string, force bool) *CommonAPIClientMockNetworkDisconnectExpectation {
	if mmNetworkDisconnect.mock.funcNetworkDisconnect != nil {
		mmNetworkDisconnect.mock.t.Fatalf("CommonAPIClientMock.NetworkDisconnect mock is already set by Set")
	}

	expectation := &CommonAPIClientMockNetworkDisconnectExpectation{
		mock:   mmNetworkDisconnect.mock,
		params: &CommonAPIClientMockNetworkDisconnectParams{ctx, network, container, force},
	}
	mmNetworkDisconnect.expectations = append(mmNetworkDisconnect.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.NetworkDisconnect return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockNetworkDisconnectExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockNetworkDisconnectResults{err}
	return e.mock
}

// NetworkDisconnect implements client.CommonAPIClient
func (mmNetworkDisconnect *CommonAPIClientMock) NetworkDisconnect(ctx context.Context, network string, container string, force bool) (err error) {
	mm_atomic.AddUint64(&mmNetworkDisconnect.beforeNetworkDisconnectCounter, 1)
	defer mm_atomic.AddUint64(&mmNetworkDisconnect.afterNetworkDisconnectCounter, 1)

	if mmNetworkDisconnect.inspectFuncNetworkDisconnect != nil {
		mmNetworkDisconnect.inspectFuncNetworkDisconnect(ctx, network, container, force)
	}

	mm_params := &CommonAPIClientMockNetworkDisconnectParams{ctx, network, container, force}

	// Record call args
	mmNetworkDisconnect.NetworkDisconnectMock.mutex.Lock()
	mmNetworkDisconnect.NetworkDisconnectMock.callArgs = append(mmNetworkDisconnect.NetworkDisconnectMock.callArgs, mm_params)
	mmNetworkDisconnect.NetworkDisconnectMock.mutex.Unlock()

	for _, e := range mmNetworkDisconnect.NetworkDisconnectMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmNetworkDisconnect.NetworkDisconnectMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNetworkDisconnect.NetworkDisconnectMock.defaultExpectation.Counter, 1)
		mm_want := mmNetworkDisconnect.NetworkDisconnectMock.defaultExpectation.params
		mm_got := CommonAPIClientMockNetworkDisconnectParams{ctx, network, container, force}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNetworkDisconnect.t.Errorf("CommonAPIClientMock.NetworkDisconnect got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmNetworkDisconnect.NetworkDisconnectMock.defaultExpectation.results
		if mm_results == nil {
			mmNetworkDisconnect.t.Fatal("No results are set for the CommonAPIClientMock.NetworkDisconnect")
		}
		return (*mm_results).err
	}
	if mmNetworkDisconnect.funcNetworkDisconnect != nil {
		return mmNetworkDisconnect.funcNetworkDisconnect(ctx, network, container, force)
	}
	mmNetworkDisconnect.t.Fatalf("Unexpected call to CommonAPIClientMock.NetworkDisconnect. %v %v %v %v", ctx, network, container, force)
	return
}

// NetworkDisconnectAfterCounter returns a count of finished CommonAPIClientMock.NetworkDisconnect invocations
func (mmNetworkDisconnect *CommonAPIClientMock) NetworkDisconnectAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNetworkDisconnect.afterNetworkDisconnectCounter)
}

// NetworkDisconnectBeforeCounter returns a count of CommonAPIClientMock.NetworkDisconnect invocations
func (mmNetworkDisconnect *CommonAPIClientMock) NetworkDisconnectBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNetworkDisconnect.beforeNetworkDisconnectCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.NetworkDisconnect.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNetworkDisconnect *mCommonAPIClientMockNetworkDisconnect) Calls() []*CommonAPIClientMockNetworkDisconnectParams {
	mmNetworkDisconnect.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockNetworkDisconnectParams, len(mmNetworkDisconnect.callArgs))
	copy(argCopy, mmNetworkDisconnect.callArgs)

	mmNetworkDisconnect.mutex.RUnlock()

	return argCopy
}

// MinimockNetworkDisconnectDone returns true if the count of the NetworkDisconnect invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockNetworkDisconnectDone() bool {
	for _, e := range m.NetworkDisconnectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NetworkDisconnectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNetworkDisconnectCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNetworkDisconnect != nil && mm_atomic.LoadUint64(&m.afterNetworkDisconnectCounter) < 1 {
		return false
	}
	return true
}

// MinimockNetworkDisconnectInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockNetworkDisconnectInspect() {
	for _, e := range m.NetworkDisconnectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.NetworkDisconnect with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NetworkDisconnectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNetworkDisconnectCounter) < 1 {
		if m.NetworkDisconnectMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.NetworkDisconnect")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.NetworkDisconnect with params: %#v", *m.NetworkDisconnectMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNetworkDisconnect != nil && mm_atomic.LoadUint64(&m.afterNetworkDisconnectCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.NetworkDisconnect")
	}
}

type mCommonAPIClientMockNetworkInspect struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockNetworkInspectExpectation
	expectations       []*CommonAPIClientMockNetworkInspectExpectation

	callArgs []*CommonAPIClientMockNetworkInspectParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockNetworkInspectExpectation specifies expectation struct of the CommonAPIClient.NetworkInspect
type CommonAPIClientMockNetworkInspectExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockNetworkInspectParams
	results *CommonAPIClientMockNetworkInspectResults
	Counter uint64
}

// CommonAPIClientMockNetworkInspectParams contains parameters of the CommonAPIClient.NetworkInspect
type CommonAPIClientMockNetworkInspectParams struct {
	ctx     context.Context
	network string
	options types.NetworkInspectOptions
}

// CommonAPIClientMockNetworkInspectResults contains results of the CommonAPIClient.NetworkInspect
type CommonAPIClientMockNetworkInspectResults struct {
	n1  types.NetworkResource
	err error
}

// Expect sets up expected params for CommonAPIClient.NetworkInspect
func (mmNetworkInspect *mCommonAPIClientMockNetworkInspect) Expect(ctx context.Context, network string, options types.NetworkInspectOptions) *mCommonAPIClientMockNetworkInspect {
	if mmNetworkInspect.mock.funcNetworkInspect != nil {
		mmNetworkInspect.mock.t.Fatalf("CommonAPIClientMock.NetworkInspect mock is already set by Set")
	}

	if mmNetworkInspect.defaultExpectation == nil {
		mmNetworkInspect.defaultExpectation = &CommonAPIClientMockNetworkInspectExpectation{}
	}

	mmNetworkInspect.defaultExpectation.params = &CommonAPIClientMockNetworkInspectParams{ctx, network, options}
	for _, e := range mmNetworkInspect.expectations {
		if minimock.Equal(e.params, mmNetworkInspect.defaultExpectation.params) {
			mmNetworkInspect.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNetworkInspect.defaultExpectation.params)
		}
	}

	return mmNetworkInspect
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.NetworkInspect
func (mmNetworkInspect *mCommonAPIClientMockNetworkInspect) Inspect(f func(ctx context.Context, network string, options types.NetworkInspectOptions)) *mCommonAPIClientMockNetworkInspect {
	if mmNetworkInspect.mock.inspectFuncNetworkInspect != nil {
		mmNetworkInspect.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.NetworkInspect")
	}

	mmNetworkInspect.mock.inspectFuncNetworkInspect = f

	return mmNetworkInspect
}

// Return sets up results that will be returned by CommonAPIClient.NetworkInspect
func (mmNetworkInspect *mCommonAPIClientMockNetworkInspect) Return(n1 types.NetworkResource, err error) *CommonAPIClientMock {
	if mmNetworkInspect.mock.funcNetworkInspect != nil {
		mmNetworkInspect.mock.t.Fatalf("CommonAPIClientMock.NetworkInspect mock is already set by Set")
	}

	if mmNetworkInspect.defaultExpectation == nil {
		mmNetworkInspect.defaultExpectation = &CommonAPIClientMockNetworkInspectExpectation{mock: mmNetworkInspect.mock}
	}
	mmNetworkInspect.defaultExpectation.results = &CommonAPIClientMockNetworkInspectResults{n1, err}
	return mmNetworkInspect.mock
}

//Set uses given function f to mock the CommonAPIClient.NetworkInspect method
func (mmNetworkInspect *mCommonAPIClientMockNetworkInspect) Set(f func(ctx context.Context, network string, options types.NetworkInspectOptions) (n1 types.NetworkResource, err error)) *CommonAPIClientMock {
	if mmNetworkInspect.defaultExpectation != nil {
		mmNetworkInspect.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.NetworkInspect method")
	}

	if len(mmNetworkInspect.expectations) > 0 {
		mmNetworkInspect.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.NetworkInspect method")
	}

	mmNetworkInspect.mock.funcNetworkInspect = f
	return mmNetworkInspect.mock
}

// When sets expectation for the CommonAPIClient.NetworkInspect which will trigger the result defined by the following
// Then helper
func (mmNetworkInspect *mCommonAPIClientMockNetworkInspect) When(ctx context.Context, network string, options types.NetworkInspectOptions) *CommonAPIClientMockNetworkInspectExpectation {
	if mmNetworkInspect.mock.funcNetworkInspect != nil {
		mmNetworkInspect.mock.t.Fatalf("CommonAPIClientMock.NetworkInspect mock is already set by Set")
	}

	expectation := &CommonAPIClientMockNetworkInspectExpectation{
		mock:   mmNetworkInspect.mock,
		params: &CommonAPIClientMockNetworkInspectParams{ctx, network, options},
	}
	mmNetworkInspect.expectations = append(mmNetworkInspect.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.NetworkInspect return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockNetworkInspectExpectation) Then(n1 types.NetworkResource, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockNetworkInspectResults{n1, err}
	return e.mock
}

// NetworkInspect implements client.CommonAPIClient
func (mmNetworkInspect *CommonAPIClientMock) NetworkInspect(ctx context.Context, network string, options types.NetworkInspectOptions) (n1 types.NetworkResource, err error) {
	mm_atomic.AddUint64(&mmNetworkInspect.beforeNetworkInspectCounter, 1)
	defer mm_atomic.AddUint64(&mmNetworkInspect.afterNetworkInspectCounter, 1)

	if mmNetworkInspect.inspectFuncNetworkInspect != nil {
		mmNetworkInspect.inspectFuncNetworkInspect(ctx, network, options)
	}

	mm_params := &CommonAPIClientMockNetworkInspectParams{ctx, network, options}

	// Record call args
	mmNetworkInspect.NetworkInspectMock.mutex.Lock()
	mmNetworkInspect.NetworkInspectMock.callArgs = append(mmNetworkInspect.NetworkInspectMock.callArgs, mm_params)
	mmNetworkInspect.NetworkInspectMock.mutex.Unlock()

	for _, e := range mmNetworkInspect.NetworkInspectMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.n1, e.results.err
		}
	}

	if mmNetworkInspect.NetworkInspectMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNetworkInspect.NetworkInspectMock.defaultExpectation.Counter, 1)
		mm_want := mmNetworkInspect.NetworkInspectMock.defaultExpectation.params
		mm_got := CommonAPIClientMockNetworkInspectParams{ctx, network, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNetworkInspect.t.Errorf("CommonAPIClientMock.NetworkInspect got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmNetworkInspect.NetworkInspectMock.defaultExpectation.results
		if mm_results == nil {
			mmNetworkInspect.t.Fatal("No results are set for the CommonAPIClientMock.NetworkInspect")
		}
		return (*mm_results).n1, (*mm_results).err
	}
	if mmNetworkInspect.funcNetworkInspect != nil {
		return mmNetworkInspect.funcNetworkInspect(ctx, network, options)
	}
	mmNetworkInspect.t.Fatalf("Unexpected call to CommonAPIClientMock.NetworkInspect. %v %v %v", ctx, network, options)
	return
}

// NetworkInspectAfterCounter returns a count of finished CommonAPIClientMock.NetworkInspect invocations
func (mmNetworkInspect *CommonAPIClientMock) NetworkInspectAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNetworkInspect.afterNetworkInspectCounter)
}

// NetworkInspectBeforeCounter returns a count of CommonAPIClientMock.NetworkInspect invocations
func (mmNetworkInspect *CommonAPIClientMock) NetworkInspectBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNetworkInspect.beforeNetworkInspectCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.NetworkInspect.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNetworkInspect *mCommonAPIClientMockNetworkInspect) Calls() []*CommonAPIClientMockNetworkInspectParams {
	mmNetworkInspect.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockNetworkInspectParams, len(mmNetworkInspect.callArgs))
	copy(argCopy, mmNetworkInspect.callArgs)

	mmNetworkInspect.mutex.RUnlock()

	return argCopy
}

// MinimockNetworkInspectDone returns true if the count of the NetworkInspect invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockNetworkInspectDone() bool {
	for _, e := range m.NetworkInspectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NetworkInspectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNetworkInspectCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNetworkInspect != nil && mm_atomic.LoadUint64(&m.afterNetworkInspectCounter) < 1 {
		return false
	}
	return true
}

// MinimockNetworkInspectInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockNetworkInspectInspect() {
	for _, e := range m.NetworkInspectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.NetworkInspect with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NetworkInspectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNetworkInspectCounter) < 1 {
		if m.NetworkInspectMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.NetworkInspect")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.NetworkInspect with params: %#v", *m.NetworkInspectMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNetworkInspect != nil && mm_atomic.LoadUint64(&m.afterNetworkInspectCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.NetworkInspect")
	}
}

type mCommonAPIClientMockNetworkInspectWithRaw struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockNetworkInspectWithRawExpectation
	expectations       []*CommonAPIClientMockNetworkInspectWithRawExpectation

	callArgs []*CommonAPIClientMockNetworkInspectWithRawParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockNetworkInspectWithRawExpectation specifies expectation struct of the CommonAPIClient.NetworkInspectWithRaw
type CommonAPIClientMockNetworkInspectWithRawExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockNetworkInspectWithRawParams
	results *CommonAPIClientMockNetworkInspectWithRawResults
	Counter uint64
}

// CommonAPIClientMockNetworkInspectWithRawParams contains parameters of the CommonAPIClient.NetworkInspectWithRaw
type CommonAPIClientMockNetworkInspectWithRawParams struct {
	ctx     context.Context
	network string
	options types.NetworkInspectOptions
}

// CommonAPIClientMockNetworkInspectWithRawResults contains results of the CommonAPIClient.NetworkInspectWithRaw
type CommonAPIClientMockNetworkInspectWithRawResults struct {
	n1  types.NetworkResource
	ba1 []byte
	err error
}

// Expect sets up expected params for CommonAPIClient.NetworkInspectWithRaw
func (mmNetworkInspectWithRaw *mCommonAPIClientMockNetworkInspectWithRaw) Expect(ctx context.Context, network string, options types.NetworkInspectOptions) *mCommonAPIClientMockNetworkInspectWithRaw {
	if mmNetworkInspectWithRaw.mock.funcNetworkInspectWithRaw != nil {
		mmNetworkInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.NetworkInspectWithRaw mock is already set by Set")
	}

	if mmNetworkInspectWithRaw.defaultExpectation == nil {
		mmNetworkInspectWithRaw.defaultExpectation = &CommonAPIClientMockNetworkInspectWithRawExpectation{}
	}

	mmNetworkInspectWithRaw.defaultExpectation.params = &CommonAPIClientMockNetworkInspectWithRawParams{ctx, network, options}
	for _, e := range mmNetworkInspectWithRaw.expectations {
		if minimock.Equal(e.params, mmNetworkInspectWithRaw.defaultExpectation.params) {
			mmNetworkInspectWithRaw.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNetworkInspectWithRaw.defaultExpectation.params)
		}
	}

	return mmNetworkInspectWithRaw
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.NetworkInspectWithRaw
func (mmNetworkInspectWithRaw *mCommonAPIClientMockNetworkInspectWithRaw) Inspect(f func(ctx context.Context, network string, options types.NetworkInspectOptions)) *mCommonAPIClientMockNetworkInspectWithRaw {
	if mmNetworkInspectWithRaw.mock.inspectFuncNetworkInspectWithRaw != nil {
		mmNetworkInspectWithRaw.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.NetworkInspectWithRaw")
	}

	mmNetworkInspectWithRaw.mock.inspectFuncNetworkInspectWithRaw = f

	return mmNetworkInspectWithRaw
}

// Return sets up results that will be returned by CommonAPIClient.NetworkInspectWithRaw
func (mmNetworkInspectWithRaw *mCommonAPIClientMockNetworkInspectWithRaw) Return(n1 types.NetworkResource, ba1 []byte, err error) *CommonAPIClientMock {
	if mmNetworkInspectWithRaw.mock.funcNetworkInspectWithRaw != nil {
		mmNetworkInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.NetworkInspectWithRaw mock is already set by Set")
	}

	if mmNetworkInspectWithRaw.defaultExpectation == nil {
		mmNetworkInspectWithRaw.defaultExpectation = &CommonAPIClientMockNetworkInspectWithRawExpectation{mock: mmNetworkInspectWithRaw.mock}
	}
	mmNetworkInspectWithRaw.defaultExpectation.results = &CommonAPIClientMockNetworkInspectWithRawResults{n1, ba1, err}
	return mmNetworkInspectWithRaw.mock
}

//Set uses given function f to mock the CommonAPIClient.NetworkInspectWithRaw method
func (mmNetworkInspectWithRaw *mCommonAPIClientMockNetworkInspectWithRaw) Set(f func(ctx context.Context, network string, options types.NetworkInspectOptions) (n1 types.NetworkResource, ba1 []byte, err error)) *CommonAPIClientMock {
	if mmNetworkInspectWithRaw.defaultExpectation != nil {
		mmNetworkInspectWithRaw.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.NetworkInspectWithRaw method")
	}

	if len(mmNetworkInspectWithRaw.expectations) > 0 {
		mmNetworkInspectWithRaw.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.NetworkInspectWithRaw method")
	}

	mmNetworkInspectWithRaw.mock.funcNetworkInspectWithRaw = f
	return mmNetworkInspectWithRaw.mock
}

// When sets expectation for the CommonAPIClient.NetworkInspectWithRaw which will trigger the result defined by the following
// Then helper
func (mmNetworkInspectWithRaw *mCommonAPIClientMockNetworkInspectWithRaw) When(ctx context.Context, network string, options types.NetworkInspectOptions) *CommonAPIClientMockNetworkInspectWithRawExpectation {
	if mmNetworkInspectWithRaw.mock.funcNetworkInspectWithRaw != nil {
		mmNetworkInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.NetworkInspectWithRaw mock is already set by Set")
	}

	expectation := &CommonAPIClientMockNetworkInspectWithRawExpectation{
		mock:   mmNetworkInspectWithRaw.mock,
		params: &CommonAPIClientMockNetworkInspectWithRawParams{ctx, network, options},
	}
	mmNetworkInspectWithRaw.expectations = append(mmNetworkInspectWithRaw.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.NetworkInspectWithRaw return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockNetworkInspectWithRawExpectation) Then(n1 types.NetworkResource, ba1 []byte, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockNetworkInspectWithRawResults{n1, ba1, err}
	return e.mock
}

// NetworkInspectWithRaw implements client.CommonAPIClient
func (mmNetworkInspectWithRaw *CommonAPIClientMock) NetworkInspectWithRaw(ctx context.Context, network string, options types.NetworkInspectOptions) (n1 types.NetworkResource, ba1 []byte, err error) {
	mm_atomic.AddUint64(&mmNetworkInspectWithRaw.beforeNetworkInspectWithRawCounter, 1)
	defer mm_atomic.AddUint64(&mmNetworkInspectWithRaw.afterNetworkInspectWithRawCounter, 1)

	if mmNetworkInspectWithRaw.inspectFuncNetworkInspectWithRaw != nil {
		mmNetworkInspectWithRaw.inspectFuncNetworkInspectWithRaw(ctx, network, options)
	}

	mm_params := &CommonAPIClientMockNetworkInspectWithRawParams{ctx, network, options}

	// Record call args
	mmNetworkInspectWithRaw.NetworkInspectWithRawMock.mutex.Lock()
	mmNetworkInspectWithRaw.NetworkInspectWithRawMock.callArgs = append(mmNetworkInspectWithRaw.NetworkInspectWithRawMock.callArgs, mm_params)
	mmNetworkInspectWithRaw.NetworkInspectWithRawMock.mutex.Unlock()

	for _, e := range mmNetworkInspectWithRaw.NetworkInspectWithRawMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.n1, e.results.ba1, e.results.err
		}
	}

	if mmNetworkInspectWithRaw.NetworkInspectWithRawMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNetworkInspectWithRaw.NetworkInspectWithRawMock.defaultExpectation.Counter, 1)
		mm_want := mmNetworkInspectWithRaw.NetworkInspectWithRawMock.defaultExpectation.params
		mm_got := CommonAPIClientMockNetworkInspectWithRawParams{ctx, network, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNetworkInspectWithRaw.t.Errorf("CommonAPIClientMock.NetworkInspectWithRaw got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmNetworkInspectWithRaw.NetworkInspectWithRawMock.defaultExpectation.results
		if mm_results == nil {
			mmNetworkInspectWithRaw.t.Fatal("No results are set for the CommonAPIClientMock.NetworkInspectWithRaw")
		}
		return (*mm_results).n1, (*mm_results).ba1, (*mm_results).err
	}
	if mmNetworkInspectWithRaw.funcNetworkInspectWithRaw != nil {
		return mmNetworkInspectWithRaw.funcNetworkInspectWithRaw(ctx, network, options)
	}
	mmNetworkInspectWithRaw.t.Fatalf("Unexpected call to CommonAPIClientMock.NetworkInspectWithRaw. %v %v %v", ctx, network, options)
	return
}

// NetworkInspectWithRawAfterCounter returns a count of finished CommonAPIClientMock.NetworkInspectWithRaw invocations
func (mmNetworkInspectWithRaw *CommonAPIClientMock) NetworkInspectWithRawAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNetworkInspectWithRaw.afterNetworkInspectWithRawCounter)
}

// NetworkInspectWithRawBeforeCounter returns a count of CommonAPIClientMock.NetworkInspectWithRaw invocations
func (mmNetworkInspectWithRaw *CommonAPIClientMock) NetworkInspectWithRawBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNetworkInspectWithRaw.beforeNetworkInspectWithRawCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.NetworkInspectWithRaw.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNetworkInspectWithRaw *mCommonAPIClientMockNetworkInspectWithRaw) Calls() []*CommonAPIClientMockNetworkInspectWithRawParams {
	mmNetworkInspectWithRaw.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockNetworkInspectWithRawParams, len(mmNetworkInspectWithRaw.callArgs))
	copy(argCopy, mmNetworkInspectWithRaw.callArgs)

	mmNetworkInspectWithRaw.mutex.RUnlock()

	return argCopy
}

// MinimockNetworkInspectWithRawDone returns true if the count of the NetworkInspectWithRaw invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockNetworkInspectWithRawDone() bool {
	for _, e := range m.NetworkInspectWithRawMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NetworkInspectWithRawMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNetworkInspectWithRawCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNetworkInspectWithRaw != nil && mm_atomic.LoadUint64(&m.afterNetworkInspectWithRawCounter) < 1 {
		return false
	}
	return true
}

// MinimockNetworkInspectWithRawInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockNetworkInspectWithRawInspect() {
	for _, e := range m.NetworkInspectWithRawMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.NetworkInspectWithRaw with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NetworkInspectWithRawMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNetworkInspectWithRawCounter) < 1 {
		if m.NetworkInspectWithRawMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.NetworkInspectWithRaw")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.NetworkInspectWithRaw with params: %#v", *m.NetworkInspectWithRawMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNetworkInspectWithRaw != nil && mm_atomic.LoadUint64(&m.afterNetworkInspectWithRawCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.NetworkInspectWithRaw")
	}
}

type mCommonAPIClientMockNetworkList struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockNetworkListExpectation
	expectations       []*CommonAPIClientMockNetworkListExpectation

	callArgs []*CommonAPIClientMockNetworkListParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockNetworkListExpectation specifies expectation struct of the CommonAPIClient.NetworkList
type CommonAPIClientMockNetworkListExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockNetworkListParams
	results *CommonAPIClientMockNetworkListResults
	Counter uint64
}

// CommonAPIClientMockNetworkListParams contains parameters of the CommonAPIClient.NetworkList
type CommonAPIClientMockNetworkListParams struct {
	ctx     context.Context
	options types.NetworkListOptions
}

// CommonAPIClientMockNetworkListResults contains results of the CommonAPIClient.NetworkList
type CommonAPIClientMockNetworkListResults struct {
	na1 []types.NetworkResource
	err error
}

// Expect sets up expected params for CommonAPIClient.NetworkList
func (mmNetworkList *mCommonAPIClientMockNetworkList) Expect(ctx context.Context, options types.NetworkListOptions) *mCommonAPIClientMockNetworkList {
	if mmNetworkList.mock.funcNetworkList != nil {
		mmNetworkList.mock.t.Fatalf("CommonAPIClientMock.NetworkList mock is already set by Set")
	}

	if mmNetworkList.defaultExpectation == nil {
		mmNetworkList.defaultExpectation = &CommonAPIClientMockNetworkListExpectation{}
	}

	mmNetworkList.defaultExpectation.params = &CommonAPIClientMockNetworkListParams{ctx, options}
	for _, e := range mmNetworkList.expectations {
		if minimock.Equal(e.params, mmNetworkList.defaultExpectation.params) {
			mmNetworkList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNetworkList.defaultExpectation.params)
		}
	}

	return mmNetworkList
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.NetworkList
func (mmNetworkList *mCommonAPIClientMockNetworkList) Inspect(f func(ctx context.Context, options types.NetworkListOptions)) *mCommonAPIClientMockNetworkList {
	if mmNetworkList.mock.inspectFuncNetworkList != nil {
		mmNetworkList.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.NetworkList")
	}

	mmNetworkList.mock.inspectFuncNetworkList = f

	return mmNetworkList
}

// Return sets up results that will be returned by CommonAPIClient.NetworkList
func (mmNetworkList *mCommonAPIClientMockNetworkList) Return(na1 []types.NetworkResource, err error) *CommonAPIClientMock {
	if mmNetworkList.mock.funcNetworkList != nil {
		mmNetworkList.mock.t.Fatalf("CommonAPIClientMock.NetworkList mock is already set by Set")
	}

	if mmNetworkList.defaultExpectation == nil {
		mmNetworkList.defaultExpectation = &CommonAPIClientMockNetworkListExpectation{mock: mmNetworkList.mock}
	}
	mmNetworkList.defaultExpectation.results = &CommonAPIClientMockNetworkListResults{na1, err}
	return mmNetworkList.mock
}

//Set uses given function f to mock the CommonAPIClient.NetworkList method
func (mmNetworkList *mCommonAPIClientMockNetworkList) Set(f func(ctx context.Context, options types.NetworkListOptions) (na1 []types.NetworkResource, err error)) *CommonAPIClientMock {
	if mmNetworkList.defaultExpectation != nil {
		mmNetworkList.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.NetworkList method")
	}

	if len(mmNetworkList.expectations) > 0 {
		mmNetworkList.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.NetworkList method")
	}

	mmNetworkList.mock.funcNetworkList = f
	return mmNetworkList.mock
}

// When sets expectation for the CommonAPIClient.NetworkList which will trigger the result defined by the following
// Then helper
func (mmNetworkList *mCommonAPIClientMockNetworkList) When(ctx context.Context, options types.NetworkListOptions) *CommonAPIClientMockNetworkListExpectation {
	if mmNetworkList.mock.funcNetworkList != nil {
		mmNetworkList.mock.t.Fatalf("CommonAPIClientMock.NetworkList mock is already set by Set")
	}

	expectation := &CommonAPIClientMockNetworkListExpectation{
		mock:   mmNetworkList.mock,
		params: &CommonAPIClientMockNetworkListParams{ctx, options},
	}
	mmNetworkList.expectations = append(mmNetworkList.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.NetworkList return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockNetworkListExpectation) Then(na1 []types.NetworkResource, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockNetworkListResults{na1, err}
	return e.mock
}

// NetworkList implements client.CommonAPIClient
func (mmNetworkList *CommonAPIClientMock) NetworkList(ctx context.Context, options types.NetworkListOptions) (na1 []types.NetworkResource, err error) {
	mm_atomic.AddUint64(&mmNetworkList.beforeNetworkListCounter, 1)
	defer mm_atomic.AddUint64(&mmNetworkList.afterNetworkListCounter, 1)

	if mmNetworkList.inspectFuncNetworkList != nil {
		mmNetworkList.inspectFuncNetworkList(ctx, options)
	}

	mm_params := &CommonAPIClientMockNetworkListParams{ctx, options}

	// Record call args
	mmNetworkList.NetworkListMock.mutex.Lock()
	mmNetworkList.NetworkListMock.callArgs = append(mmNetworkList.NetworkListMock.callArgs, mm_params)
	mmNetworkList.NetworkListMock.mutex.Unlock()

	for _, e := range mmNetworkList.NetworkListMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.na1, e.results.err
		}
	}

	if mmNetworkList.NetworkListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNetworkList.NetworkListMock.defaultExpectation.Counter, 1)
		mm_want := mmNetworkList.NetworkListMock.defaultExpectation.params
		mm_got := CommonAPIClientMockNetworkListParams{ctx, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNetworkList.t.Errorf("CommonAPIClientMock.NetworkList got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmNetworkList.NetworkListMock.defaultExpectation.results
		if mm_results == nil {
			mmNetworkList.t.Fatal("No results are set for the CommonAPIClientMock.NetworkList")
		}
		return (*mm_results).na1, (*mm_results).err
	}
	if mmNetworkList.funcNetworkList != nil {
		return mmNetworkList.funcNetworkList(ctx, options)
	}
	mmNetworkList.t.Fatalf("Unexpected call to CommonAPIClientMock.NetworkList. %v %v", ctx, options)
	return
}

// NetworkListAfterCounter returns a count of finished CommonAPIClientMock.NetworkList invocations
func (mmNetworkList *CommonAPIClientMock) NetworkListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNetworkList.afterNetworkListCounter)
}

// NetworkListBeforeCounter returns a count of CommonAPIClientMock.NetworkList invocations
func (mmNetworkList *CommonAPIClientMock) NetworkListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNetworkList.beforeNetworkListCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.NetworkList.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNetworkList *mCommonAPIClientMockNetworkList) Calls() []*CommonAPIClientMockNetworkListParams {
	mmNetworkList.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockNetworkListParams, len(mmNetworkList.callArgs))
	copy(argCopy, mmNetworkList.callArgs)

	mmNetworkList.mutex.RUnlock()

	return argCopy
}

// MinimockNetworkListDone returns true if the count of the NetworkList invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockNetworkListDone() bool {
	for _, e := range m.NetworkListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NetworkListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNetworkListCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNetworkList != nil && mm_atomic.LoadUint64(&m.afterNetworkListCounter) < 1 {
		return false
	}
	return true
}

// MinimockNetworkListInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockNetworkListInspect() {
	for _, e := range m.NetworkListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.NetworkList with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NetworkListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNetworkListCounter) < 1 {
		if m.NetworkListMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.NetworkList")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.NetworkList with params: %#v", *m.NetworkListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNetworkList != nil && mm_atomic.LoadUint64(&m.afterNetworkListCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.NetworkList")
	}
}

type mCommonAPIClientMockNetworkRemove struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockNetworkRemoveExpectation
	expectations       []*CommonAPIClientMockNetworkRemoveExpectation

	callArgs []*CommonAPIClientMockNetworkRemoveParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockNetworkRemoveExpectation specifies expectation struct of the CommonAPIClient.NetworkRemove
type CommonAPIClientMockNetworkRemoveExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockNetworkRemoveParams
	results *CommonAPIClientMockNetworkRemoveResults
	Counter uint64
}

// CommonAPIClientMockNetworkRemoveParams contains parameters of the CommonAPIClient.NetworkRemove
type CommonAPIClientMockNetworkRemoveParams struct {
	ctx     context.Context
	network string
}

// CommonAPIClientMockNetworkRemoveResults contains results of the CommonAPIClient.NetworkRemove
type CommonAPIClientMockNetworkRemoveResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.NetworkRemove
func (mmNetworkRemove *mCommonAPIClientMockNetworkRemove) Expect(ctx context.Context, network string) *mCommonAPIClientMockNetworkRemove {
	if mmNetworkRemove.mock.funcNetworkRemove != nil {
		mmNetworkRemove.mock.t.Fatalf("CommonAPIClientMock.NetworkRemove mock is already set by Set")
	}

	if mmNetworkRemove.defaultExpectation == nil {
		mmNetworkRemove.defaultExpectation = &CommonAPIClientMockNetworkRemoveExpectation{}
	}

	mmNetworkRemove.defaultExpectation.params = &CommonAPIClientMockNetworkRemoveParams{ctx, network}
	for _, e := range mmNetworkRemove.expectations {
		if minimock.Equal(e.params, mmNetworkRemove.defaultExpectation.params) {
			mmNetworkRemove.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNetworkRemove.defaultExpectation.params)
		}
	}

	return mmNetworkRemove
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.NetworkRemove
func (mmNetworkRemove *mCommonAPIClientMockNetworkRemove) Inspect(f func(ctx context.Context, network string)) *mCommonAPIClientMockNetworkRemove {
	if mmNetworkRemove.mock.inspectFuncNetworkRemove != nil {
		mmNetworkRemove.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.NetworkRemove")
	}

	mmNetworkRemove.mock.inspectFuncNetworkRemove = f

	return mmNetworkRemove
}

// Return sets up results that will be returned by CommonAPIClient.NetworkRemove
func (mmNetworkRemove *mCommonAPIClientMockNetworkRemove) Return(err error) *CommonAPIClientMock {
	if mmNetworkRemove.mock.funcNetworkRemove != nil {
		mmNetworkRemove.mock.t.Fatalf("CommonAPIClientMock.NetworkRemove mock is already set by Set")
	}

	if mmNetworkRemove.defaultExpectation == nil {
		mmNetworkRemove.defaultExpectation = &CommonAPIClientMockNetworkRemoveExpectation{mock: mmNetworkRemove.mock}
	}
	mmNetworkRemove.defaultExpectation.results = &CommonAPIClientMockNetworkRemoveResults{err}
	return mmNetworkRemove.mock
}

//Set uses given function f to mock the CommonAPIClient.NetworkRemove method
func (mmNetworkRemove *mCommonAPIClientMockNetworkRemove) Set(f func(ctx context.Context, network string) (err error)) *CommonAPIClientMock {
	if mmNetworkRemove.defaultExpectation != nil {
		mmNetworkRemove.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.NetworkRemove method")
	}

	if len(mmNetworkRemove.expectations) > 0 {
		mmNetworkRemove.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.NetworkRemove method")
	}

	mmNetworkRemove.mock.funcNetworkRemove = f
	return mmNetworkRemove.mock
}

// When sets expectation for the CommonAPIClient.NetworkRemove which will trigger the result defined by the following
// Then helper
func (mmNetworkRemove *mCommonAPIClientMockNetworkRemove) When(ctx context.Context, network string) *CommonAPIClientMockNetworkRemoveExpectation {
	if mmNetworkRemove.mock.funcNetworkRemove != nil {
		mmNetworkRemove.mock.t.Fatalf("CommonAPIClientMock.NetworkRemove mock is already set by Set")
	}

	expectation := &CommonAPIClientMockNetworkRemoveExpectation{
		mock:   mmNetworkRemove.mock,
		params: &CommonAPIClientMockNetworkRemoveParams{ctx, network},
	}
	mmNetworkRemove.expectations = append(mmNetworkRemove.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.NetworkRemove return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockNetworkRemoveExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockNetworkRemoveResults{err}
	return e.mock
}

// NetworkRemove implements client.CommonAPIClient
func (mmNetworkRemove *CommonAPIClientMock) NetworkRemove(ctx context.Context, network string) (err error) {
	mm_atomic.AddUint64(&mmNetworkRemove.beforeNetworkRemoveCounter, 1)
	defer mm_atomic.AddUint64(&mmNetworkRemove.afterNetworkRemoveCounter, 1)

	if mmNetworkRemove.inspectFuncNetworkRemove != nil {
		mmNetworkRemove.inspectFuncNetworkRemove(ctx, network)
	}

	mm_params := &CommonAPIClientMockNetworkRemoveParams{ctx, network}

	// Record call args
	mmNetworkRemove.NetworkRemoveMock.mutex.Lock()
	mmNetworkRemove.NetworkRemoveMock.callArgs = append(mmNetworkRemove.NetworkRemoveMock.callArgs, mm_params)
	mmNetworkRemove.NetworkRemoveMock.mutex.Unlock()

	for _, e := range mmNetworkRemove.NetworkRemoveMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmNetworkRemove.NetworkRemoveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNetworkRemove.NetworkRemoveMock.defaultExpectation.Counter, 1)
		mm_want := mmNetworkRemove.NetworkRemoveMock.defaultExpectation.params
		mm_got := CommonAPIClientMockNetworkRemoveParams{ctx, network}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNetworkRemove.t.Errorf("CommonAPIClientMock.NetworkRemove got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmNetworkRemove.NetworkRemoveMock.defaultExpectation.results
		if mm_results == nil {
			mmNetworkRemove.t.Fatal("No results are set for the CommonAPIClientMock.NetworkRemove")
		}
		return (*mm_results).err
	}
	if mmNetworkRemove.funcNetworkRemove != nil {
		return mmNetworkRemove.funcNetworkRemove(ctx, network)
	}
	mmNetworkRemove.t.Fatalf("Unexpected call to CommonAPIClientMock.NetworkRemove. %v %v", ctx, network)
	return
}

// NetworkRemoveAfterCounter returns a count of finished CommonAPIClientMock.NetworkRemove invocations
func (mmNetworkRemove *CommonAPIClientMock) NetworkRemoveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNetworkRemove.afterNetworkRemoveCounter)
}

// NetworkRemoveBeforeCounter returns a count of CommonAPIClientMock.NetworkRemove invocations
func (mmNetworkRemove *CommonAPIClientMock) NetworkRemoveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNetworkRemove.beforeNetworkRemoveCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.NetworkRemove.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNetworkRemove *mCommonAPIClientMockNetworkRemove) Calls() []*CommonAPIClientMockNetworkRemoveParams {
	mmNetworkRemove.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockNetworkRemoveParams, len(mmNetworkRemove.callArgs))
	copy(argCopy, mmNetworkRemove.callArgs)

	mmNetworkRemove.mutex.RUnlock()

	return argCopy
}

// MinimockNetworkRemoveDone returns true if the count of the NetworkRemove invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockNetworkRemoveDone() bool {
	for _, e := range m.NetworkRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NetworkRemoveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNetworkRemoveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNetworkRemove != nil && mm_atomic.LoadUint64(&m.afterNetworkRemoveCounter) < 1 {
		return false
	}
	return true
}

// MinimockNetworkRemoveInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockNetworkRemoveInspect() {
	for _, e := range m.NetworkRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.NetworkRemove with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NetworkRemoveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNetworkRemoveCounter) < 1 {
		if m.NetworkRemoveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.NetworkRemove")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.NetworkRemove with params: %#v", *m.NetworkRemoveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNetworkRemove != nil && mm_atomic.LoadUint64(&m.afterNetworkRemoveCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.NetworkRemove")
	}
}

type mCommonAPIClientMockNetworksPrune struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockNetworksPruneExpectation
	expectations       []*CommonAPIClientMockNetworksPruneExpectation

	callArgs []*CommonAPIClientMockNetworksPruneParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockNetworksPruneExpectation specifies expectation struct of the CommonAPIClient.NetworksPrune
type CommonAPIClientMockNetworksPruneExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockNetworksPruneParams
	results *CommonAPIClientMockNetworksPruneResults
	Counter uint64
}

// CommonAPIClientMockNetworksPruneParams contains parameters of the CommonAPIClient.NetworksPrune
type CommonAPIClientMockNetworksPruneParams struct {
	ctx         context.Context
	pruneFilter filters.Args
}

// CommonAPIClientMockNetworksPruneResults contains results of the CommonAPIClient.NetworksPrune
type CommonAPIClientMockNetworksPruneResults struct {
	n1  types.NetworksPruneReport
	err error
}

// Expect sets up expected params for CommonAPIClient.NetworksPrune
func (mmNetworksPrune *mCommonAPIClientMockNetworksPrune) Expect(ctx context.Context, pruneFilter filters.Args) *mCommonAPIClientMockNetworksPrune {
	if mmNetworksPrune.mock.funcNetworksPrune != nil {
		mmNetworksPrune.mock.t.Fatalf("CommonAPIClientMock.NetworksPrune mock is already set by Set")
	}

	if mmNetworksPrune.defaultExpectation == nil {
		mmNetworksPrune.defaultExpectation = &CommonAPIClientMockNetworksPruneExpectation{}
	}

	mmNetworksPrune.defaultExpectation.params = &CommonAPIClientMockNetworksPruneParams{ctx, pruneFilter}
	for _, e := range mmNetworksPrune.expectations {
		if minimock.Equal(e.params, mmNetworksPrune.defaultExpectation.params) {
			mmNetworksPrune.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNetworksPrune.defaultExpectation.params)
		}
	}

	return mmNetworksPrune
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.NetworksPrune
func (mmNetworksPrune *mCommonAPIClientMockNetworksPrune) Inspect(f func(ctx context.Context, pruneFilter filters.Args)) *mCommonAPIClientMockNetworksPrune {
	if mmNetworksPrune.mock.inspectFuncNetworksPrune != nil {
		mmNetworksPrune.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.NetworksPrune")
	}

	mmNetworksPrune.mock.inspectFuncNetworksPrune = f

	return mmNetworksPrune
}

// Return sets up results that will be returned by CommonAPIClient.NetworksPrune
func (mmNetworksPrune *mCommonAPIClientMockNetworksPrune) Return(n1 types.NetworksPruneReport, err error) *CommonAPIClientMock {
	if mmNetworksPrune.mock.funcNetworksPrune != nil {
		mmNetworksPrune.mock.t.Fatalf("CommonAPIClientMock.NetworksPrune mock is already set by Set")
	}

	if mmNetworksPrune.defaultExpectation == nil {
		mmNetworksPrune.defaultExpectation = &CommonAPIClientMockNetworksPruneExpectation{mock: mmNetworksPrune.mock}
	}
	mmNetworksPrune.defaultExpectation.results = &CommonAPIClientMockNetworksPruneResults{n1, err}
	return mmNetworksPrune.mock
}

//Set uses given function f to mock the CommonAPIClient.NetworksPrune method
func (mmNetworksPrune *mCommonAPIClientMockNetworksPrune) Set(f func(ctx context.Context, pruneFilter filters.Args) (n1 types.NetworksPruneReport, err error)) *CommonAPIClientMock {
	if mmNetworksPrune.defaultExpectation != nil {
		mmNetworksPrune.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.NetworksPrune method")
	}

	if len(mmNetworksPrune.expectations) > 0 {
		mmNetworksPrune.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.NetworksPrune method")
	}

	mmNetworksPrune.mock.funcNetworksPrune = f
	return mmNetworksPrune.mock
}

// When sets expectation for the CommonAPIClient.NetworksPrune which will trigger the result defined by the following
// Then helper
func (mmNetworksPrune *mCommonAPIClientMockNetworksPrune) When(ctx context.Context, pruneFilter filters.Args) *CommonAPIClientMockNetworksPruneExpectation {
	if mmNetworksPrune.mock.funcNetworksPrune != nil {
		mmNetworksPrune.mock.t.Fatalf("CommonAPIClientMock.NetworksPrune mock is already set by Set")
	}

	expectation := &CommonAPIClientMockNetworksPruneExpectation{
		mock:   mmNetworksPrune.mock,
		params: &CommonAPIClientMockNetworksPruneParams{ctx, pruneFilter},
	}
	mmNetworksPrune.expectations = append(mmNetworksPrune.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.NetworksPrune return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockNetworksPruneExpectation) Then(n1 types.NetworksPruneReport, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockNetworksPruneResults{n1, err}
	return e.mock
}

// NetworksPrune implements client.CommonAPIClient
func (mmNetworksPrune *CommonAPIClientMock) NetworksPrune(ctx context.Context, pruneFilter filters.Args) (n1 types.NetworksPruneReport, err error) {
	mm_atomic.AddUint64(&mmNetworksPrune.beforeNetworksPruneCounter, 1)
	defer mm_atomic.AddUint64(&mmNetworksPrune.afterNetworksPruneCounter, 1)

	if mmNetworksPrune.inspectFuncNetworksPrune != nil {
		mmNetworksPrune.inspectFuncNetworksPrune(ctx, pruneFilter)
	}

	mm_params := &CommonAPIClientMockNetworksPruneParams{ctx, pruneFilter}

	// Record call args
	mmNetworksPrune.NetworksPruneMock.mutex.Lock()
	mmNetworksPrune.NetworksPruneMock.callArgs = append(mmNetworksPrune.NetworksPruneMock.callArgs, mm_params)
	mmNetworksPrune.NetworksPruneMock.mutex.Unlock()

	for _, e := range mmNetworksPrune.NetworksPruneMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.n1, e.results.err
		}
	}

	if mmNetworksPrune.NetworksPruneMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNetworksPrune.NetworksPruneMock.defaultExpectation.Counter, 1)
		mm_want := mmNetworksPrune.NetworksPruneMock.defaultExpectation.params
		mm_got := CommonAPIClientMockNetworksPruneParams{ctx, pruneFilter}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNetworksPrune.t.Errorf("CommonAPIClientMock.NetworksPrune got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmNetworksPrune.NetworksPruneMock.defaultExpectation.results
		if mm_results == nil {
			mmNetworksPrune.t.Fatal("No results are set for the CommonAPIClientMock.NetworksPrune")
		}
		return (*mm_results).n1, (*mm_results).err
	}
	if mmNetworksPrune.funcNetworksPrune != nil {
		return mmNetworksPrune.funcNetworksPrune(ctx, pruneFilter)
	}
	mmNetworksPrune.t.Fatalf("Unexpected call to CommonAPIClientMock.NetworksPrune. %v %v", ctx, pruneFilter)
	return
}

// NetworksPruneAfterCounter returns a count of finished CommonAPIClientMock.NetworksPrune invocations
func (mmNetworksPrune *CommonAPIClientMock) NetworksPruneAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNetworksPrune.afterNetworksPruneCounter)
}

// NetworksPruneBeforeCounter returns a count of CommonAPIClientMock.NetworksPrune invocations
func (mmNetworksPrune *CommonAPIClientMock) NetworksPruneBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNetworksPrune.beforeNetworksPruneCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.NetworksPrune.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNetworksPrune *mCommonAPIClientMockNetworksPrune) Calls() []*CommonAPIClientMockNetworksPruneParams {
	mmNetworksPrune.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockNetworksPruneParams, len(mmNetworksPrune.callArgs))
	copy(argCopy, mmNetworksPrune.callArgs)

	mmNetworksPrune.mutex.RUnlock()

	return argCopy
}

// MinimockNetworksPruneDone returns true if the count of the NetworksPrune invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockNetworksPruneDone() bool {
	for _, e := range m.NetworksPruneMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NetworksPruneMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNetworksPruneCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNetworksPrune != nil && mm_atomic.LoadUint64(&m.afterNetworksPruneCounter) < 1 {
		return false
	}
	return true
}

// MinimockNetworksPruneInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockNetworksPruneInspect() {
	for _, e := range m.NetworksPruneMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.NetworksPrune with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NetworksPruneMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNetworksPruneCounter) < 1 {
		if m.NetworksPruneMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.NetworksPrune")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.NetworksPrune with params: %#v", *m.NetworksPruneMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNetworksPrune != nil && mm_atomic.LoadUint64(&m.afterNetworksPruneCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.NetworksPrune")
	}
}

type mCommonAPIClientMockNodeInspectWithRaw struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockNodeInspectWithRawExpectation
	expectations       []*CommonAPIClientMockNodeInspectWithRawExpectation

	callArgs []*CommonAPIClientMockNodeInspectWithRawParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockNodeInspectWithRawExpectation specifies expectation struct of the CommonAPIClient.NodeInspectWithRaw
type CommonAPIClientMockNodeInspectWithRawExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockNodeInspectWithRawParams
	results *CommonAPIClientMockNodeInspectWithRawResults
	Counter uint64
}

// CommonAPIClientMockNodeInspectWithRawParams contains parameters of the CommonAPIClient.NodeInspectWithRaw
type CommonAPIClientMockNodeInspectWithRawParams struct {
	ctx    context.Context
	nodeID string
}

// CommonAPIClientMockNodeInspectWithRawResults contains results of the CommonAPIClient.NodeInspectWithRaw
type CommonAPIClientMockNodeInspectWithRawResults struct {
	n1  swarm.Node
	ba1 []byte
	err error
}

// Expect sets up expected params for CommonAPIClient.NodeInspectWithRaw
func (mmNodeInspectWithRaw *mCommonAPIClientMockNodeInspectWithRaw) Expect(ctx context.Context, nodeID string) *mCommonAPIClientMockNodeInspectWithRaw {
	if mmNodeInspectWithRaw.mock.funcNodeInspectWithRaw != nil {
		mmNodeInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.NodeInspectWithRaw mock is already set by Set")
	}

	if mmNodeInspectWithRaw.defaultExpectation == nil {
		mmNodeInspectWithRaw.defaultExpectation = &CommonAPIClientMockNodeInspectWithRawExpectation{}
	}

	mmNodeInspectWithRaw.defaultExpectation.params = &CommonAPIClientMockNodeInspectWithRawParams{ctx, nodeID}
	for _, e := range mmNodeInspectWithRaw.expectations {
		if minimock.Equal(e.params, mmNodeInspectWithRaw.defaultExpectation.params) {
			mmNodeInspectWithRaw.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNodeInspectWithRaw.defaultExpectation.params)
		}
	}

	return mmNodeInspectWithRaw
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.NodeInspectWithRaw
func (mmNodeInspectWithRaw *mCommonAPIClientMockNodeInspectWithRaw) Inspect(f func(ctx context.Context, nodeID string)) *mCommonAPIClientMockNodeInspectWithRaw {
	if mmNodeInspectWithRaw.mock.inspectFuncNodeInspectWithRaw != nil {
		mmNodeInspectWithRaw.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.NodeInspectWithRaw")
	}

	mmNodeInspectWithRaw.mock.inspectFuncNodeInspectWithRaw = f

	return mmNodeInspectWithRaw
}

// Return sets up results that will be returned by CommonAPIClient.NodeInspectWithRaw
func (mmNodeInspectWithRaw *mCommonAPIClientMockNodeInspectWithRaw) Return(n1 swarm.Node, ba1 []byte, err error) *CommonAPIClientMock {
	if mmNodeInspectWithRaw.mock.funcNodeInspectWithRaw != nil {
		mmNodeInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.NodeInspectWithRaw mock is already set by Set")
	}

	if mmNodeInspectWithRaw.defaultExpectation == nil {
		mmNodeInspectWithRaw.defaultExpectation = &CommonAPIClientMockNodeInspectWithRawExpectation{mock: mmNodeInspectWithRaw.mock}
	}
	mmNodeInspectWithRaw.defaultExpectation.results = &CommonAPIClientMockNodeInspectWithRawResults{n1, ba1, err}
	return mmNodeInspectWithRaw.mock
}

//Set uses given function f to mock the CommonAPIClient.NodeInspectWithRaw method
func (mmNodeInspectWithRaw *mCommonAPIClientMockNodeInspectWithRaw) Set(f func(ctx context.Context, nodeID string) (n1 swarm.Node, ba1 []byte, err error)) *CommonAPIClientMock {
	if mmNodeInspectWithRaw.defaultExpectation != nil {
		mmNodeInspectWithRaw.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.NodeInspectWithRaw method")
	}

	if len(mmNodeInspectWithRaw.expectations) > 0 {
		mmNodeInspectWithRaw.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.NodeInspectWithRaw method")
	}

	mmNodeInspectWithRaw.mock.funcNodeInspectWithRaw = f
	return mmNodeInspectWithRaw.mock
}

// When sets expectation for the CommonAPIClient.NodeInspectWithRaw which will trigger the result defined by the following
// Then helper
func (mmNodeInspectWithRaw *mCommonAPIClientMockNodeInspectWithRaw) When(ctx context.Context, nodeID string) *CommonAPIClientMockNodeInspectWithRawExpectation {
	if mmNodeInspectWithRaw.mock.funcNodeInspectWithRaw != nil {
		mmNodeInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.NodeInspectWithRaw mock is already set by Set")
	}

	expectation := &CommonAPIClientMockNodeInspectWithRawExpectation{
		mock:   mmNodeInspectWithRaw.mock,
		params: &CommonAPIClientMockNodeInspectWithRawParams{ctx, nodeID},
	}
	mmNodeInspectWithRaw.expectations = append(mmNodeInspectWithRaw.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.NodeInspectWithRaw return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockNodeInspectWithRawExpectation) Then(n1 swarm.Node, ba1 []byte, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockNodeInspectWithRawResults{n1, ba1, err}
	return e.mock
}

// NodeInspectWithRaw implements client.CommonAPIClient
func (mmNodeInspectWithRaw *CommonAPIClientMock) NodeInspectWithRaw(ctx context.Context, nodeID string) (n1 swarm.Node, ba1 []byte, err error) {
	mm_atomic.AddUint64(&mmNodeInspectWithRaw.beforeNodeInspectWithRawCounter, 1)
	defer mm_atomic.AddUint64(&mmNodeInspectWithRaw.afterNodeInspectWithRawCounter, 1)

	if mmNodeInspectWithRaw.inspectFuncNodeInspectWithRaw != nil {
		mmNodeInspectWithRaw.inspectFuncNodeInspectWithRaw(ctx, nodeID)
	}

	mm_params := &CommonAPIClientMockNodeInspectWithRawParams{ctx, nodeID}

	// Record call args
	mmNodeInspectWithRaw.NodeInspectWithRawMock.mutex.Lock()
	mmNodeInspectWithRaw.NodeInspectWithRawMock.callArgs = append(mmNodeInspectWithRaw.NodeInspectWithRawMock.callArgs, mm_params)
	mmNodeInspectWithRaw.NodeInspectWithRawMock.mutex.Unlock()

	for _, e := range mmNodeInspectWithRaw.NodeInspectWithRawMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.n1, e.results.ba1, e.results.err
		}
	}

	if mmNodeInspectWithRaw.NodeInspectWithRawMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNodeInspectWithRaw.NodeInspectWithRawMock.defaultExpectation.Counter, 1)
		mm_want := mmNodeInspectWithRaw.NodeInspectWithRawMock.defaultExpectation.params
		mm_got := CommonAPIClientMockNodeInspectWithRawParams{ctx, nodeID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNodeInspectWithRaw.t.Errorf("CommonAPIClientMock.NodeInspectWithRaw got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmNodeInspectWithRaw.NodeInspectWithRawMock.defaultExpectation.results
		if mm_results == nil {
			mmNodeInspectWithRaw.t.Fatal("No results are set for the CommonAPIClientMock.NodeInspectWithRaw")
		}
		return (*mm_results).n1, (*mm_results).ba1, (*mm_results).err
	}
	if mmNodeInspectWithRaw.funcNodeInspectWithRaw != nil {
		return mmNodeInspectWithRaw.funcNodeInspectWithRaw(ctx, nodeID)
	}
	mmNodeInspectWithRaw.t.Fatalf("Unexpected call to CommonAPIClientMock.NodeInspectWithRaw. %v %v", ctx, nodeID)
	return
}

// NodeInspectWithRawAfterCounter returns a count of finished CommonAPIClientMock.NodeInspectWithRaw invocations
func (mmNodeInspectWithRaw *CommonAPIClientMock) NodeInspectWithRawAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNodeInspectWithRaw.afterNodeInspectWithRawCounter)
}

// NodeInspectWithRawBeforeCounter returns a count of CommonAPIClientMock.NodeInspectWithRaw invocations
func (mmNodeInspectWithRaw *CommonAPIClientMock) NodeInspectWithRawBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNodeInspectWithRaw.beforeNodeInspectWithRawCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.NodeInspectWithRaw.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNodeInspectWithRaw *mCommonAPIClientMockNodeInspectWithRaw) Calls() []*CommonAPIClientMockNodeInspectWithRawParams {
	mmNodeInspectWithRaw.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockNodeInspectWithRawParams, len(mmNodeInspectWithRaw.callArgs))
	copy(argCopy, mmNodeInspectWithRaw.callArgs)

	mmNodeInspectWithRaw.mutex.RUnlock()

	return argCopy
}

// MinimockNodeInspectWithRawDone returns true if the count of the NodeInspectWithRaw invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockNodeInspectWithRawDone() bool {
	for _, e := range m.NodeInspectWithRawMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NodeInspectWithRawMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNodeInspectWithRawCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNodeInspectWithRaw != nil && mm_atomic.LoadUint64(&m.afterNodeInspectWithRawCounter) < 1 {
		return false
	}
	return true
}

// MinimockNodeInspectWithRawInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockNodeInspectWithRawInspect() {
	for _, e := range m.NodeInspectWithRawMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.NodeInspectWithRaw with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NodeInspectWithRawMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNodeInspectWithRawCounter) < 1 {
		if m.NodeInspectWithRawMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.NodeInspectWithRaw")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.NodeInspectWithRaw with params: %#v", *m.NodeInspectWithRawMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNodeInspectWithRaw != nil && mm_atomic.LoadUint64(&m.afterNodeInspectWithRawCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.NodeInspectWithRaw")
	}
}

type mCommonAPIClientMockNodeList struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockNodeListExpectation
	expectations       []*CommonAPIClientMockNodeListExpectation

	callArgs []*CommonAPIClientMockNodeListParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockNodeListExpectation specifies expectation struct of the CommonAPIClient.NodeList
type CommonAPIClientMockNodeListExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockNodeListParams
	results *CommonAPIClientMockNodeListResults
	Counter uint64
}

// CommonAPIClientMockNodeListParams contains parameters of the CommonAPIClient.NodeList
type CommonAPIClientMockNodeListParams struct {
	ctx     context.Context
	options types.NodeListOptions
}

// CommonAPIClientMockNodeListResults contains results of the CommonAPIClient.NodeList
type CommonAPIClientMockNodeListResults struct {
	na1 []swarm.Node
	err error
}

// Expect sets up expected params for CommonAPIClient.NodeList
func (mmNodeList *mCommonAPIClientMockNodeList) Expect(ctx context.Context, options types.NodeListOptions) *mCommonAPIClientMockNodeList {
	if mmNodeList.mock.funcNodeList != nil {
		mmNodeList.mock.t.Fatalf("CommonAPIClientMock.NodeList mock is already set by Set")
	}

	if mmNodeList.defaultExpectation == nil {
		mmNodeList.defaultExpectation = &CommonAPIClientMockNodeListExpectation{}
	}

	mmNodeList.defaultExpectation.params = &CommonAPIClientMockNodeListParams{ctx, options}
	for _, e := range mmNodeList.expectations {
		if minimock.Equal(e.params, mmNodeList.defaultExpectation.params) {
			mmNodeList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNodeList.defaultExpectation.params)
		}
	}

	return mmNodeList
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.NodeList
func (mmNodeList *mCommonAPIClientMockNodeList) Inspect(f func(ctx context.Context, options types.NodeListOptions)) *mCommonAPIClientMockNodeList {
	if mmNodeList.mock.inspectFuncNodeList != nil {
		mmNodeList.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.NodeList")
	}

	mmNodeList.mock.inspectFuncNodeList = f

	return mmNodeList
}

// Return sets up results that will be returned by CommonAPIClient.NodeList
func (mmNodeList *mCommonAPIClientMockNodeList) Return(na1 []swarm.Node, err error) *CommonAPIClientMock {
	if mmNodeList.mock.funcNodeList != nil {
		mmNodeList.mock.t.Fatalf("CommonAPIClientMock.NodeList mock is already set by Set")
	}

	if mmNodeList.defaultExpectation == nil {
		mmNodeList.defaultExpectation = &CommonAPIClientMockNodeListExpectation{mock: mmNodeList.mock}
	}
	mmNodeList.defaultExpectation.results = &CommonAPIClientMockNodeListResults{na1, err}
	return mmNodeList.mock
}

//Set uses given function f to mock the CommonAPIClient.NodeList method
func (mmNodeList *mCommonAPIClientMockNodeList) Set(f func(ctx context.Context, options types.NodeListOptions) (na1 []swarm.Node, err error)) *CommonAPIClientMock {
	if mmNodeList.defaultExpectation != nil {
		mmNodeList.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.NodeList method")
	}

	if len(mmNodeList.expectations) > 0 {
		mmNodeList.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.NodeList method")
	}

	mmNodeList.mock.funcNodeList = f
	return mmNodeList.mock
}

// When sets expectation for the CommonAPIClient.NodeList which will trigger the result defined by the following
// Then helper
func (mmNodeList *mCommonAPIClientMockNodeList) When(ctx context.Context, options types.NodeListOptions) *CommonAPIClientMockNodeListExpectation {
	if mmNodeList.mock.funcNodeList != nil {
		mmNodeList.mock.t.Fatalf("CommonAPIClientMock.NodeList mock is already set by Set")
	}

	expectation := &CommonAPIClientMockNodeListExpectation{
		mock:   mmNodeList.mock,
		params: &CommonAPIClientMockNodeListParams{ctx, options},
	}
	mmNodeList.expectations = append(mmNodeList.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.NodeList return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockNodeListExpectation) Then(na1 []swarm.Node, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockNodeListResults{na1, err}
	return e.mock
}

// NodeList implements client.CommonAPIClient
func (mmNodeList *CommonAPIClientMock) NodeList(ctx context.Context, options types.NodeListOptions) (na1 []swarm.Node, err error) {
	mm_atomic.AddUint64(&mmNodeList.beforeNodeListCounter, 1)
	defer mm_atomic.AddUint64(&mmNodeList.afterNodeListCounter, 1)

	if mmNodeList.inspectFuncNodeList != nil {
		mmNodeList.inspectFuncNodeList(ctx, options)
	}

	mm_params := &CommonAPIClientMockNodeListParams{ctx, options}

	// Record call args
	mmNodeList.NodeListMock.mutex.Lock()
	mmNodeList.NodeListMock.callArgs = append(mmNodeList.NodeListMock.callArgs, mm_params)
	mmNodeList.NodeListMock.mutex.Unlock()

	for _, e := range mmNodeList.NodeListMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.na1, e.results.err
		}
	}

	if mmNodeList.NodeListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNodeList.NodeListMock.defaultExpectation.Counter, 1)
		mm_want := mmNodeList.NodeListMock.defaultExpectation.params
		mm_got := CommonAPIClientMockNodeListParams{ctx, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNodeList.t.Errorf("CommonAPIClientMock.NodeList got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmNodeList.NodeListMock.defaultExpectation.results
		if mm_results == nil {
			mmNodeList.t.Fatal("No results are set for the CommonAPIClientMock.NodeList")
		}
		return (*mm_results).na1, (*mm_results).err
	}
	if mmNodeList.funcNodeList != nil {
		return mmNodeList.funcNodeList(ctx, options)
	}
	mmNodeList.t.Fatalf("Unexpected call to CommonAPIClientMock.NodeList. %v %v", ctx, options)
	return
}

// NodeListAfterCounter returns a count of finished CommonAPIClientMock.NodeList invocations
func (mmNodeList *CommonAPIClientMock) NodeListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNodeList.afterNodeListCounter)
}

// NodeListBeforeCounter returns a count of CommonAPIClientMock.NodeList invocations
func (mmNodeList *CommonAPIClientMock) NodeListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNodeList.beforeNodeListCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.NodeList.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNodeList *mCommonAPIClientMockNodeList) Calls() []*CommonAPIClientMockNodeListParams {
	mmNodeList.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockNodeListParams, len(mmNodeList.callArgs))
	copy(argCopy, mmNodeList.callArgs)

	mmNodeList.mutex.RUnlock()

	return argCopy
}

// MinimockNodeListDone returns true if the count of the NodeList invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockNodeListDone() bool {
	for _, e := range m.NodeListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NodeListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNodeListCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNodeList != nil && mm_atomic.LoadUint64(&m.afterNodeListCounter) < 1 {
		return false
	}
	return true
}

// MinimockNodeListInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockNodeListInspect() {
	for _, e := range m.NodeListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.NodeList with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NodeListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNodeListCounter) < 1 {
		if m.NodeListMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.NodeList")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.NodeList with params: %#v", *m.NodeListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNodeList != nil && mm_atomic.LoadUint64(&m.afterNodeListCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.NodeList")
	}
}

type mCommonAPIClientMockNodeRemove struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockNodeRemoveExpectation
	expectations       []*CommonAPIClientMockNodeRemoveExpectation

	callArgs []*CommonAPIClientMockNodeRemoveParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockNodeRemoveExpectation specifies expectation struct of the CommonAPIClient.NodeRemove
type CommonAPIClientMockNodeRemoveExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockNodeRemoveParams
	results *CommonAPIClientMockNodeRemoveResults
	Counter uint64
}

// CommonAPIClientMockNodeRemoveParams contains parameters of the CommonAPIClient.NodeRemove
type CommonAPIClientMockNodeRemoveParams struct {
	ctx     context.Context
	nodeID  string
	options types.NodeRemoveOptions
}

// CommonAPIClientMockNodeRemoveResults contains results of the CommonAPIClient.NodeRemove
type CommonAPIClientMockNodeRemoveResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.NodeRemove
func (mmNodeRemove *mCommonAPIClientMockNodeRemove) Expect(ctx context.Context, nodeID string, options types.NodeRemoveOptions) *mCommonAPIClientMockNodeRemove {
	if mmNodeRemove.mock.funcNodeRemove != nil {
		mmNodeRemove.mock.t.Fatalf("CommonAPIClientMock.NodeRemove mock is already set by Set")
	}

	if mmNodeRemove.defaultExpectation == nil {
		mmNodeRemove.defaultExpectation = &CommonAPIClientMockNodeRemoveExpectation{}
	}

	mmNodeRemove.defaultExpectation.params = &CommonAPIClientMockNodeRemoveParams{ctx, nodeID, options}
	for _, e := range mmNodeRemove.expectations {
		if minimock.Equal(e.params, mmNodeRemove.defaultExpectation.params) {
			mmNodeRemove.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNodeRemove.defaultExpectation.params)
		}
	}

	return mmNodeRemove
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.NodeRemove
func (mmNodeRemove *mCommonAPIClientMockNodeRemove) Inspect(f func(ctx context.Context, nodeID string, options types.NodeRemoveOptions)) *mCommonAPIClientMockNodeRemove {
	if mmNodeRemove.mock.inspectFuncNodeRemove != nil {
		mmNodeRemove.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.NodeRemove")
	}

	mmNodeRemove.mock.inspectFuncNodeRemove = f

	return mmNodeRemove
}

// Return sets up results that will be returned by CommonAPIClient.NodeRemove
func (mmNodeRemove *mCommonAPIClientMockNodeRemove) Return(err error) *CommonAPIClientMock {
	if mmNodeRemove.mock.funcNodeRemove != nil {
		mmNodeRemove.mock.t.Fatalf("CommonAPIClientMock.NodeRemove mock is already set by Set")
	}

	if mmNodeRemove.defaultExpectation == nil {
		mmNodeRemove.defaultExpectation = &CommonAPIClientMockNodeRemoveExpectation{mock: mmNodeRemove.mock}
	}
	mmNodeRemove.defaultExpectation.results = &CommonAPIClientMockNodeRemoveResults{err}
	return mmNodeRemove.mock
}

//Set uses given function f to mock the CommonAPIClient.NodeRemove method
func (mmNodeRemove *mCommonAPIClientMockNodeRemove) Set(f func(ctx context.Context, nodeID string, options types.NodeRemoveOptions) (err error)) *CommonAPIClientMock {
	if mmNodeRemove.defaultExpectation != nil {
		mmNodeRemove.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.NodeRemove method")
	}

	if len(mmNodeRemove.expectations) > 0 {
		mmNodeRemove.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.NodeRemove method")
	}

	mmNodeRemove.mock.funcNodeRemove = f
	return mmNodeRemove.mock
}

// When sets expectation for the CommonAPIClient.NodeRemove which will trigger the result defined by the following
// Then helper
func (mmNodeRemove *mCommonAPIClientMockNodeRemove) When(ctx context.Context, nodeID string, options types.NodeRemoveOptions) *CommonAPIClientMockNodeRemoveExpectation {
	if mmNodeRemove.mock.funcNodeRemove != nil {
		mmNodeRemove.mock.t.Fatalf("CommonAPIClientMock.NodeRemove mock is already set by Set")
	}

	expectation := &CommonAPIClientMockNodeRemoveExpectation{
		mock:   mmNodeRemove.mock,
		params: &CommonAPIClientMockNodeRemoveParams{ctx, nodeID, options},
	}
	mmNodeRemove.expectations = append(mmNodeRemove.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.NodeRemove return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockNodeRemoveExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockNodeRemoveResults{err}
	return e.mock
}

// NodeRemove implements client.CommonAPIClient
func (mmNodeRemove *CommonAPIClientMock) NodeRemove(ctx context.Context, nodeID string, options types.NodeRemoveOptions) (err error) {
	mm_atomic.AddUint64(&mmNodeRemove.beforeNodeRemoveCounter, 1)
	defer mm_atomic.AddUint64(&mmNodeRemove.afterNodeRemoveCounter, 1)

	if mmNodeRemove.inspectFuncNodeRemove != nil {
		mmNodeRemove.inspectFuncNodeRemove(ctx, nodeID, options)
	}

	mm_params := &CommonAPIClientMockNodeRemoveParams{ctx, nodeID, options}

	// Record call args
	mmNodeRemove.NodeRemoveMock.mutex.Lock()
	mmNodeRemove.NodeRemoveMock.callArgs = append(mmNodeRemove.NodeRemoveMock.callArgs, mm_params)
	mmNodeRemove.NodeRemoveMock.mutex.Unlock()

	for _, e := range mmNodeRemove.NodeRemoveMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmNodeRemove.NodeRemoveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNodeRemove.NodeRemoveMock.defaultExpectation.Counter, 1)
		mm_want := mmNodeRemove.NodeRemoveMock.defaultExpectation.params
		mm_got := CommonAPIClientMockNodeRemoveParams{ctx, nodeID, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNodeRemove.t.Errorf("CommonAPIClientMock.NodeRemove got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmNodeRemove.NodeRemoveMock.defaultExpectation.results
		if mm_results == nil {
			mmNodeRemove.t.Fatal("No results are set for the CommonAPIClientMock.NodeRemove")
		}
		return (*mm_results).err
	}
	if mmNodeRemove.funcNodeRemove != nil {
		return mmNodeRemove.funcNodeRemove(ctx, nodeID, options)
	}
	mmNodeRemove.t.Fatalf("Unexpected call to CommonAPIClientMock.NodeRemove. %v %v %v", ctx, nodeID, options)
	return
}

// NodeRemoveAfterCounter returns a count of finished CommonAPIClientMock.NodeRemove invocations
func (mmNodeRemove *CommonAPIClientMock) NodeRemoveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNodeRemove.afterNodeRemoveCounter)
}

// NodeRemoveBeforeCounter returns a count of CommonAPIClientMock.NodeRemove invocations
func (mmNodeRemove *CommonAPIClientMock) NodeRemoveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNodeRemove.beforeNodeRemoveCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.NodeRemove.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNodeRemove *mCommonAPIClientMockNodeRemove) Calls() []*CommonAPIClientMockNodeRemoveParams {
	mmNodeRemove.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockNodeRemoveParams, len(mmNodeRemove.callArgs))
	copy(argCopy, mmNodeRemove.callArgs)

	mmNodeRemove.mutex.RUnlock()

	return argCopy
}

// MinimockNodeRemoveDone returns true if the count of the NodeRemove invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockNodeRemoveDone() bool {
	for _, e := range m.NodeRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NodeRemoveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNodeRemoveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNodeRemove != nil && mm_atomic.LoadUint64(&m.afterNodeRemoveCounter) < 1 {
		return false
	}
	return true
}

// MinimockNodeRemoveInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockNodeRemoveInspect() {
	for _, e := range m.NodeRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.NodeRemove with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NodeRemoveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNodeRemoveCounter) < 1 {
		if m.NodeRemoveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.NodeRemove")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.NodeRemove with params: %#v", *m.NodeRemoveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNodeRemove != nil && mm_atomic.LoadUint64(&m.afterNodeRemoveCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.NodeRemove")
	}
}

type mCommonAPIClientMockNodeUpdate struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockNodeUpdateExpectation
	expectations       []*CommonAPIClientMockNodeUpdateExpectation

	callArgs []*CommonAPIClientMockNodeUpdateParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockNodeUpdateExpectation specifies expectation struct of the CommonAPIClient.NodeUpdate
type CommonAPIClientMockNodeUpdateExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockNodeUpdateParams
	results *CommonAPIClientMockNodeUpdateResults
	Counter uint64
}

// CommonAPIClientMockNodeUpdateParams contains parameters of the CommonAPIClient.NodeUpdate
type CommonAPIClientMockNodeUpdateParams struct {
	ctx     context.Context
	nodeID  string
	version swarm.Version
	node    swarm.NodeSpec
}

// CommonAPIClientMockNodeUpdateResults contains results of the CommonAPIClient.NodeUpdate
type CommonAPIClientMockNodeUpdateResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.NodeUpdate
func (mmNodeUpdate *mCommonAPIClientMockNodeUpdate) Expect(ctx context.Context, nodeID string, version swarm.Version, node swarm.NodeSpec) *mCommonAPIClientMockNodeUpdate {
	if mmNodeUpdate.mock.funcNodeUpdate != nil {
		mmNodeUpdate.mock.t.Fatalf("CommonAPIClientMock.NodeUpdate mock is already set by Set")
	}

	if mmNodeUpdate.defaultExpectation == nil {
		mmNodeUpdate.defaultExpectation = &CommonAPIClientMockNodeUpdateExpectation{}
	}

	mmNodeUpdate.defaultExpectation.params = &CommonAPIClientMockNodeUpdateParams{ctx, nodeID, version, node}
	for _, e := range mmNodeUpdate.expectations {
		if minimock.Equal(e.params, mmNodeUpdate.defaultExpectation.params) {
			mmNodeUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNodeUpdate.defaultExpectation.params)
		}
	}

	return mmNodeUpdate
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.NodeUpdate
func (mmNodeUpdate *mCommonAPIClientMockNodeUpdate) Inspect(f func(ctx context.Context, nodeID string, version swarm.Version, node swarm.NodeSpec)) *mCommonAPIClientMockNodeUpdate {
	if mmNodeUpdate.mock.inspectFuncNodeUpdate != nil {
		mmNodeUpdate.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.NodeUpdate")
	}

	mmNodeUpdate.mock.inspectFuncNodeUpdate = f

	return mmNodeUpdate
}

// Return sets up results that will be returned by CommonAPIClient.NodeUpdate
func (mmNodeUpdate *mCommonAPIClientMockNodeUpdate) Return(err error) *CommonAPIClientMock {
	if mmNodeUpdate.mock.funcNodeUpdate != nil {
		mmNodeUpdate.mock.t.Fatalf("CommonAPIClientMock.NodeUpdate mock is already set by Set")
	}

	if mmNodeUpdate.defaultExpectation == nil {
		mmNodeUpdate.defaultExpectation = &CommonAPIClientMockNodeUpdateExpectation{mock: mmNodeUpdate.mock}
	}
	mmNodeUpdate.defaultExpectation.results = &CommonAPIClientMockNodeUpdateResults{err}
	return mmNodeUpdate.mock
}

//Set uses given function f to mock the CommonAPIClient.NodeUpdate method
func (mmNodeUpdate *mCommonAPIClientMockNodeUpdate) Set(f func(ctx context.Context, nodeID string, version swarm.Version, node swarm.NodeSpec) (err error)) *CommonAPIClientMock {
	if mmNodeUpdate.defaultExpectation != nil {
		mmNodeUpdate.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.NodeUpdate method")
	}

	if len(mmNodeUpdate.expectations) > 0 {
		mmNodeUpdate.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.NodeUpdate method")
	}

	mmNodeUpdate.mock.funcNodeUpdate = f
	return mmNodeUpdate.mock
}

// When sets expectation for the CommonAPIClient.NodeUpdate which will trigger the result defined by the following
// Then helper
func (mmNodeUpdate *mCommonAPIClientMockNodeUpdate) When(ctx context.Context, nodeID string, version swarm.Version, node swarm.NodeSpec) *CommonAPIClientMockNodeUpdateExpectation {
	if mmNodeUpdate.mock.funcNodeUpdate != nil {
		mmNodeUpdate.mock.t.Fatalf("CommonAPIClientMock.NodeUpdate mock is already set by Set")
	}

	expectation := &CommonAPIClientMockNodeUpdateExpectation{
		mock:   mmNodeUpdate.mock,
		params: &CommonAPIClientMockNodeUpdateParams{ctx, nodeID, version, node},
	}
	mmNodeUpdate.expectations = append(mmNodeUpdate.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.NodeUpdate return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockNodeUpdateExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockNodeUpdateResults{err}
	return e.mock
}

// NodeUpdate implements client.CommonAPIClient
func (mmNodeUpdate *CommonAPIClientMock) NodeUpdate(ctx context.Context, nodeID string, version swarm.Version, node swarm.NodeSpec) (err error) {
	mm_atomic.AddUint64(&mmNodeUpdate.beforeNodeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmNodeUpdate.afterNodeUpdateCounter, 1)

	if mmNodeUpdate.inspectFuncNodeUpdate != nil {
		mmNodeUpdate.inspectFuncNodeUpdate(ctx, nodeID, version, node)
	}

	mm_params := &CommonAPIClientMockNodeUpdateParams{ctx, nodeID, version, node}

	// Record call args
	mmNodeUpdate.NodeUpdateMock.mutex.Lock()
	mmNodeUpdate.NodeUpdateMock.callArgs = append(mmNodeUpdate.NodeUpdateMock.callArgs, mm_params)
	mmNodeUpdate.NodeUpdateMock.mutex.Unlock()

	for _, e := range mmNodeUpdate.NodeUpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmNodeUpdate.NodeUpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNodeUpdate.NodeUpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmNodeUpdate.NodeUpdateMock.defaultExpectation.params
		mm_got := CommonAPIClientMockNodeUpdateParams{ctx, nodeID, version, node}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNodeUpdate.t.Errorf("CommonAPIClientMock.NodeUpdate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmNodeUpdate.NodeUpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmNodeUpdate.t.Fatal("No results are set for the CommonAPIClientMock.NodeUpdate")
		}
		return (*mm_results).err
	}
	if mmNodeUpdate.funcNodeUpdate != nil {
		return mmNodeUpdate.funcNodeUpdate(ctx, nodeID, version, node)
	}
	mmNodeUpdate.t.Fatalf("Unexpected call to CommonAPIClientMock.NodeUpdate. %v %v %v %v", ctx, nodeID, version, node)
	return
}

// NodeUpdateAfterCounter returns a count of finished CommonAPIClientMock.NodeUpdate invocations
func (mmNodeUpdate *CommonAPIClientMock) NodeUpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNodeUpdate.afterNodeUpdateCounter)
}

// NodeUpdateBeforeCounter returns a count of CommonAPIClientMock.NodeUpdate invocations
func (mmNodeUpdate *CommonAPIClientMock) NodeUpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNodeUpdate.beforeNodeUpdateCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.NodeUpdate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNodeUpdate *mCommonAPIClientMockNodeUpdate) Calls() []*CommonAPIClientMockNodeUpdateParams {
	mmNodeUpdate.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockNodeUpdateParams, len(mmNodeUpdate.callArgs))
	copy(argCopy, mmNodeUpdate.callArgs)

	mmNodeUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockNodeUpdateDone returns true if the count of the NodeUpdate invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockNodeUpdateDone() bool {
	for _, e := range m.NodeUpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NodeUpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNodeUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNodeUpdate != nil && mm_atomic.LoadUint64(&m.afterNodeUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockNodeUpdateInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockNodeUpdateInspect() {
	for _, e := range m.NodeUpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.NodeUpdate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NodeUpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNodeUpdateCounter) < 1 {
		if m.NodeUpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.NodeUpdate")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.NodeUpdate with params: %#v", *m.NodeUpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNodeUpdate != nil && mm_atomic.LoadUint64(&m.afterNodeUpdateCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.NodeUpdate")
	}
}

type mCommonAPIClientMockPing struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockPingExpectation
	expectations       []*CommonAPIClientMockPingExpectation

	callArgs []*CommonAPIClientMockPingParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockPingExpectation specifies expectation struct of the CommonAPIClient.Ping
type CommonAPIClientMockPingExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockPingParams
	results *CommonAPIClientMockPingResults
	Counter uint64
}

// CommonAPIClientMockPingParams contains parameters of the CommonAPIClient.Ping
type CommonAPIClientMockPingParams struct {
	ctx context.Context
}

// CommonAPIClientMockPingResults contains results of the CommonAPIClient.Ping
type CommonAPIClientMockPingResults struct {
	p1  types.Ping
	err error
}

// Expect sets up expected params for CommonAPIClient.Ping
func (mmPing *mCommonAPIClientMockPing) Expect(ctx context.Context) *mCommonAPIClientMockPing {
	if mmPing.mock.funcPing != nil {
		mmPing.mock.t.Fatalf("CommonAPIClientMock.Ping mock is already set by Set")
	}

	if mmPing.defaultExpectation == nil {
		mmPing.defaultExpectation = &CommonAPIClientMockPingExpectation{}
	}

	mmPing.defaultExpectation.params = &CommonAPIClientMockPingParams{ctx}
	for _, e := range mmPing.expectations {
		if minimock.Equal(e.params, mmPing.defaultExpectation.params) {
			mmPing.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPing.defaultExpectation.params)
		}
	}

	return mmPing
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.Ping
func (mmPing *mCommonAPIClientMockPing) Inspect(f func(ctx context.Context)) *mCommonAPIClientMockPing {
	if mmPing.mock.inspectFuncPing != nil {
		mmPing.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.Ping")
	}

	mmPing.mock.inspectFuncPing = f

	return mmPing
}

// Return sets up results that will be returned by CommonAPIClient.Ping
func (mmPing *mCommonAPIClientMockPing) Return(p1 types.Ping, err error) *CommonAPIClientMock {
	if mmPing.mock.funcPing != nil {
		mmPing.mock.t.Fatalf("CommonAPIClientMock.Ping mock is already set by Set")
	}

	if mmPing.defaultExpectation == nil {
		mmPing.defaultExpectation = &CommonAPIClientMockPingExpectation{mock: mmPing.mock}
	}
	mmPing.defaultExpectation.results = &CommonAPIClientMockPingResults{p1, err}
	return mmPing.mock
}

//Set uses given function f to mock the CommonAPIClient.Ping method
func (mmPing *mCommonAPIClientMockPing) Set(f func(ctx context.Context) (p1 types.Ping, err error)) *CommonAPIClientMock {
	if mmPing.defaultExpectation != nil {
		mmPing.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.Ping method")
	}

	if len(mmPing.expectations) > 0 {
		mmPing.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.Ping method")
	}

	mmPing.mock.funcPing = f
	return mmPing.mock
}

// When sets expectation for the CommonAPIClient.Ping which will trigger the result defined by the following
// Then helper
func (mmPing *mCommonAPIClientMockPing) When(ctx context.Context) *CommonAPIClientMockPingExpectation {
	if mmPing.mock.funcPing != nil {
		mmPing.mock.t.Fatalf("CommonAPIClientMock.Ping mock is already set by Set")
	}

	expectation := &CommonAPIClientMockPingExpectation{
		mock:   mmPing.mock,
		params: &CommonAPIClientMockPingParams{ctx},
	}
	mmPing.expectations = append(mmPing.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.Ping return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockPingExpectation) Then(p1 types.Ping, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockPingResults{p1, err}
	return e.mock
}

// Ping implements client.CommonAPIClient
func (mmPing *CommonAPIClientMock) Ping(ctx context.Context) (p1 types.Ping, err error) {
	mm_atomic.AddUint64(&mmPing.beforePingCounter, 1)
	defer mm_atomic.AddUint64(&mmPing.afterPingCounter, 1)

	if mmPing.inspectFuncPing != nil {
		mmPing.inspectFuncPing(ctx)
	}

	mm_params := &CommonAPIClientMockPingParams{ctx}

	// Record call args
	mmPing.PingMock.mutex.Lock()
	mmPing.PingMock.callArgs = append(mmPing.PingMock.callArgs, mm_params)
	mmPing.PingMock.mutex.Unlock()

	for _, e := range mmPing.PingMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.p1, e.results.err
		}
	}

	if mmPing.PingMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPing.PingMock.defaultExpectation.Counter, 1)
		mm_want := mmPing.PingMock.defaultExpectation.params
		mm_got := CommonAPIClientMockPingParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPing.t.Errorf("CommonAPIClientMock.Ping got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPing.PingMock.defaultExpectation.results
		if mm_results == nil {
			mmPing.t.Fatal("No results are set for the CommonAPIClientMock.Ping")
		}
		return (*mm_results).p1, (*mm_results).err
	}
	if mmPing.funcPing != nil {
		return mmPing.funcPing(ctx)
	}
	mmPing.t.Fatalf("Unexpected call to CommonAPIClientMock.Ping. %v", ctx)
	return
}

// PingAfterCounter returns a count of finished CommonAPIClientMock.Ping invocations
func (mmPing *CommonAPIClientMock) PingAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPing.afterPingCounter)
}

// PingBeforeCounter returns a count of CommonAPIClientMock.Ping invocations
func (mmPing *CommonAPIClientMock) PingBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPing.beforePingCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.Ping.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPing *mCommonAPIClientMockPing) Calls() []*CommonAPIClientMockPingParams {
	mmPing.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockPingParams, len(mmPing.callArgs))
	copy(argCopy, mmPing.callArgs)

	mmPing.mutex.RUnlock()

	return argCopy
}

// MinimockPingDone returns true if the count of the Ping invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockPingDone() bool {
	for _, e := range m.PingMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PingMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPingCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPing != nil && mm_atomic.LoadUint64(&m.afterPingCounter) < 1 {
		return false
	}
	return true
}

// MinimockPingInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockPingInspect() {
	for _, e := range m.PingMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.Ping with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PingMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPingCounter) < 1 {
		if m.PingMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.Ping")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.Ping with params: %#v", *m.PingMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPing != nil && mm_atomic.LoadUint64(&m.afterPingCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.Ping")
	}
}

type mCommonAPIClientMockPluginCreate struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockPluginCreateExpectation
	expectations       []*CommonAPIClientMockPluginCreateExpectation

	callArgs []*CommonAPIClientMockPluginCreateParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockPluginCreateExpectation specifies expectation struct of the CommonAPIClient.PluginCreate
type CommonAPIClientMockPluginCreateExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockPluginCreateParams
	results *CommonAPIClientMockPluginCreateResults
	Counter uint64
}

// CommonAPIClientMockPluginCreateParams contains parameters of the CommonAPIClient.PluginCreate
type CommonAPIClientMockPluginCreateParams struct {
	ctx           context.Context
	createContext io.Reader
	options       types.PluginCreateOptions
}

// CommonAPIClientMockPluginCreateResults contains results of the CommonAPIClient.PluginCreate
type CommonAPIClientMockPluginCreateResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.PluginCreate
func (mmPluginCreate *mCommonAPIClientMockPluginCreate) Expect(ctx context.Context, createContext io.Reader, options types.PluginCreateOptions) *mCommonAPIClientMockPluginCreate {
	if mmPluginCreate.mock.funcPluginCreate != nil {
		mmPluginCreate.mock.t.Fatalf("CommonAPIClientMock.PluginCreate mock is already set by Set")
	}

	if mmPluginCreate.defaultExpectation == nil {
		mmPluginCreate.defaultExpectation = &CommonAPIClientMockPluginCreateExpectation{}
	}

	mmPluginCreate.defaultExpectation.params = &CommonAPIClientMockPluginCreateParams{ctx, createContext, options}
	for _, e := range mmPluginCreate.expectations {
		if minimock.Equal(e.params, mmPluginCreate.defaultExpectation.params) {
			mmPluginCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPluginCreate.defaultExpectation.params)
		}
	}

	return mmPluginCreate
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.PluginCreate
func (mmPluginCreate *mCommonAPIClientMockPluginCreate) Inspect(f func(ctx context.Context, createContext io.Reader, options types.PluginCreateOptions)) *mCommonAPIClientMockPluginCreate {
	if mmPluginCreate.mock.inspectFuncPluginCreate != nil {
		mmPluginCreate.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.PluginCreate")
	}

	mmPluginCreate.mock.inspectFuncPluginCreate = f

	return mmPluginCreate
}

// Return sets up results that will be returned by CommonAPIClient.PluginCreate
func (mmPluginCreate *mCommonAPIClientMockPluginCreate) Return(err error) *CommonAPIClientMock {
	if mmPluginCreate.mock.funcPluginCreate != nil {
		mmPluginCreate.mock.t.Fatalf("CommonAPIClientMock.PluginCreate mock is already set by Set")
	}

	if mmPluginCreate.defaultExpectation == nil {
		mmPluginCreate.defaultExpectation = &CommonAPIClientMockPluginCreateExpectation{mock: mmPluginCreate.mock}
	}
	mmPluginCreate.defaultExpectation.results = &CommonAPIClientMockPluginCreateResults{err}
	return mmPluginCreate.mock
}

//Set uses given function f to mock the CommonAPIClient.PluginCreate method
func (mmPluginCreate *mCommonAPIClientMockPluginCreate) Set(f func(ctx context.Context, createContext io.Reader, options types.PluginCreateOptions) (err error)) *CommonAPIClientMock {
	if mmPluginCreate.defaultExpectation != nil {
		mmPluginCreate.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.PluginCreate method")
	}

	if len(mmPluginCreate.expectations) > 0 {
		mmPluginCreate.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.PluginCreate method")
	}

	mmPluginCreate.mock.funcPluginCreate = f
	return mmPluginCreate.mock
}

// When sets expectation for the CommonAPIClient.PluginCreate which will trigger the result defined by the following
// Then helper
func (mmPluginCreate *mCommonAPIClientMockPluginCreate) When(ctx context.Context, createContext io.Reader, options types.PluginCreateOptions) *CommonAPIClientMockPluginCreateExpectation {
	if mmPluginCreate.mock.funcPluginCreate != nil {
		mmPluginCreate.mock.t.Fatalf("CommonAPIClientMock.PluginCreate mock is already set by Set")
	}

	expectation := &CommonAPIClientMockPluginCreateExpectation{
		mock:   mmPluginCreate.mock,
		params: &CommonAPIClientMockPluginCreateParams{ctx, createContext, options},
	}
	mmPluginCreate.expectations = append(mmPluginCreate.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.PluginCreate return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockPluginCreateExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockPluginCreateResults{err}
	return e.mock
}

// PluginCreate implements client.CommonAPIClient
func (mmPluginCreate *CommonAPIClientMock) PluginCreate(ctx context.Context, createContext io.Reader, options types.PluginCreateOptions) (err error) {
	mm_atomic.AddUint64(&mmPluginCreate.beforePluginCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmPluginCreate.afterPluginCreateCounter, 1)

	if mmPluginCreate.inspectFuncPluginCreate != nil {
		mmPluginCreate.inspectFuncPluginCreate(ctx, createContext, options)
	}

	mm_params := &CommonAPIClientMockPluginCreateParams{ctx, createContext, options}

	// Record call args
	mmPluginCreate.PluginCreateMock.mutex.Lock()
	mmPluginCreate.PluginCreateMock.callArgs = append(mmPluginCreate.PluginCreateMock.callArgs, mm_params)
	mmPluginCreate.PluginCreateMock.mutex.Unlock()

	for _, e := range mmPluginCreate.PluginCreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmPluginCreate.PluginCreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPluginCreate.PluginCreateMock.defaultExpectation.Counter, 1)
		mm_want := mmPluginCreate.PluginCreateMock.defaultExpectation.params
		mm_got := CommonAPIClientMockPluginCreateParams{ctx, createContext, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPluginCreate.t.Errorf("CommonAPIClientMock.PluginCreate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPluginCreate.PluginCreateMock.defaultExpectation.results
		if mm_results == nil {
			mmPluginCreate.t.Fatal("No results are set for the CommonAPIClientMock.PluginCreate")
		}
		return (*mm_results).err
	}
	if mmPluginCreate.funcPluginCreate != nil {
		return mmPluginCreate.funcPluginCreate(ctx, createContext, options)
	}
	mmPluginCreate.t.Fatalf("Unexpected call to CommonAPIClientMock.PluginCreate. %v %v %v", ctx, createContext, options)
	return
}

// PluginCreateAfterCounter returns a count of finished CommonAPIClientMock.PluginCreate invocations
func (mmPluginCreate *CommonAPIClientMock) PluginCreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPluginCreate.afterPluginCreateCounter)
}

// PluginCreateBeforeCounter returns a count of CommonAPIClientMock.PluginCreate invocations
func (mmPluginCreate *CommonAPIClientMock) PluginCreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPluginCreate.beforePluginCreateCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.PluginCreate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPluginCreate *mCommonAPIClientMockPluginCreate) Calls() []*CommonAPIClientMockPluginCreateParams {
	mmPluginCreate.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockPluginCreateParams, len(mmPluginCreate.callArgs))
	copy(argCopy, mmPluginCreate.callArgs)

	mmPluginCreate.mutex.RUnlock()

	return argCopy
}

// MinimockPluginCreateDone returns true if the count of the PluginCreate invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockPluginCreateDone() bool {
	for _, e := range m.PluginCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PluginCreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPluginCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPluginCreate != nil && mm_atomic.LoadUint64(&m.afterPluginCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockPluginCreateInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockPluginCreateInspect() {
	for _, e := range m.PluginCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.PluginCreate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PluginCreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPluginCreateCounter) < 1 {
		if m.PluginCreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.PluginCreate")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.PluginCreate with params: %#v", *m.PluginCreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPluginCreate != nil && mm_atomic.LoadUint64(&m.afterPluginCreateCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.PluginCreate")
	}
}

type mCommonAPIClientMockPluginDisable struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockPluginDisableExpectation
	expectations       []*CommonAPIClientMockPluginDisableExpectation

	callArgs []*CommonAPIClientMockPluginDisableParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockPluginDisableExpectation specifies expectation struct of the CommonAPIClient.PluginDisable
type CommonAPIClientMockPluginDisableExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockPluginDisableParams
	results *CommonAPIClientMockPluginDisableResults
	Counter uint64
}

// CommonAPIClientMockPluginDisableParams contains parameters of the CommonAPIClient.PluginDisable
type CommonAPIClientMockPluginDisableParams struct {
	ctx     context.Context
	name    string
	options types.PluginDisableOptions
}

// CommonAPIClientMockPluginDisableResults contains results of the CommonAPIClient.PluginDisable
type CommonAPIClientMockPluginDisableResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.PluginDisable
func (mmPluginDisable *mCommonAPIClientMockPluginDisable) Expect(ctx context.Context, name string, options types.PluginDisableOptions) *mCommonAPIClientMockPluginDisable {
	if mmPluginDisable.mock.funcPluginDisable != nil {
		mmPluginDisable.mock.t.Fatalf("CommonAPIClientMock.PluginDisable mock is already set by Set")
	}

	if mmPluginDisable.defaultExpectation == nil {
		mmPluginDisable.defaultExpectation = &CommonAPIClientMockPluginDisableExpectation{}
	}

	mmPluginDisable.defaultExpectation.params = &CommonAPIClientMockPluginDisableParams{ctx, name, options}
	for _, e := range mmPluginDisable.expectations {
		if minimock.Equal(e.params, mmPluginDisable.defaultExpectation.params) {
			mmPluginDisable.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPluginDisable.defaultExpectation.params)
		}
	}

	return mmPluginDisable
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.PluginDisable
func (mmPluginDisable *mCommonAPIClientMockPluginDisable) Inspect(f func(ctx context.Context, name string, options types.PluginDisableOptions)) *mCommonAPIClientMockPluginDisable {
	if mmPluginDisable.mock.inspectFuncPluginDisable != nil {
		mmPluginDisable.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.PluginDisable")
	}

	mmPluginDisable.mock.inspectFuncPluginDisable = f

	return mmPluginDisable
}

// Return sets up results that will be returned by CommonAPIClient.PluginDisable
func (mmPluginDisable *mCommonAPIClientMockPluginDisable) Return(err error) *CommonAPIClientMock {
	if mmPluginDisable.mock.funcPluginDisable != nil {
		mmPluginDisable.mock.t.Fatalf("CommonAPIClientMock.PluginDisable mock is already set by Set")
	}

	if mmPluginDisable.defaultExpectation == nil {
		mmPluginDisable.defaultExpectation = &CommonAPIClientMockPluginDisableExpectation{mock: mmPluginDisable.mock}
	}
	mmPluginDisable.defaultExpectation.results = &CommonAPIClientMockPluginDisableResults{err}
	return mmPluginDisable.mock
}

//Set uses given function f to mock the CommonAPIClient.PluginDisable method
func (mmPluginDisable *mCommonAPIClientMockPluginDisable) Set(f func(ctx context.Context, name string, options types.PluginDisableOptions) (err error)) *CommonAPIClientMock {
	if mmPluginDisable.defaultExpectation != nil {
		mmPluginDisable.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.PluginDisable method")
	}

	if len(mmPluginDisable.expectations) > 0 {
		mmPluginDisable.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.PluginDisable method")
	}

	mmPluginDisable.mock.funcPluginDisable = f
	return mmPluginDisable.mock
}

// When sets expectation for the CommonAPIClient.PluginDisable which will trigger the result defined by the following
// Then helper
func (mmPluginDisable *mCommonAPIClientMockPluginDisable) When(ctx context.Context, name string, options types.PluginDisableOptions) *CommonAPIClientMockPluginDisableExpectation {
	if mmPluginDisable.mock.funcPluginDisable != nil {
		mmPluginDisable.mock.t.Fatalf("CommonAPIClientMock.PluginDisable mock is already set by Set")
	}

	expectation := &CommonAPIClientMockPluginDisableExpectation{
		mock:   mmPluginDisable.mock,
		params: &CommonAPIClientMockPluginDisableParams{ctx, name, options},
	}
	mmPluginDisable.expectations = append(mmPluginDisable.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.PluginDisable return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockPluginDisableExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockPluginDisableResults{err}
	return e.mock
}

// PluginDisable implements client.CommonAPIClient
func (mmPluginDisable *CommonAPIClientMock) PluginDisable(ctx context.Context, name string, options types.PluginDisableOptions) (err error) {
	mm_atomic.AddUint64(&mmPluginDisable.beforePluginDisableCounter, 1)
	defer mm_atomic.AddUint64(&mmPluginDisable.afterPluginDisableCounter, 1)

	if mmPluginDisable.inspectFuncPluginDisable != nil {
		mmPluginDisable.inspectFuncPluginDisable(ctx, name, options)
	}

	mm_params := &CommonAPIClientMockPluginDisableParams{ctx, name, options}

	// Record call args
	mmPluginDisable.PluginDisableMock.mutex.Lock()
	mmPluginDisable.PluginDisableMock.callArgs = append(mmPluginDisable.PluginDisableMock.callArgs, mm_params)
	mmPluginDisable.PluginDisableMock.mutex.Unlock()

	for _, e := range mmPluginDisable.PluginDisableMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmPluginDisable.PluginDisableMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPluginDisable.PluginDisableMock.defaultExpectation.Counter, 1)
		mm_want := mmPluginDisable.PluginDisableMock.defaultExpectation.params
		mm_got := CommonAPIClientMockPluginDisableParams{ctx, name, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPluginDisable.t.Errorf("CommonAPIClientMock.PluginDisable got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPluginDisable.PluginDisableMock.defaultExpectation.results
		if mm_results == nil {
			mmPluginDisable.t.Fatal("No results are set for the CommonAPIClientMock.PluginDisable")
		}
		return (*mm_results).err
	}
	if mmPluginDisable.funcPluginDisable != nil {
		return mmPluginDisable.funcPluginDisable(ctx, name, options)
	}
	mmPluginDisable.t.Fatalf("Unexpected call to CommonAPIClientMock.PluginDisable. %v %v %v", ctx, name, options)
	return
}

// PluginDisableAfterCounter returns a count of finished CommonAPIClientMock.PluginDisable invocations
func (mmPluginDisable *CommonAPIClientMock) PluginDisableAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPluginDisable.afterPluginDisableCounter)
}

// PluginDisableBeforeCounter returns a count of CommonAPIClientMock.PluginDisable invocations
func (mmPluginDisable *CommonAPIClientMock) PluginDisableBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPluginDisable.beforePluginDisableCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.PluginDisable.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPluginDisable *mCommonAPIClientMockPluginDisable) Calls() []*CommonAPIClientMockPluginDisableParams {
	mmPluginDisable.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockPluginDisableParams, len(mmPluginDisable.callArgs))
	copy(argCopy, mmPluginDisable.callArgs)

	mmPluginDisable.mutex.RUnlock()

	return argCopy
}

// MinimockPluginDisableDone returns true if the count of the PluginDisable invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockPluginDisableDone() bool {
	for _, e := range m.PluginDisableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PluginDisableMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPluginDisableCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPluginDisable != nil && mm_atomic.LoadUint64(&m.afterPluginDisableCounter) < 1 {
		return false
	}
	return true
}

// MinimockPluginDisableInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockPluginDisableInspect() {
	for _, e := range m.PluginDisableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.PluginDisable with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PluginDisableMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPluginDisableCounter) < 1 {
		if m.PluginDisableMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.PluginDisable")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.PluginDisable with params: %#v", *m.PluginDisableMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPluginDisable != nil && mm_atomic.LoadUint64(&m.afterPluginDisableCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.PluginDisable")
	}
}

type mCommonAPIClientMockPluginEnable struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockPluginEnableExpectation
	expectations       []*CommonAPIClientMockPluginEnableExpectation

	callArgs []*CommonAPIClientMockPluginEnableParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockPluginEnableExpectation specifies expectation struct of the CommonAPIClient.PluginEnable
type CommonAPIClientMockPluginEnableExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockPluginEnableParams
	results *CommonAPIClientMockPluginEnableResults
	Counter uint64
}

// CommonAPIClientMockPluginEnableParams contains parameters of the CommonAPIClient.PluginEnable
type CommonAPIClientMockPluginEnableParams struct {
	ctx     context.Context
	name    string
	options types.PluginEnableOptions
}

// CommonAPIClientMockPluginEnableResults contains results of the CommonAPIClient.PluginEnable
type CommonAPIClientMockPluginEnableResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.PluginEnable
func (mmPluginEnable *mCommonAPIClientMockPluginEnable) Expect(ctx context.Context, name string, options types.PluginEnableOptions) *mCommonAPIClientMockPluginEnable {
	if mmPluginEnable.mock.funcPluginEnable != nil {
		mmPluginEnable.mock.t.Fatalf("CommonAPIClientMock.PluginEnable mock is already set by Set")
	}

	if mmPluginEnable.defaultExpectation == nil {
		mmPluginEnable.defaultExpectation = &CommonAPIClientMockPluginEnableExpectation{}
	}

	mmPluginEnable.defaultExpectation.params = &CommonAPIClientMockPluginEnableParams{ctx, name, options}
	for _, e := range mmPluginEnable.expectations {
		if minimock.Equal(e.params, mmPluginEnable.defaultExpectation.params) {
			mmPluginEnable.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPluginEnable.defaultExpectation.params)
		}
	}

	return mmPluginEnable
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.PluginEnable
func (mmPluginEnable *mCommonAPIClientMockPluginEnable) Inspect(f func(ctx context.Context, name string, options types.PluginEnableOptions)) *mCommonAPIClientMockPluginEnable {
	if mmPluginEnable.mock.inspectFuncPluginEnable != nil {
		mmPluginEnable.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.PluginEnable")
	}

	mmPluginEnable.mock.inspectFuncPluginEnable = f

	return mmPluginEnable
}

// Return sets up results that will be returned by CommonAPIClient.PluginEnable
func (mmPluginEnable *mCommonAPIClientMockPluginEnable) Return(err error) *CommonAPIClientMock {
	if mmPluginEnable.mock.funcPluginEnable != nil {
		mmPluginEnable.mock.t.Fatalf("CommonAPIClientMock.PluginEnable mock is already set by Set")
	}

	if mmPluginEnable.defaultExpectation == nil {
		mmPluginEnable.defaultExpectation = &CommonAPIClientMockPluginEnableExpectation{mock: mmPluginEnable.mock}
	}
	mmPluginEnable.defaultExpectation.results = &CommonAPIClientMockPluginEnableResults{err}
	return mmPluginEnable.mock
}

//Set uses given function f to mock the CommonAPIClient.PluginEnable method
func (mmPluginEnable *mCommonAPIClientMockPluginEnable) Set(f func(ctx context.Context, name string, options types.PluginEnableOptions) (err error)) *CommonAPIClientMock {
	if mmPluginEnable.defaultExpectation != nil {
		mmPluginEnable.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.PluginEnable method")
	}

	if len(mmPluginEnable.expectations) > 0 {
		mmPluginEnable.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.PluginEnable method")
	}

	mmPluginEnable.mock.funcPluginEnable = f
	return mmPluginEnable.mock
}

// When sets expectation for the CommonAPIClient.PluginEnable which will trigger the result defined by the following
// Then helper
func (mmPluginEnable *mCommonAPIClientMockPluginEnable) When(ctx context.Context, name string, options types.PluginEnableOptions) *CommonAPIClientMockPluginEnableExpectation {
	if mmPluginEnable.mock.funcPluginEnable != nil {
		mmPluginEnable.mock.t.Fatalf("CommonAPIClientMock.PluginEnable mock is already set by Set")
	}

	expectation := &CommonAPIClientMockPluginEnableExpectation{
		mock:   mmPluginEnable.mock,
		params: &CommonAPIClientMockPluginEnableParams{ctx, name, options},
	}
	mmPluginEnable.expectations = append(mmPluginEnable.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.PluginEnable return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockPluginEnableExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockPluginEnableResults{err}
	return e.mock
}

// PluginEnable implements client.CommonAPIClient
func (mmPluginEnable *CommonAPIClientMock) PluginEnable(ctx context.Context, name string, options types.PluginEnableOptions) (err error) {
	mm_atomic.AddUint64(&mmPluginEnable.beforePluginEnableCounter, 1)
	defer mm_atomic.AddUint64(&mmPluginEnable.afterPluginEnableCounter, 1)

	if mmPluginEnable.inspectFuncPluginEnable != nil {
		mmPluginEnable.inspectFuncPluginEnable(ctx, name, options)
	}

	mm_params := &CommonAPIClientMockPluginEnableParams{ctx, name, options}

	// Record call args
	mmPluginEnable.PluginEnableMock.mutex.Lock()
	mmPluginEnable.PluginEnableMock.callArgs = append(mmPluginEnable.PluginEnableMock.callArgs, mm_params)
	mmPluginEnable.PluginEnableMock.mutex.Unlock()

	for _, e := range mmPluginEnable.PluginEnableMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmPluginEnable.PluginEnableMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPluginEnable.PluginEnableMock.defaultExpectation.Counter, 1)
		mm_want := mmPluginEnable.PluginEnableMock.defaultExpectation.params
		mm_got := CommonAPIClientMockPluginEnableParams{ctx, name, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPluginEnable.t.Errorf("CommonAPIClientMock.PluginEnable got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPluginEnable.PluginEnableMock.defaultExpectation.results
		if mm_results == nil {
			mmPluginEnable.t.Fatal("No results are set for the CommonAPIClientMock.PluginEnable")
		}
		return (*mm_results).err
	}
	if mmPluginEnable.funcPluginEnable != nil {
		return mmPluginEnable.funcPluginEnable(ctx, name, options)
	}
	mmPluginEnable.t.Fatalf("Unexpected call to CommonAPIClientMock.PluginEnable. %v %v %v", ctx, name, options)
	return
}

// PluginEnableAfterCounter returns a count of finished CommonAPIClientMock.PluginEnable invocations
func (mmPluginEnable *CommonAPIClientMock) PluginEnableAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPluginEnable.afterPluginEnableCounter)
}

// PluginEnableBeforeCounter returns a count of CommonAPIClientMock.PluginEnable invocations
func (mmPluginEnable *CommonAPIClientMock) PluginEnableBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPluginEnable.beforePluginEnableCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.PluginEnable.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPluginEnable *mCommonAPIClientMockPluginEnable) Calls() []*CommonAPIClientMockPluginEnableParams {
	mmPluginEnable.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockPluginEnableParams, len(mmPluginEnable.callArgs))
	copy(argCopy, mmPluginEnable.callArgs)

	mmPluginEnable.mutex.RUnlock()

	return argCopy
}

// MinimockPluginEnableDone returns true if the count of the PluginEnable invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockPluginEnableDone() bool {
	for _, e := range m.PluginEnableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PluginEnableMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPluginEnableCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPluginEnable != nil && mm_atomic.LoadUint64(&m.afterPluginEnableCounter) < 1 {
		return false
	}
	return true
}

// MinimockPluginEnableInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockPluginEnableInspect() {
	for _, e := range m.PluginEnableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.PluginEnable with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PluginEnableMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPluginEnableCounter) < 1 {
		if m.PluginEnableMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.PluginEnable")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.PluginEnable with params: %#v", *m.PluginEnableMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPluginEnable != nil && mm_atomic.LoadUint64(&m.afterPluginEnableCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.PluginEnable")
	}
}

type mCommonAPIClientMockPluginInspectWithRaw struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockPluginInspectWithRawExpectation
	expectations       []*CommonAPIClientMockPluginInspectWithRawExpectation

	callArgs []*CommonAPIClientMockPluginInspectWithRawParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockPluginInspectWithRawExpectation specifies expectation struct of the CommonAPIClient.PluginInspectWithRaw
type CommonAPIClientMockPluginInspectWithRawExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockPluginInspectWithRawParams
	results *CommonAPIClientMockPluginInspectWithRawResults
	Counter uint64
}

// CommonAPIClientMockPluginInspectWithRawParams contains parameters of the CommonAPIClient.PluginInspectWithRaw
type CommonAPIClientMockPluginInspectWithRawParams struct {
	ctx  context.Context
	name string
}

// CommonAPIClientMockPluginInspectWithRawResults contains results of the CommonAPIClient.PluginInspectWithRaw
type CommonAPIClientMockPluginInspectWithRawResults struct {
	pp1 *types.Plugin
	ba1 []byte
	err error
}

// Expect sets up expected params for CommonAPIClient.PluginInspectWithRaw
func (mmPluginInspectWithRaw *mCommonAPIClientMockPluginInspectWithRaw) Expect(ctx context.Context, name string) *mCommonAPIClientMockPluginInspectWithRaw {
	if mmPluginInspectWithRaw.mock.funcPluginInspectWithRaw != nil {
		mmPluginInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.PluginInspectWithRaw mock is already set by Set")
	}

	if mmPluginInspectWithRaw.defaultExpectation == nil {
		mmPluginInspectWithRaw.defaultExpectation = &CommonAPIClientMockPluginInspectWithRawExpectation{}
	}

	mmPluginInspectWithRaw.defaultExpectation.params = &CommonAPIClientMockPluginInspectWithRawParams{ctx, name}
	for _, e := range mmPluginInspectWithRaw.expectations {
		if minimock.Equal(e.params, mmPluginInspectWithRaw.defaultExpectation.params) {
			mmPluginInspectWithRaw.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPluginInspectWithRaw.defaultExpectation.params)
		}
	}

	return mmPluginInspectWithRaw
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.PluginInspectWithRaw
func (mmPluginInspectWithRaw *mCommonAPIClientMockPluginInspectWithRaw) Inspect(f func(ctx context.Context, name string)) *mCommonAPIClientMockPluginInspectWithRaw {
	if mmPluginInspectWithRaw.mock.inspectFuncPluginInspectWithRaw != nil {
		mmPluginInspectWithRaw.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.PluginInspectWithRaw")
	}

	mmPluginInspectWithRaw.mock.inspectFuncPluginInspectWithRaw = f

	return mmPluginInspectWithRaw
}

// Return sets up results that will be returned by CommonAPIClient.PluginInspectWithRaw
func (mmPluginInspectWithRaw *mCommonAPIClientMockPluginInspectWithRaw) Return(pp1 *types.Plugin, ba1 []byte, err error) *CommonAPIClientMock {
	if mmPluginInspectWithRaw.mock.funcPluginInspectWithRaw != nil {
		mmPluginInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.PluginInspectWithRaw mock is already set by Set")
	}

	if mmPluginInspectWithRaw.defaultExpectation == nil {
		mmPluginInspectWithRaw.defaultExpectation = &CommonAPIClientMockPluginInspectWithRawExpectation{mock: mmPluginInspectWithRaw.mock}
	}
	mmPluginInspectWithRaw.defaultExpectation.results = &CommonAPIClientMockPluginInspectWithRawResults{pp1, ba1, err}
	return mmPluginInspectWithRaw.mock
}

//Set uses given function f to mock the CommonAPIClient.PluginInspectWithRaw method
func (mmPluginInspectWithRaw *mCommonAPIClientMockPluginInspectWithRaw) Set(f func(ctx context.Context, name string) (pp1 *types.Plugin, ba1 []byte, err error)) *CommonAPIClientMock {
	if mmPluginInspectWithRaw.defaultExpectation != nil {
		mmPluginInspectWithRaw.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.PluginInspectWithRaw method")
	}

	if len(mmPluginInspectWithRaw.expectations) > 0 {
		mmPluginInspectWithRaw.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.PluginInspectWithRaw method")
	}

	mmPluginInspectWithRaw.mock.funcPluginInspectWithRaw = f
	return mmPluginInspectWithRaw.mock
}

// When sets expectation for the CommonAPIClient.PluginInspectWithRaw which will trigger the result defined by the following
// Then helper
func (mmPluginInspectWithRaw *mCommonAPIClientMockPluginInspectWithRaw) When(ctx context.Context, name string) *CommonAPIClientMockPluginInspectWithRawExpectation {
	if mmPluginInspectWithRaw.mock.funcPluginInspectWithRaw != nil {
		mmPluginInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.PluginInspectWithRaw mock is already set by Set")
	}

	expectation := &CommonAPIClientMockPluginInspectWithRawExpectation{
		mock:   mmPluginInspectWithRaw.mock,
		params: &CommonAPIClientMockPluginInspectWithRawParams{ctx, name},
	}
	mmPluginInspectWithRaw.expectations = append(mmPluginInspectWithRaw.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.PluginInspectWithRaw return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockPluginInspectWithRawExpectation) Then(pp1 *types.Plugin, ba1 []byte, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockPluginInspectWithRawResults{pp1, ba1, err}
	return e.mock
}

// PluginInspectWithRaw implements client.CommonAPIClient
func (mmPluginInspectWithRaw *CommonAPIClientMock) PluginInspectWithRaw(ctx context.Context, name string) (pp1 *types.Plugin, ba1 []byte, err error) {
	mm_atomic.AddUint64(&mmPluginInspectWithRaw.beforePluginInspectWithRawCounter, 1)
	defer mm_atomic.AddUint64(&mmPluginInspectWithRaw.afterPluginInspectWithRawCounter, 1)

	if mmPluginInspectWithRaw.inspectFuncPluginInspectWithRaw != nil {
		mmPluginInspectWithRaw.inspectFuncPluginInspectWithRaw(ctx, name)
	}

	mm_params := &CommonAPIClientMockPluginInspectWithRawParams{ctx, name}

	// Record call args
	mmPluginInspectWithRaw.PluginInspectWithRawMock.mutex.Lock()
	mmPluginInspectWithRaw.PluginInspectWithRawMock.callArgs = append(mmPluginInspectWithRaw.PluginInspectWithRawMock.callArgs, mm_params)
	mmPluginInspectWithRaw.PluginInspectWithRawMock.mutex.Unlock()

	for _, e := range mmPluginInspectWithRaw.PluginInspectWithRawMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp1, e.results.ba1, e.results.err
		}
	}

	if mmPluginInspectWithRaw.PluginInspectWithRawMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPluginInspectWithRaw.PluginInspectWithRawMock.defaultExpectation.Counter, 1)
		mm_want := mmPluginInspectWithRaw.PluginInspectWithRawMock.defaultExpectation.params
		mm_got := CommonAPIClientMockPluginInspectWithRawParams{ctx, name}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPluginInspectWithRaw.t.Errorf("CommonAPIClientMock.PluginInspectWithRaw got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPluginInspectWithRaw.PluginInspectWithRawMock.defaultExpectation.results
		if mm_results == nil {
			mmPluginInspectWithRaw.t.Fatal("No results are set for the CommonAPIClientMock.PluginInspectWithRaw")
		}
		return (*mm_results).pp1, (*mm_results).ba1, (*mm_results).err
	}
	if mmPluginInspectWithRaw.funcPluginInspectWithRaw != nil {
		return mmPluginInspectWithRaw.funcPluginInspectWithRaw(ctx, name)
	}
	mmPluginInspectWithRaw.t.Fatalf("Unexpected call to CommonAPIClientMock.PluginInspectWithRaw. %v %v", ctx, name)
	return
}

// PluginInspectWithRawAfterCounter returns a count of finished CommonAPIClientMock.PluginInspectWithRaw invocations
func (mmPluginInspectWithRaw *CommonAPIClientMock) PluginInspectWithRawAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPluginInspectWithRaw.afterPluginInspectWithRawCounter)
}

// PluginInspectWithRawBeforeCounter returns a count of CommonAPIClientMock.PluginInspectWithRaw invocations
func (mmPluginInspectWithRaw *CommonAPIClientMock) PluginInspectWithRawBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPluginInspectWithRaw.beforePluginInspectWithRawCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.PluginInspectWithRaw.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPluginInspectWithRaw *mCommonAPIClientMockPluginInspectWithRaw) Calls() []*CommonAPIClientMockPluginInspectWithRawParams {
	mmPluginInspectWithRaw.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockPluginInspectWithRawParams, len(mmPluginInspectWithRaw.callArgs))
	copy(argCopy, mmPluginInspectWithRaw.callArgs)

	mmPluginInspectWithRaw.mutex.RUnlock()

	return argCopy
}

// MinimockPluginInspectWithRawDone returns true if the count of the PluginInspectWithRaw invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockPluginInspectWithRawDone() bool {
	for _, e := range m.PluginInspectWithRawMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PluginInspectWithRawMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPluginInspectWithRawCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPluginInspectWithRaw != nil && mm_atomic.LoadUint64(&m.afterPluginInspectWithRawCounter) < 1 {
		return false
	}
	return true
}

// MinimockPluginInspectWithRawInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockPluginInspectWithRawInspect() {
	for _, e := range m.PluginInspectWithRawMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.PluginInspectWithRaw with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PluginInspectWithRawMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPluginInspectWithRawCounter) < 1 {
		if m.PluginInspectWithRawMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.PluginInspectWithRaw")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.PluginInspectWithRaw with params: %#v", *m.PluginInspectWithRawMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPluginInspectWithRaw != nil && mm_atomic.LoadUint64(&m.afterPluginInspectWithRawCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.PluginInspectWithRaw")
	}
}

type mCommonAPIClientMockPluginInstall struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockPluginInstallExpectation
	expectations       []*CommonAPIClientMockPluginInstallExpectation

	callArgs []*CommonAPIClientMockPluginInstallParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockPluginInstallExpectation specifies expectation struct of the CommonAPIClient.PluginInstall
type CommonAPIClientMockPluginInstallExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockPluginInstallParams
	results *CommonAPIClientMockPluginInstallResults
	Counter uint64
}

// CommonAPIClientMockPluginInstallParams contains parameters of the CommonAPIClient.PluginInstall
type CommonAPIClientMockPluginInstallParams struct {
	ctx     context.Context
	name    string
	options types.PluginInstallOptions
}

// CommonAPIClientMockPluginInstallResults contains results of the CommonAPIClient.PluginInstall
type CommonAPIClientMockPluginInstallResults struct {
	r1  io.ReadCloser
	err error
}

// Expect sets up expected params for CommonAPIClient.PluginInstall
func (mmPluginInstall *mCommonAPIClientMockPluginInstall) Expect(ctx context.Context, name string, options types.PluginInstallOptions) *mCommonAPIClientMockPluginInstall {
	if mmPluginInstall.mock.funcPluginInstall != nil {
		mmPluginInstall.mock.t.Fatalf("CommonAPIClientMock.PluginInstall mock is already set by Set")
	}

	if mmPluginInstall.defaultExpectation == nil {
		mmPluginInstall.defaultExpectation = &CommonAPIClientMockPluginInstallExpectation{}
	}

	mmPluginInstall.defaultExpectation.params = &CommonAPIClientMockPluginInstallParams{ctx, name, options}
	for _, e := range mmPluginInstall.expectations {
		if minimock.Equal(e.params, mmPluginInstall.defaultExpectation.params) {
			mmPluginInstall.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPluginInstall.defaultExpectation.params)
		}
	}

	return mmPluginInstall
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.PluginInstall
func (mmPluginInstall *mCommonAPIClientMockPluginInstall) Inspect(f func(ctx context.Context, name string, options types.PluginInstallOptions)) *mCommonAPIClientMockPluginInstall {
	if mmPluginInstall.mock.inspectFuncPluginInstall != nil {
		mmPluginInstall.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.PluginInstall")
	}

	mmPluginInstall.mock.inspectFuncPluginInstall = f

	return mmPluginInstall
}

// Return sets up results that will be returned by CommonAPIClient.PluginInstall
func (mmPluginInstall *mCommonAPIClientMockPluginInstall) Return(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	if mmPluginInstall.mock.funcPluginInstall != nil {
		mmPluginInstall.mock.t.Fatalf("CommonAPIClientMock.PluginInstall mock is already set by Set")
	}

	if mmPluginInstall.defaultExpectation == nil {
		mmPluginInstall.defaultExpectation = &CommonAPIClientMockPluginInstallExpectation{mock: mmPluginInstall.mock}
	}
	mmPluginInstall.defaultExpectation.results = &CommonAPIClientMockPluginInstallResults{r1, err}
	return mmPluginInstall.mock
}

//Set uses given function f to mock the CommonAPIClient.PluginInstall method
func (mmPluginInstall *mCommonAPIClientMockPluginInstall) Set(f func(ctx context.Context, name string, options types.PluginInstallOptions) (r1 io.ReadCloser, err error)) *CommonAPIClientMock {
	if mmPluginInstall.defaultExpectation != nil {
		mmPluginInstall.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.PluginInstall method")
	}

	if len(mmPluginInstall.expectations) > 0 {
		mmPluginInstall.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.PluginInstall method")
	}

	mmPluginInstall.mock.funcPluginInstall = f
	return mmPluginInstall.mock
}

// When sets expectation for the CommonAPIClient.PluginInstall which will trigger the result defined by the following
// Then helper
func (mmPluginInstall *mCommonAPIClientMockPluginInstall) When(ctx context.Context, name string, options types.PluginInstallOptions) *CommonAPIClientMockPluginInstallExpectation {
	if mmPluginInstall.mock.funcPluginInstall != nil {
		mmPluginInstall.mock.t.Fatalf("CommonAPIClientMock.PluginInstall mock is already set by Set")
	}

	expectation := &CommonAPIClientMockPluginInstallExpectation{
		mock:   mmPluginInstall.mock,
		params: &CommonAPIClientMockPluginInstallParams{ctx, name, options},
	}
	mmPluginInstall.expectations = append(mmPluginInstall.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.PluginInstall return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockPluginInstallExpectation) Then(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockPluginInstallResults{r1, err}
	return e.mock
}

// PluginInstall implements client.CommonAPIClient
func (mmPluginInstall *CommonAPIClientMock) PluginInstall(ctx context.Context, name string, options types.PluginInstallOptions) (r1 io.ReadCloser, err error) {
	mm_atomic.AddUint64(&mmPluginInstall.beforePluginInstallCounter, 1)
	defer mm_atomic.AddUint64(&mmPluginInstall.afterPluginInstallCounter, 1)

	if mmPluginInstall.inspectFuncPluginInstall != nil {
		mmPluginInstall.inspectFuncPluginInstall(ctx, name, options)
	}

	mm_params := &CommonAPIClientMockPluginInstallParams{ctx, name, options}

	// Record call args
	mmPluginInstall.PluginInstallMock.mutex.Lock()
	mmPluginInstall.PluginInstallMock.callArgs = append(mmPluginInstall.PluginInstallMock.callArgs, mm_params)
	mmPluginInstall.PluginInstallMock.mutex.Unlock()

	for _, e := range mmPluginInstall.PluginInstallMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmPluginInstall.PluginInstallMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPluginInstall.PluginInstallMock.defaultExpectation.Counter, 1)
		mm_want := mmPluginInstall.PluginInstallMock.defaultExpectation.params
		mm_got := CommonAPIClientMockPluginInstallParams{ctx, name, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPluginInstall.t.Errorf("CommonAPIClientMock.PluginInstall got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPluginInstall.PluginInstallMock.defaultExpectation.results
		if mm_results == nil {
			mmPluginInstall.t.Fatal("No results are set for the CommonAPIClientMock.PluginInstall")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmPluginInstall.funcPluginInstall != nil {
		return mmPluginInstall.funcPluginInstall(ctx, name, options)
	}
	mmPluginInstall.t.Fatalf("Unexpected call to CommonAPIClientMock.PluginInstall. %v %v %v", ctx, name, options)
	return
}

// PluginInstallAfterCounter returns a count of finished CommonAPIClientMock.PluginInstall invocations
func (mmPluginInstall *CommonAPIClientMock) PluginInstallAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPluginInstall.afterPluginInstallCounter)
}

// PluginInstallBeforeCounter returns a count of CommonAPIClientMock.PluginInstall invocations
func (mmPluginInstall *CommonAPIClientMock) PluginInstallBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPluginInstall.beforePluginInstallCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.PluginInstall.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPluginInstall *mCommonAPIClientMockPluginInstall) Calls() []*CommonAPIClientMockPluginInstallParams {
	mmPluginInstall.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockPluginInstallParams, len(mmPluginInstall.callArgs))
	copy(argCopy, mmPluginInstall.callArgs)

	mmPluginInstall.mutex.RUnlock()

	return argCopy
}

// MinimockPluginInstallDone returns true if the count of the PluginInstall invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockPluginInstallDone() bool {
	for _, e := range m.PluginInstallMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PluginInstallMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPluginInstallCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPluginInstall != nil && mm_atomic.LoadUint64(&m.afterPluginInstallCounter) < 1 {
		return false
	}
	return true
}

// MinimockPluginInstallInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockPluginInstallInspect() {
	for _, e := range m.PluginInstallMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.PluginInstall with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PluginInstallMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPluginInstallCounter) < 1 {
		if m.PluginInstallMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.PluginInstall")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.PluginInstall with params: %#v", *m.PluginInstallMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPluginInstall != nil && mm_atomic.LoadUint64(&m.afterPluginInstallCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.PluginInstall")
	}
}

type mCommonAPIClientMockPluginList struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockPluginListExpectation
	expectations       []*CommonAPIClientMockPluginListExpectation

	callArgs []*CommonAPIClientMockPluginListParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockPluginListExpectation specifies expectation struct of the CommonAPIClient.PluginList
type CommonAPIClientMockPluginListExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockPluginListParams
	results *CommonAPIClientMockPluginListResults
	Counter uint64
}

// CommonAPIClientMockPluginListParams contains parameters of the CommonAPIClient.PluginList
type CommonAPIClientMockPluginListParams struct {
	ctx    context.Context
	filter filters.Args
}

// CommonAPIClientMockPluginListResults contains results of the CommonAPIClient.PluginList
type CommonAPIClientMockPluginListResults struct {
	p1  types.PluginsListResponse
	err error
}

// Expect sets up expected params for CommonAPIClient.PluginList
func (mmPluginList *mCommonAPIClientMockPluginList) Expect(ctx context.Context, filter filters.Args) *mCommonAPIClientMockPluginList {
	if mmPluginList.mock.funcPluginList != nil {
		mmPluginList.mock.t.Fatalf("CommonAPIClientMock.PluginList mock is already set by Set")
	}

	if mmPluginList.defaultExpectation == nil {
		mmPluginList.defaultExpectation = &CommonAPIClientMockPluginListExpectation{}
	}

	mmPluginList.defaultExpectation.params = &CommonAPIClientMockPluginListParams{ctx, filter}
	for _, e := range mmPluginList.expectations {
		if minimock.Equal(e.params, mmPluginList.defaultExpectation.params) {
			mmPluginList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPluginList.defaultExpectation.params)
		}
	}

	return mmPluginList
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.PluginList
func (mmPluginList *mCommonAPIClientMockPluginList) Inspect(f func(ctx context.Context, filter filters.Args)) *mCommonAPIClientMockPluginList {
	if mmPluginList.mock.inspectFuncPluginList != nil {
		mmPluginList.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.PluginList")
	}

	mmPluginList.mock.inspectFuncPluginList = f

	return mmPluginList
}

// Return sets up results that will be returned by CommonAPIClient.PluginList
func (mmPluginList *mCommonAPIClientMockPluginList) Return(p1 types.PluginsListResponse, err error) *CommonAPIClientMock {
	if mmPluginList.mock.funcPluginList != nil {
		mmPluginList.mock.t.Fatalf("CommonAPIClientMock.PluginList mock is already set by Set")
	}

	if mmPluginList.defaultExpectation == nil {
		mmPluginList.defaultExpectation = &CommonAPIClientMockPluginListExpectation{mock: mmPluginList.mock}
	}
	mmPluginList.defaultExpectation.results = &CommonAPIClientMockPluginListResults{p1, err}
	return mmPluginList.mock
}

//Set uses given function f to mock the CommonAPIClient.PluginList method
func (mmPluginList *mCommonAPIClientMockPluginList) Set(f func(ctx context.Context, filter filters.Args) (p1 types.PluginsListResponse, err error)) *CommonAPIClientMock {
	if mmPluginList.defaultExpectation != nil {
		mmPluginList.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.PluginList method")
	}

	if len(mmPluginList.expectations) > 0 {
		mmPluginList.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.PluginList method")
	}

	mmPluginList.mock.funcPluginList = f
	return mmPluginList.mock
}

// When sets expectation for the CommonAPIClient.PluginList which will trigger the result defined by the following
// Then helper
func (mmPluginList *mCommonAPIClientMockPluginList) When(ctx context.Context, filter filters.Args) *CommonAPIClientMockPluginListExpectation {
	if mmPluginList.mock.funcPluginList != nil {
		mmPluginList.mock.t.Fatalf("CommonAPIClientMock.PluginList mock is already set by Set")
	}

	expectation := &CommonAPIClientMockPluginListExpectation{
		mock:   mmPluginList.mock,
		params: &CommonAPIClientMockPluginListParams{ctx, filter},
	}
	mmPluginList.expectations = append(mmPluginList.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.PluginList return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockPluginListExpectation) Then(p1 types.PluginsListResponse, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockPluginListResults{p1, err}
	return e.mock
}

// PluginList implements client.CommonAPIClient
func (mmPluginList *CommonAPIClientMock) PluginList(ctx context.Context, filter filters.Args) (p1 types.PluginsListResponse, err error) {
	mm_atomic.AddUint64(&mmPluginList.beforePluginListCounter, 1)
	defer mm_atomic.AddUint64(&mmPluginList.afterPluginListCounter, 1)

	if mmPluginList.inspectFuncPluginList != nil {
		mmPluginList.inspectFuncPluginList(ctx, filter)
	}

	mm_params := &CommonAPIClientMockPluginListParams{ctx, filter}

	// Record call args
	mmPluginList.PluginListMock.mutex.Lock()
	mmPluginList.PluginListMock.callArgs = append(mmPluginList.PluginListMock.callArgs, mm_params)
	mmPluginList.PluginListMock.mutex.Unlock()

	for _, e := range mmPluginList.PluginListMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.p1, e.results.err
		}
	}

	if mmPluginList.PluginListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPluginList.PluginListMock.defaultExpectation.Counter, 1)
		mm_want := mmPluginList.PluginListMock.defaultExpectation.params
		mm_got := CommonAPIClientMockPluginListParams{ctx, filter}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPluginList.t.Errorf("CommonAPIClientMock.PluginList got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPluginList.PluginListMock.defaultExpectation.results
		if mm_results == nil {
			mmPluginList.t.Fatal("No results are set for the CommonAPIClientMock.PluginList")
		}
		return (*mm_results).p1, (*mm_results).err
	}
	if mmPluginList.funcPluginList != nil {
		return mmPluginList.funcPluginList(ctx, filter)
	}
	mmPluginList.t.Fatalf("Unexpected call to CommonAPIClientMock.PluginList. %v %v", ctx, filter)
	return
}

// PluginListAfterCounter returns a count of finished CommonAPIClientMock.PluginList invocations
func (mmPluginList *CommonAPIClientMock) PluginListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPluginList.afterPluginListCounter)
}

// PluginListBeforeCounter returns a count of CommonAPIClientMock.PluginList invocations
func (mmPluginList *CommonAPIClientMock) PluginListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPluginList.beforePluginListCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.PluginList.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPluginList *mCommonAPIClientMockPluginList) Calls() []*CommonAPIClientMockPluginListParams {
	mmPluginList.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockPluginListParams, len(mmPluginList.callArgs))
	copy(argCopy, mmPluginList.callArgs)

	mmPluginList.mutex.RUnlock()

	return argCopy
}

// MinimockPluginListDone returns true if the count of the PluginList invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockPluginListDone() bool {
	for _, e := range m.PluginListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PluginListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPluginListCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPluginList != nil && mm_atomic.LoadUint64(&m.afterPluginListCounter) < 1 {
		return false
	}
	return true
}

// MinimockPluginListInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockPluginListInspect() {
	for _, e := range m.PluginListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.PluginList with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PluginListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPluginListCounter) < 1 {
		if m.PluginListMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.PluginList")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.PluginList with params: %#v", *m.PluginListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPluginList != nil && mm_atomic.LoadUint64(&m.afterPluginListCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.PluginList")
	}
}

type mCommonAPIClientMockPluginPush struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockPluginPushExpectation
	expectations       []*CommonAPIClientMockPluginPushExpectation

	callArgs []*CommonAPIClientMockPluginPushParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockPluginPushExpectation specifies expectation struct of the CommonAPIClient.PluginPush
type CommonAPIClientMockPluginPushExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockPluginPushParams
	results *CommonAPIClientMockPluginPushResults
	Counter uint64
}

// CommonAPIClientMockPluginPushParams contains parameters of the CommonAPIClient.PluginPush
type CommonAPIClientMockPluginPushParams struct {
	ctx          context.Context
	name         string
	registryAuth string
}

// CommonAPIClientMockPluginPushResults contains results of the CommonAPIClient.PluginPush
type CommonAPIClientMockPluginPushResults struct {
	r1  io.ReadCloser
	err error
}

// Expect sets up expected params for CommonAPIClient.PluginPush
func (mmPluginPush *mCommonAPIClientMockPluginPush) Expect(ctx context.Context, name string, registryAuth string) *mCommonAPIClientMockPluginPush {
	if mmPluginPush.mock.funcPluginPush != nil {
		mmPluginPush.mock.t.Fatalf("CommonAPIClientMock.PluginPush mock is already set by Set")
	}

	if mmPluginPush.defaultExpectation == nil {
		mmPluginPush.defaultExpectation = &CommonAPIClientMockPluginPushExpectation{}
	}

	mmPluginPush.defaultExpectation.params = &CommonAPIClientMockPluginPushParams{ctx, name, registryAuth}
	for _, e := range mmPluginPush.expectations {
		if minimock.Equal(e.params, mmPluginPush.defaultExpectation.params) {
			mmPluginPush.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPluginPush.defaultExpectation.params)
		}
	}

	return mmPluginPush
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.PluginPush
func (mmPluginPush *mCommonAPIClientMockPluginPush) Inspect(f func(ctx context.Context, name string, registryAuth string)) *mCommonAPIClientMockPluginPush {
	if mmPluginPush.mock.inspectFuncPluginPush != nil {
		mmPluginPush.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.PluginPush")
	}

	mmPluginPush.mock.inspectFuncPluginPush = f

	return mmPluginPush
}

// Return sets up results that will be returned by CommonAPIClient.PluginPush
func (mmPluginPush *mCommonAPIClientMockPluginPush) Return(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	if mmPluginPush.mock.funcPluginPush != nil {
		mmPluginPush.mock.t.Fatalf("CommonAPIClientMock.PluginPush mock is already set by Set")
	}

	if mmPluginPush.defaultExpectation == nil {
		mmPluginPush.defaultExpectation = &CommonAPIClientMockPluginPushExpectation{mock: mmPluginPush.mock}
	}
	mmPluginPush.defaultExpectation.results = &CommonAPIClientMockPluginPushResults{r1, err}
	return mmPluginPush.mock
}

//Set uses given function f to mock the CommonAPIClient.PluginPush method
func (mmPluginPush *mCommonAPIClientMockPluginPush) Set(f func(ctx context.Context, name string, registryAuth string) (r1 io.ReadCloser, err error)) *CommonAPIClientMock {
	if mmPluginPush.defaultExpectation != nil {
		mmPluginPush.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.PluginPush method")
	}

	if len(mmPluginPush.expectations) > 0 {
		mmPluginPush.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.PluginPush method")
	}

	mmPluginPush.mock.funcPluginPush = f
	return mmPluginPush.mock
}

// When sets expectation for the CommonAPIClient.PluginPush which will trigger the result defined by the following
// Then helper
func (mmPluginPush *mCommonAPIClientMockPluginPush) When(ctx context.Context, name string, registryAuth string) *CommonAPIClientMockPluginPushExpectation {
	if mmPluginPush.mock.funcPluginPush != nil {
		mmPluginPush.mock.t.Fatalf("CommonAPIClientMock.PluginPush mock is already set by Set")
	}

	expectation := &CommonAPIClientMockPluginPushExpectation{
		mock:   mmPluginPush.mock,
		params: &CommonAPIClientMockPluginPushParams{ctx, name, registryAuth},
	}
	mmPluginPush.expectations = append(mmPluginPush.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.PluginPush return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockPluginPushExpectation) Then(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockPluginPushResults{r1, err}
	return e.mock
}

// PluginPush implements client.CommonAPIClient
func (mmPluginPush *CommonAPIClientMock) PluginPush(ctx context.Context, name string, registryAuth string) (r1 io.ReadCloser, err error) {
	mm_atomic.AddUint64(&mmPluginPush.beforePluginPushCounter, 1)
	defer mm_atomic.AddUint64(&mmPluginPush.afterPluginPushCounter, 1)

	if mmPluginPush.inspectFuncPluginPush != nil {
		mmPluginPush.inspectFuncPluginPush(ctx, name, registryAuth)
	}

	mm_params := &CommonAPIClientMockPluginPushParams{ctx, name, registryAuth}

	// Record call args
	mmPluginPush.PluginPushMock.mutex.Lock()
	mmPluginPush.PluginPushMock.callArgs = append(mmPluginPush.PluginPushMock.callArgs, mm_params)
	mmPluginPush.PluginPushMock.mutex.Unlock()

	for _, e := range mmPluginPush.PluginPushMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmPluginPush.PluginPushMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPluginPush.PluginPushMock.defaultExpectation.Counter, 1)
		mm_want := mmPluginPush.PluginPushMock.defaultExpectation.params
		mm_got := CommonAPIClientMockPluginPushParams{ctx, name, registryAuth}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPluginPush.t.Errorf("CommonAPIClientMock.PluginPush got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPluginPush.PluginPushMock.defaultExpectation.results
		if mm_results == nil {
			mmPluginPush.t.Fatal("No results are set for the CommonAPIClientMock.PluginPush")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmPluginPush.funcPluginPush != nil {
		return mmPluginPush.funcPluginPush(ctx, name, registryAuth)
	}
	mmPluginPush.t.Fatalf("Unexpected call to CommonAPIClientMock.PluginPush. %v %v %v", ctx, name, registryAuth)
	return
}

// PluginPushAfterCounter returns a count of finished CommonAPIClientMock.PluginPush invocations
func (mmPluginPush *CommonAPIClientMock) PluginPushAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPluginPush.afterPluginPushCounter)
}

// PluginPushBeforeCounter returns a count of CommonAPIClientMock.PluginPush invocations
func (mmPluginPush *CommonAPIClientMock) PluginPushBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPluginPush.beforePluginPushCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.PluginPush.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPluginPush *mCommonAPIClientMockPluginPush) Calls() []*CommonAPIClientMockPluginPushParams {
	mmPluginPush.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockPluginPushParams, len(mmPluginPush.callArgs))
	copy(argCopy, mmPluginPush.callArgs)

	mmPluginPush.mutex.RUnlock()

	return argCopy
}

// MinimockPluginPushDone returns true if the count of the PluginPush invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockPluginPushDone() bool {
	for _, e := range m.PluginPushMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PluginPushMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPluginPushCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPluginPush != nil && mm_atomic.LoadUint64(&m.afterPluginPushCounter) < 1 {
		return false
	}
	return true
}

// MinimockPluginPushInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockPluginPushInspect() {
	for _, e := range m.PluginPushMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.PluginPush with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PluginPushMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPluginPushCounter) < 1 {
		if m.PluginPushMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.PluginPush")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.PluginPush with params: %#v", *m.PluginPushMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPluginPush != nil && mm_atomic.LoadUint64(&m.afterPluginPushCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.PluginPush")
	}
}

type mCommonAPIClientMockPluginRemove struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockPluginRemoveExpectation
	expectations       []*CommonAPIClientMockPluginRemoveExpectation

	callArgs []*CommonAPIClientMockPluginRemoveParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockPluginRemoveExpectation specifies expectation struct of the CommonAPIClient.PluginRemove
type CommonAPIClientMockPluginRemoveExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockPluginRemoveParams
	results *CommonAPIClientMockPluginRemoveResults
	Counter uint64
}

// CommonAPIClientMockPluginRemoveParams contains parameters of the CommonAPIClient.PluginRemove
type CommonAPIClientMockPluginRemoveParams struct {
	ctx     context.Context
	name    string
	options types.PluginRemoveOptions
}

// CommonAPIClientMockPluginRemoveResults contains results of the CommonAPIClient.PluginRemove
type CommonAPIClientMockPluginRemoveResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.PluginRemove
func (mmPluginRemove *mCommonAPIClientMockPluginRemove) Expect(ctx context.Context, name string, options types.PluginRemoveOptions) *mCommonAPIClientMockPluginRemove {
	if mmPluginRemove.mock.funcPluginRemove != nil {
		mmPluginRemove.mock.t.Fatalf("CommonAPIClientMock.PluginRemove mock is already set by Set")
	}

	if mmPluginRemove.defaultExpectation == nil {
		mmPluginRemove.defaultExpectation = &CommonAPIClientMockPluginRemoveExpectation{}
	}

	mmPluginRemove.defaultExpectation.params = &CommonAPIClientMockPluginRemoveParams{ctx, name, options}
	for _, e := range mmPluginRemove.expectations {
		if minimock.Equal(e.params, mmPluginRemove.defaultExpectation.params) {
			mmPluginRemove.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPluginRemove.defaultExpectation.params)
		}
	}

	return mmPluginRemove
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.PluginRemove
func (mmPluginRemove *mCommonAPIClientMockPluginRemove) Inspect(f func(ctx context.Context, name string, options types.PluginRemoveOptions)) *mCommonAPIClientMockPluginRemove {
	if mmPluginRemove.mock.inspectFuncPluginRemove != nil {
		mmPluginRemove.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.PluginRemove")
	}

	mmPluginRemove.mock.inspectFuncPluginRemove = f

	return mmPluginRemove
}

// Return sets up results that will be returned by CommonAPIClient.PluginRemove
func (mmPluginRemove *mCommonAPIClientMockPluginRemove) Return(err error) *CommonAPIClientMock {
	if mmPluginRemove.mock.funcPluginRemove != nil {
		mmPluginRemove.mock.t.Fatalf("CommonAPIClientMock.PluginRemove mock is already set by Set")
	}

	if mmPluginRemove.defaultExpectation == nil {
		mmPluginRemove.defaultExpectation = &CommonAPIClientMockPluginRemoveExpectation{mock: mmPluginRemove.mock}
	}
	mmPluginRemove.defaultExpectation.results = &CommonAPIClientMockPluginRemoveResults{err}
	return mmPluginRemove.mock
}

//Set uses given function f to mock the CommonAPIClient.PluginRemove method
func (mmPluginRemove *mCommonAPIClientMockPluginRemove) Set(f func(ctx context.Context, name string, options types.PluginRemoveOptions) (err error)) *CommonAPIClientMock {
	if mmPluginRemove.defaultExpectation != nil {
		mmPluginRemove.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.PluginRemove method")
	}

	if len(mmPluginRemove.expectations) > 0 {
		mmPluginRemove.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.PluginRemove method")
	}

	mmPluginRemove.mock.funcPluginRemove = f
	return mmPluginRemove.mock
}

// When sets expectation for the CommonAPIClient.PluginRemove which will trigger the result defined by the following
// Then helper
func (mmPluginRemove *mCommonAPIClientMockPluginRemove) When(ctx context.Context, name string, options types.PluginRemoveOptions) *CommonAPIClientMockPluginRemoveExpectation {
	if mmPluginRemove.mock.funcPluginRemove != nil {
		mmPluginRemove.mock.t.Fatalf("CommonAPIClientMock.PluginRemove mock is already set by Set")
	}

	expectation := &CommonAPIClientMockPluginRemoveExpectation{
		mock:   mmPluginRemove.mock,
		params: &CommonAPIClientMockPluginRemoveParams{ctx, name, options},
	}
	mmPluginRemove.expectations = append(mmPluginRemove.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.PluginRemove return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockPluginRemoveExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockPluginRemoveResults{err}
	return e.mock
}

// PluginRemove implements client.CommonAPIClient
func (mmPluginRemove *CommonAPIClientMock) PluginRemove(ctx context.Context, name string, options types.PluginRemoveOptions) (err error) {
	mm_atomic.AddUint64(&mmPluginRemove.beforePluginRemoveCounter, 1)
	defer mm_atomic.AddUint64(&mmPluginRemove.afterPluginRemoveCounter, 1)

	if mmPluginRemove.inspectFuncPluginRemove != nil {
		mmPluginRemove.inspectFuncPluginRemove(ctx, name, options)
	}

	mm_params := &CommonAPIClientMockPluginRemoveParams{ctx, name, options}

	// Record call args
	mmPluginRemove.PluginRemoveMock.mutex.Lock()
	mmPluginRemove.PluginRemoveMock.callArgs = append(mmPluginRemove.PluginRemoveMock.callArgs, mm_params)
	mmPluginRemove.PluginRemoveMock.mutex.Unlock()

	for _, e := range mmPluginRemove.PluginRemoveMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmPluginRemove.PluginRemoveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPluginRemove.PluginRemoveMock.defaultExpectation.Counter, 1)
		mm_want := mmPluginRemove.PluginRemoveMock.defaultExpectation.params
		mm_got := CommonAPIClientMockPluginRemoveParams{ctx, name, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPluginRemove.t.Errorf("CommonAPIClientMock.PluginRemove got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPluginRemove.PluginRemoveMock.defaultExpectation.results
		if mm_results == nil {
			mmPluginRemove.t.Fatal("No results are set for the CommonAPIClientMock.PluginRemove")
		}
		return (*mm_results).err
	}
	if mmPluginRemove.funcPluginRemove != nil {
		return mmPluginRemove.funcPluginRemove(ctx, name, options)
	}
	mmPluginRemove.t.Fatalf("Unexpected call to CommonAPIClientMock.PluginRemove. %v %v %v", ctx, name, options)
	return
}

// PluginRemoveAfterCounter returns a count of finished CommonAPIClientMock.PluginRemove invocations
func (mmPluginRemove *CommonAPIClientMock) PluginRemoveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPluginRemove.afterPluginRemoveCounter)
}

// PluginRemoveBeforeCounter returns a count of CommonAPIClientMock.PluginRemove invocations
func (mmPluginRemove *CommonAPIClientMock) PluginRemoveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPluginRemove.beforePluginRemoveCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.PluginRemove.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPluginRemove *mCommonAPIClientMockPluginRemove) Calls() []*CommonAPIClientMockPluginRemoveParams {
	mmPluginRemove.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockPluginRemoveParams, len(mmPluginRemove.callArgs))
	copy(argCopy, mmPluginRemove.callArgs)

	mmPluginRemove.mutex.RUnlock()

	return argCopy
}

// MinimockPluginRemoveDone returns true if the count of the PluginRemove invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockPluginRemoveDone() bool {
	for _, e := range m.PluginRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PluginRemoveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPluginRemoveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPluginRemove != nil && mm_atomic.LoadUint64(&m.afterPluginRemoveCounter) < 1 {
		return false
	}
	return true
}

// MinimockPluginRemoveInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockPluginRemoveInspect() {
	for _, e := range m.PluginRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.PluginRemove with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PluginRemoveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPluginRemoveCounter) < 1 {
		if m.PluginRemoveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.PluginRemove")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.PluginRemove with params: %#v", *m.PluginRemoveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPluginRemove != nil && mm_atomic.LoadUint64(&m.afterPluginRemoveCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.PluginRemove")
	}
}

type mCommonAPIClientMockPluginSet struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockPluginSetExpectation
	expectations       []*CommonAPIClientMockPluginSetExpectation

	callArgs []*CommonAPIClientMockPluginSetParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockPluginSetExpectation specifies expectation struct of the CommonAPIClient.PluginSet
type CommonAPIClientMockPluginSetExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockPluginSetParams
	results *CommonAPIClientMockPluginSetResults
	Counter uint64
}

// CommonAPIClientMockPluginSetParams contains parameters of the CommonAPIClient.PluginSet
type CommonAPIClientMockPluginSetParams struct {
	ctx  context.Context
	name string
	args []string
}

// CommonAPIClientMockPluginSetResults contains results of the CommonAPIClient.PluginSet
type CommonAPIClientMockPluginSetResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.PluginSet
func (mmPluginSet *mCommonAPIClientMockPluginSet) Expect(ctx context.Context, name string, args []string) *mCommonAPIClientMockPluginSet {
	if mmPluginSet.mock.funcPluginSet != nil {
		mmPluginSet.mock.t.Fatalf("CommonAPIClientMock.PluginSet mock is already set by Set")
	}

	if mmPluginSet.defaultExpectation == nil {
		mmPluginSet.defaultExpectation = &CommonAPIClientMockPluginSetExpectation{}
	}

	mmPluginSet.defaultExpectation.params = &CommonAPIClientMockPluginSetParams{ctx, name, args}
	for _, e := range mmPluginSet.expectations {
		if minimock.Equal(e.params, mmPluginSet.defaultExpectation.params) {
			mmPluginSet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPluginSet.defaultExpectation.params)
		}
	}

	return mmPluginSet
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.PluginSet
func (mmPluginSet *mCommonAPIClientMockPluginSet) Inspect(f func(ctx context.Context, name string, args []string)) *mCommonAPIClientMockPluginSet {
	if mmPluginSet.mock.inspectFuncPluginSet != nil {
		mmPluginSet.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.PluginSet")
	}

	mmPluginSet.mock.inspectFuncPluginSet = f

	return mmPluginSet
}

// Return sets up results that will be returned by CommonAPIClient.PluginSet
func (mmPluginSet *mCommonAPIClientMockPluginSet) Return(err error) *CommonAPIClientMock {
	if mmPluginSet.mock.funcPluginSet != nil {
		mmPluginSet.mock.t.Fatalf("CommonAPIClientMock.PluginSet mock is already set by Set")
	}

	if mmPluginSet.defaultExpectation == nil {
		mmPluginSet.defaultExpectation = &CommonAPIClientMockPluginSetExpectation{mock: mmPluginSet.mock}
	}
	mmPluginSet.defaultExpectation.results = &CommonAPIClientMockPluginSetResults{err}
	return mmPluginSet.mock
}

//Set uses given function f to mock the CommonAPIClient.PluginSet method
func (mmPluginSet *mCommonAPIClientMockPluginSet) Set(f func(ctx context.Context, name string, args []string) (err error)) *CommonAPIClientMock {
	if mmPluginSet.defaultExpectation != nil {
		mmPluginSet.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.PluginSet method")
	}

	if len(mmPluginSet.expectations) > 0 {
		mmPluginSet.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.PluginSet method")
	}

	mmPluginSet.mock.funcPluginSet = f
	return mmPluginSet.mock
}

// When sets expectation for the CommonAPIClient.PluginSet which will trigger the result defined by the following
// Then helper
func (mmPluginSet *mCommonAPIClientMockPluginSet) When(ctx context.Context, name string, args []string) *CommonAPIClientMockPluginSetExpectation {
	if mmPluginSet.mock.funcPluginSet != nil {
		mmPluginSet.mock.t.Fatalf("CommonAPIClientMock.PluginSet mock is already set by Set")
	}

	expectation := &CommonAPIClientMockPluginSetExpectation{
		mock:   mmPluginSet.mock,
		params: &CommonAPIClientMockPluginSetParams{ctx, name, args},
	}
	mmPluginSet.expectations = append(mmPluginSet.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.PluginSet return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockPluginSetExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockPluginSetResults{err}
	return e.mock
}

// PluginSet implements client.CommonAPIClient
func (mmPluginSet *CommonAPIClientMock) PluginSet(ctx context.Context, name string, args []string) (err error) {
	mm_atomic.AddUint64(&mmPluginSet.beforePluginSetCounter, 1)
	defer mm_atomic.AddUint64(&mmPluginSet.afterPluginSetCounter, 1)

	if mmPluginSet.inspectFuncPluginSet != nil {
		mmPluginSet.inspectFuncPluginSet(ctx, name, args)
	}

	mm_params := &CommonAPIClientMockPluginSetParams{ctx, name, args}

	// Record call args
	mmPluginSet.PluginSetMock.mutex.Lock()
	mmPluginSet.PluginSetMock.callArgs = append(mmPluginSet.PluginSetMock.callArgs, mm_params)
	mmPluginSet.PluginSetMock.mutex.Unlock()

	for _, e := range mmPluginSet.PluginSetMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmPluginSet.PluginSetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPluginSet.PluginSetMock.defaultExpectation.Counter, 1)
		mm_want := mmPluginSet.PluginSetMock.defaultExpectation.params
		mm_got := CommonAPIClientMockPluginSetParams{ctx, name, args}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPluginSet.t.Errorf("CommonAPIClientMock.PluginSet got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPluginSet.PluginSetMock.defaultExpectation.results
		if mm_results == nil {
			mmPluginSet.t.Fatal("No results are set for the CommonAPIClientMock.PluginSet")
		}
		return (*mm_results).err
	}
	if mmPluginSet.funcPluginSet != nil {
		return mmPluginSet.funcPluginSet(ctx, name, args)
	}
	mmPluginSet.t.Fatalf("Unexpected call to CommonAPIClientMock.PluginSet. %v %v %v", ctx, name, args)
	return
}

// PluginSetAfterCounter returns a count of finished CommonAPIClientMock.PluginSet invocations
func (mmPluginSet *CommonAPIClientMock) PluginSetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPluginSet.afterPluginSetCounter)
}

// PluginSetBeforeCounter returns a count of CommonAPIClientMock.PluginSet invocations
func (mmPluginSet *CommonAPIClientMock) PluginSetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPluginSet.beforePluginSetCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.PluginSet.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPluginSet *mCommonAPIClientMockPluginSet) Calls() []*CommonAPIClientMockPluginSetParams {
	mmPluginSet.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockPluginSetParams, len(mmPluginSet.callArgs))
	copy(argCopy, mmPluginSet.callArgs)

	mmPluginSet.mutex.RUnlock()

	return argCopy
}

// MinimockPluginSetDone returns true if the count of the PluginSet invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockPluginSetDone() bool {
	for _, e := range m.PluginSetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PluginSetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPluginSetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPluginSet != nil && mm_atomic.LoadUint64(&m.afterPluginSetCounter) < 1 {
		return false
	}
	return true
}

// MinimockPluginSetInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockPluginSetInspect() {
	for _, e := range m.PluginSetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.PluginSet with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PluginSetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPluginSetCounter) < 1 {
		if m.PluginSetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.PluginSet")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.PluginSet with params: %#v", *m.PluginSetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPluginSet != nil && mm_atomic.LoadUint64(&m.afterPluginSetCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.PluginSet")
	}
}

type mCommonAPIClientMockPluginUpgrade struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockPluginUpgradeExpectation
	expectations       []*CommonAPIClientMockPluginUpgradeExpectation

	callArgs []*CommonAPIClientMockPluginUpgradeParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockPluginUpgradeExpectation specifies expectation struct of the CommonAPIClient.PluginUpgrade
type CommonAPIClientMockPluginUpgradeExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockPluginUpgradeParams
	results *CommonAPIClientMockPluginUpgradeResults
	Counter uint64
}

// CommonAPIClientMockPluginUpgradeParams contains parameters of the CommonAPIClient.PluginUpgrade
type CommonAPIClientMockPluginUpgradeParams struct {
	ctx     context.Context
	name    string
	options types.PluginInstallOptions
}

// CommonAPIClientMockPluginUpgradeResults contains results of the CommonAPIClient.PluginUpgrade
type CommonAPIClientMockPluginUpgradeResults struct {
	r1  io.ReadCloser
	err error
}

// Expect sets up expected params for CommonAPIClient.PluginUpgrade
func (mmPluginUpgrade *mCommonAPIClientMockPluginUpgrade) Expect(ctx context.Context, name string, options types.PluginInstallOptions) *mCommonAPIClientMockPluginUpgrade {
	if mmPluginUpgrade.mock.funcPluginUpgrade != nil {
		mmPluginUpgrade.mock.t.Fatalf("CommonAPIClientMock.PluginUpgrade mock is already set by Set")
	}

	if mmPluginUpgrade.defaultExpectation == nil {
		mmPluginUpgrade.defaultExpectation = &CommonAPIClientMockPluginUpgradeExpectation{}
	}

	mmPluginUpgrade.defaultExpectation.params = &CommonAPIClientMockPluginUpgradeParams{ctx, name, options}
	for _, e := range mmPluginUpgrade.expectations {
		if minimock.Equal(e.params, mmPluginUpgrade.defaultExpectation.params) {
			mmPluginUpgrade.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPluginUpgrade.defaultExpectation.params)
		}
	}

	return mmPluginUpgrade
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.PluginUpgrade
func (mmPluginUpgrade *mCommonAPIClientMockPluginUpgrade) Inspect(f func(ctx context.Context, name string, options types.PluginInstallOptions)) *mCommonAPIClientMockPluginUpgrade {
	if mmPluginUpgrade.mock.inspectFuncPluginUpgrade != nil {
		mmPluginUpgrade.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.PluginUpgrade")
	}

	mmPluginUpgrade.mock.inspectFuncPluginUpgrade = f

	return mmPluginUpgrade
}

// Return sets up results that will be returned by CommonAPIClient.PluginUpgrade
func (mmPluginUpgrade *mCommonAPIClientMockPluginUpgrade) Return(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	if mmPluginUpgrade.mock.funcPluginUpgrade != nil {
		mmPluginUpgrade.mock.t.Fatalf("CommonAPIClientMock.PluginUpgrade mock is already set by Set")
	}

	if mmPluginUpgrade.defaultExpectation == nil {
		mmPluginUpgrade.defaultExpectation = &CommonAPIClientMockPluginUpgradeExpectation{mock: mmPluginUpgrade.mock}
	}
	mmPluginUpgrade.defaultExpectation.results = &CommonAPIClientMockPluginUpgradeResults{r1, err}
	return mmPluginUpgrade.mock
}

//Set uses given function f to mock the CommonAPIClient.PluginUpgrade method
func (mmPluginUpgrade *mCommonAPIClientMockPluginUpgrade) Set(f func(ctx context.Context, name string, options types.PluginInstallOptions) (r1 io.ReadCloser, err error)) *CommonAPIClientMock {
	if mmPluginUpgrade.defaultExpectation != nil {
		mmPluginUpgrade.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.PluginUpgrade method")
	}

	if len(mmPluginUpgrade.expectations) > 0 {
		mmPluginUpgrade.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.PluginUpgrade method")
	}

	mmPluginUpgrade.mock.funcPluginUpgrade = f
	return mmPluginUpgrade.mock
}

// When sets expectation for the CommonAPIClient.PluginUpgrade which will trigger the result defined by the following
// Then helper
func (mmPluginUpgrade *mCommonAPIClientMockPluginUpgrade) When(ctx context.Context, name string, options types.PluginInstallOptions) *CommonAPIClientMockPluginUpgradeExpectation {
	if mmPluginUpgrade.mock.funcPluginUpgrade != nil {
		mmPluginUpgrade.mock.t.Fatalf("CommonAPIClientMock.PluginUpgrade mock is already set by Set")
	}

	expectation := &CommonAPIClientMockPluginUpgradeExpectation{
		mock:   mmPluginUpgrade.mock,
		params: &CommonAPIClientMockPluginUpgradeParams{ctx, name, options},
	}
	mmPluginUpgrade.expectations = append(mmPluginUpgrade.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.PluginUpgrade return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockPluginUpgradeExpectation) Then(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockPluginUpgradeResults{r1, err}
	return e.mock
}

// PluginUpgrade implements client.CommonAPIClient
func (mmPluginUpgrade *CommonAPIClientMock) PluginUpgrade(ctx context.Context, name string, options types.PluginInstallOptions) (r1 io.ReadCloser, err error) {
	mm_atomic.AddUint64(&mmPluginUpgrade.beforePluginUpgradeCounter, 1)
	defer mm_atomic.AddUint64(&mmPluginUpgrade.afterPluginUpgradeCounter, 1)

	if mmPluginUpgrade.inspectFuncPluginUpgrade != nil {
		mmPluginUpgrade.inspectFuncPluginUpgrade(ctx, name, options)
	}

	mm_params := &CommonAPIClientMockPluginUpgradeParams{ctx, name, options}

	// Record call args
	mmPluginUpgrade.PluginUpgradeMock.mutex.Lock()
	mmPluginUpgrade.PluginUpgradeMock.callArgs = append(mmPluginUpgrade.PluginUpgradeMock.callArgs, mm_params)
	mmPluginUpgrade.PluginUpgradeMock.mutex.Unlock()

	for _, e := range mmPluginUpgrade.PluginUpgradeMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmPluginUpgrade.PluginUpgradeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPluginUpgrade.PluginUpgradeMock.defaultExpectation.Counter, 1)
		mm_want := mmPluginUpgrade.PluginUpgradeMock.defaultExpectation.params
		mm_got := CommonAPIClientMockPluginUpgradeParams{ctx, name, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPluginUpgrade.t.Errorf("CommonAPIClientMock.PluginUpgrade got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPluginUpgrade.PluginUpgradeMock.defaultExpectation.results
		if mm_results == nil {
			mmPluginUpgrade.t.Fatal("No results are set for the CommonAPIClientMock.PluginUpgrade")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmPluginUpgrade.funcPluginUpgrade != nil {
		return mmPluginUpgrade.funcPluginUpgrade(ctx, name, options)
	}
	mmPluginUpgrade.t.Fatalf("Unexpected call to CommonAPIClientMock.PluginUpgrade. %v %v %v", ctx, name, options)
	return
}

// PluginUpgradeAfterCounter returns a count of finished CommonAPIClientMock.PluginUpgrade invocations
func (mmPluginUpgrade *CommonAPIClientMock) PluginUpgradeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPluginUpgrade.afterPluginUpgradeCounter)
}

// PluginUpgradeBeforeCounter returns a count of CommonAPIClientMock.PluginUpgrade invocations
func (mmPluginUpgrade *CommonAPIClientMock) PluginUpgradeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPluginUpgrade.beforePluginUpgradeCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.PluginUpgrade.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPluginUpgrade *mCommonAPIClientMockPluginUpgrade) Calls() []*CommonAPIClientMockPluginUpgradeParams {
	mmPluginUpgrade.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockPluginUpgradeParams, len(mmPluginUpgrade.callArgs))
	copy(argCopy, mmPluginUpgrade.callArgs)

	mmPluginUpgrade.mutex.RUnlock()

	return argCopy
}

// MinimockPluginUpgradeDone returns true if the count of the PluginUpgrade invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockPluginUpgradeDone() bool {
	for _, e := range m.PluginUpgradeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PluginUpgradeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPluginUpgradeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPluginUpgrade != nil && mm_atomic.LoadUint64(&m.afterPluginUpgradeCounter) < 1 {
		return false
	}
	return true
}

// MinimockPluginUpgradeInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockPluginUpgradeInspect() {
	for _, e := range m.PluginUpgradeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.PluginUpgrade with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PluginUpgradeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPluginUpgradeCounter) < 1 {
		if m.PluginUpgradeMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.PluginUpgrade")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.PluginUpgrade with params: %#v", *m.PluginUpgradeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPluginUpgrade != nil && mm_atomic.LoadUint64(&m.afterPluginUpgradeCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.PluginUpgrade")
	}
}

type mCommonAPIClientMockRegistryLogin struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockRegistryLoginExpectation
	expectations       []*CommonAPIClientMockRegistryLoginExpectation

	callArgs []*CommonAPIClientMockRegistryLoginParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockRegistryLoginExpectation specifies expectation struct of the CommonAPIClient.RegistryLogin
type CommonAPIClientMockRegistryLoginExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockRegistryLoginParams
	results *CommonAPIClientMockRegistryLoginResults
	Counter uint64
}

// CommonAPIClientMockRegistryLoginParams contains parameters of the CommonAPIClient.RegistryLogin
type CommonAPIClientMockRegistryLoginParams struct {
	ctx  context.Context
	auth types.AuthConfig
}

// CommonAPIClientMockRegistryLoginResults contains results of the CommonAPIClient.RegistryLogin
type CommonAPIClientMockRegistryLoginResults struct {
	a1  registry.AuthenticateOKBody
	err error
}

// Expect sets up expected params for CommonAPIClient.RegistryLogin
func (mmRegistryLogin *mCommonAPIClientMockRegistryLogin) Expect(ctx context.Context, auth types.AuthConfig) *mCommonAPIClientMockRegistryLogin {
	if mmRegistryLogin.mock.funcRegistryLogin != nil {
		mmRegistryLogin.mock.t.Fatalf("CommonAPIClientMock.RegistryLogin mock is already set by Set")
	}

	if mmRegistryLogin.defaultExpectation == nil {
		mmRegistryLogin.defaultExpectation = &CommonAPIClientMockRegistryLoginExpectation{}
	}

	mmRegistryLogin.defaultExpectation.params = &CommonAPIClientMockRegistryLoginParams{ctx, auth}
	for _, e := range mmRegistryLogin.expectations {
		if minimock.Equal(e.params, mmRegistryLogin.defaultExpectation.params) {
			mmRegistryLogin.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRegistryLogin.defaultExpectation.params)
		}
	}

	return mmRegistryLogin
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.RegistryLogin
func (mmRegistryLogin *mCommonAPIClientMockRegistryLogin) Inspect(f func(ctx context.Context, auth types.AuthConfig)) *mCommonAPIClientMockRegistryLogin {
	if mmRegistryLogin.mock.inspectFuncRegistryLogin != nil {
		mmRegistryLogin.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.RegistryLogin")
	}

	mmRegistryLogin.mock.inspectFuncRegistryLogin = f

	return mmRegistryLogin
}

// Return sets up results that will be returned by CommonAPIClient.RegistryLogin
func (mmRegistryLogin *mCommonAPIClientMockRegistryLogin) Return(a1 registry.AuthenticateOKBody, err error) *CommonAPIClientMock {
	if mmRegistryLogin.mock.funcRegistryLogin != nil {
		mmRegistryLogin.mock.t.Fatalf("CommonAPIClientMock.RegistryLogin mock is already set by Set")
	}

	if mmRegistryLogin.defaultExpectation == nil {
		mmRegistryLogin.defaultExpectation = &CommonAPIClientMockRegistryLoginExpectation{mock: mmRegistryLogin.mock}
	}
	mmRegistryLogin.defaultExpectation.results = &CommonAPIClientMockRegistryLoginResults{a1, err}
	return mmRegistryLogin.mock
}

//Set uses given function f to mock the CommonAPIClient.RegistryLogin method
func (mmRegistryLogin *mCommonAPIClientMockRegistryLogin) Set(f func(ctx context.Context, auth types.AuthConfig) (a1 registry.AuthenticateOKBody, err error)) *CommonAPIClientMock {
	if mmRegistryLogin.defaultExpectation != nil {
		mmRegistryLogin.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.RegistryLogin method")
	}

	if len(mmRegistryLogin.expectations) > 0 {
		mmRegistryLogin.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.RegistryLogin method")
	}

	mmRegistryLogin.mock.funcRegistryLogin = f
	return mmRegistryLogin.mock
}

// When sets expectation for the CommonAPIClient.RegistryLogin which will trigger the result defined by the following
// Then helper
func (mmRegistryLogin *mCommonAPIClientMockRegistryLogin) When(ctx context.Context, auth types.AuthConfig) *CommonAPIClientMockRegistryLoginExpectation {
	if mmRegistryLogin.mock.funcRegistryLogin != nil {
		mmRegistryLogin.mock.t.Fatalf("CommonAPIClientMock.RegistryLogin mock is already set by Set")
	}

	expectation := &CommonAPIClientMockRegistryLoginExpectation{
		mock:   mmRegistryLogin.mock,
		params: &CommonAPIClientMockRegistryLoginParams{ctx, auth},
	}
	mmRegistryLogin.expectations = append(mmRegistryLogin.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.RegistryLogin return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockRegistryLoginExpectation) Then(a1 registry.AuthenticateOKBody, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockRegistryLoginResults{a1, err}
	return e.mock
}

// RegistryLogin implements client.CommonAPIClient
func (mmRegistryLogin *CommonAPIClientMock) RegistryLogin(ctx context.Context, auth types.AuthConfig) (a1 registry.AuthenticateOKBody, err error) {
	mm_atomic.AddUint64(&mmRegistryLogin.beforeRegistryLoginCounter, 1)
	defer mm_atomic.AddUint64(&mmRegistryLogin.afterRegistryLoginCounter, 1)

	if mmRegistryLogin.inspectFuncRegistryLogin != nil {
		mmRegistryLogin.inspectFuncRegistryLogin(ctx, auth)
	}

	mm_params := &CommonAPIClientMockRegistryLoginParams{ctx, auth}

	// Record call args
	mmRegistryLogin.RegistryLoginMock.mutex.Lock()
	mmRegistryLogin.RegistryLoginMock.callArgs = append(mmRegistryLogin.RegistryLoginMock.callArgs, mm_params)
	mmRegistryLogin.RegistryLoginMock.mutex.Unlock()

	for _, e := range mmRegistryLogin.RegistryLoginMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.a1, e.results.err
		}
	}

	if mmRegistryLogin.RegistryLoginMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRegistryLogin.RegistryLoginMock.defaultExpectation.Counter, 1)
		mm_want := mmRegistryLogin.RegistryLoginMock.defaultExpectation.params
		mm_got := CommonAPIClientMockRegistryLoginParams{ctx, auth}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRegistryLogin.t.Errorf("CommonAPIClientMock.RegistryLogin got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRegistryLogin.RegistryLoginMock.defaultExpectation.results
		if mm_results == nil {
			mmRegistryLogin.t.Fatal("No results are set for the CommonAPIClientMock.RegistryLogin")
		}
		return (*mm_results).a1, (*mm_results).err
	}
	if mmRegistryLogin.funcRegistryLogin != nil {
		return mmRegistryLogin.funcRegistryLogin(ctx, auth)
	}
	mmRegistryLogin.t.Fatalf("Unexpected call to CommonAPIClientMock.RegistryLogin. %v %v", ctx, auth)
	return
}

// RegistryLoginAfterCounter returns a count of finished CommonAPIClientMock.RegistryLogin invocations
func (mmRegistryLogin *CommonAPIClientMock) RegistryLoginAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRegistryLogin.afterRegistryLoginCounter)
}

// RegistryLoginBeforeCounter returns a count of CommonAPIClientMock.RegistryLogin invocations
func (mmRegistryLogin *CommonAPIClientMock) RegistryLoginBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRegistryLogin.beforeRegistryLoginCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.RegistryLogin.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRegistryLogin *mCommonAPIClientMockRegistryLogin) Calls() []*CommonAPIClientMockRegistryLoginParams {
	mmRegistryLogin.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockRegistryLoginParams, len(mmRegistryLogin.callArgs))
	copy(argCopy, mmRegistryLogin.callArgs)

	mmRegistryLogin.mutex.RUnlock()

	return argCopy
}

// MinimockRegistryLoginDone returns true if the count of the RegistryLogin invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockRegistryLoginDone() bool {
	for _, e := range m.RegistryLoginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RegistryLoginMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRegistryLoginCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRegistryLogin != nil && mm_atomic.LoadUint64(&m.afterRegistryLoginCounter) < 1 {
		return false
	}
	return true
}

// MinimockRegistryLoginInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockRegistryLoginInspect() {
	for _, e := range m.RegistryLoginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.RegistryLogin with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RegistryLoginMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRegistryLoginCounter) < 1 {
		if m.RegistryLoginMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.RegistryLogin")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.RegistryLogin with params: %#v", *m.RegistryLoginMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRegistryLogin != nil && mm_atomic.LoadUint64(&m.afterRegistryLoginCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.RegistryLogin")
	}
}

type mCommonAPIClientMockSecretCreate struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockSecretCreateExpectation
	expectations       []*CommonAPIClientMockSecretCreateExpectation

	callArgs []*CommonAPIClientMockSecretCreateParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockSecretCreateExpectation specifies expectation struct of the CommonAPIClient.SecretCreate
type CommonAPIClientMockSecretCreateExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockSecretCreateParams
	results *CommonAPIClientMockSecretCreateResults
	Counter uint64
}

// CommonAPIClientMockSecretCreateParams contains parameters of the CommonAPIClient.SecretCreate
type CommonAPIClientMockSecretCreateParams struct {
	ctx    context.Context
	secret swarm.SecretSpec
}

// CommonAPIClientMockSecretCreateResults contains results of the CommonAPIClient.SecretCreate
type CommonAPIClientMockSecretCreateResults struct {
	s1  types.SecretCreateResponse
	err error
}

// Expect sets up expected params for CommonAPIClient.SecretCreate
func (mmSecretCreate *mCommonAPIClientMockSecretCreate) Expect(ctx context.Context, secret swarm.SecretSpec) *mCommonAPIClientMockSecretCreate {
	if mmSecretCreate.mock.funcSecretCreate != nil {
		mmSecretCreate.mock.t.Fatalf("CommonAPIClientMock.SecretCreate mock is already set by Set")
	}

	if mmSecretCreate.defaultExpectation == nil {
		mmSecretCreate.defaultExpectation = &CommonAPIClientMockSecretCreateExpectation{}
	}

	mmSecretCreate.defaultExpectation.params = &CommonAPIClientMockSecretCreateParams{ctx, secret}
	for _, e := range mmSecretCreate.expectations {
		if minimock.Equal(e.params, mmSecretCreate.defaultExpectation.params) {
			mmSecretCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSecretCreate.defaultExpectation.params)
		}
	}

	return mmSecretCreate
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.SecretCreate
func (mmSecretCreate *mCommonAPIClientMockSecretCreate) Inspect(f func(ctx context.Context, secret swarm.SecretSpec)) *mCommonAPIClientMockSecretCreate {
	if mmSecretCreate.mock.inspectFuncSecretCreate != nil {
		mmSecretCreate.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.SecretCreate")
	}

	mmSecretCreate.mock.inspectFuncSecretCreate = f

	return mmSecretCreate
}

// Return sets up results that will be returned by CommonAPIClient.SecretCreate
func (mmSecretCreate *mCommonAPIClientMockSecretCreate) Return(s1 types.SecretCreateResponse, err error) *CommonAPIClientMock {
	if mmSecretCreate.mock.funcSecretCreate != nil {
		mmSecretCreate.mock.t.Fatalf("CommonAPIClientMock.SecretCreate mock is already set by Set")
	}

	if mmSecretCreate.defaultExpectation == nil {
		mmSecretCreate.defaultExpectation = &CommonAPIClientMockSecretCreateExpectation{mock: mmSecretCreate.mock}
	}
	mmSecretCreate.defaultExpectation.results = &CommonAPIClientMockSecretCreateResults{s1, err}
	return mmSecretCreate.mock
}

//Set uses given function f to mock the CommonAPIClient.SecretCreate method
func (mmSecretCreate *mCommonAPIClientMockSecretCreate) Set(f func(ctx context.Context, secret swarm.SecretSpec) (s1 types.SecretCreateResponse, err error)) *CommonAPIClientMock {
	if mmSecretCreate.defaultExpectation != nil {
		mmSecretCreate.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.SecretCreate method")
	}

	if len(mmSecretCreate.expectations) > 0 {
		mmSecretCreate.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.SecretCreate method")
	}

	mmSecretCreate.mock.funcSecretCreate = f
	return mmSecretCreate.mock
}

// When sets expectation for the CommonAPIClient.SecretCreate which will trigger the result defined by the following
// Then helper
func (mmSecretCreate *mCommonAPIClientMockSecretCreate) When(ctx context.Context, secret swarm.SecretSpec) *CommonAPIClientMockSecretCreateExpectation {
	if mmSecretCreate.mock.funcSecretCreate != nil {
		mmSecretCreate.mock.t.Fatalf("CommonAPIClientMock.SecretCreate mock is already set by Set")
	}

	expectation := &CommonAPIClientMockSecretCreateExpectation{
		mock:   mmSecretCreate.mock,
		params: &CommonAPIClientMockSecretCreateParams{ctx, secret},
	}
	mmSecretCreate.expectations = append(mmSecretCreate.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.SecretCreate return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockSecretCreateExpectation) Then(s1 types.SecretCreateResponse, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockSecretCreateResults{s1, err}
	return e.mock
}

// SecretCreate implements client.CommonAPIClient
func (mmSecretCreate *CommonAPIClientMock) SecretCreate(ctx context.Context, secret swarm.SecretSpec) (s1 types.SecretCreateResponse, err error) {
	mm_atomic.AddUint64(&mmSecretCreate.beforeSecretCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmSecretCreate.afterSecretCreateCounter, 1)

	if mmSecretCreate.inspectFuncSecretCreate != nil {
		mmSecretCreate.inspectFuncSecretCreate(ctx, secret)
	}

	mm_params := &CommonAPIClientMockSecretCreateParams{ctx, secret}

	// Record call args
	mmSecretCreate.SecretCreateMock.mutex.Lock()
	mmSecretCreate.SecretCreateMock.callArgs = append(mmSecretCreate.SecretCreateMock.callArgs, mm_params)
	mmSecretCreate.SecretCreateMock.mutex.Unlock()

	for _, e := range mmSecretCreate.SecretCreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmSecretCreate.SecretCreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSecretCreate.SecretCreateMock.defaultExpectation.Counter, 1)
		mm_want := mmSecretCreate.SecretCreateMock.defaultExpectation.params
		mm_got := CommonAPIClientMockSecretCreateParams{ctx, secret}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSecretCreate.t.Errorf("CommonAPIClientMock.SecretCreate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSecretCreate.SecretCreateMock.defaultExpectation.results
		if mm_results == nil {
			mmSecretCreate.t.Fatal("No results are set for the CommonAPIClientMock.SecretCreate")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmSecretCreate.funcSecretCreate != nil {
		return mmSecretCreate.funcSecretCreate(ctx, secret)
	}
	mmSecretCreate.t.Fatalf("Unexpected call to CommonAPIClientMock.SecretCreate. %v %v", ctx, secret)
	return
}

// SecretCreateAfterCounter returns a count of finished CommonAPIClientMock.SecretCreate invocations
func (mmSecretCreate *CommonAPIClientMock) SecretCreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSecretCreate.afterSecretCreateCounter)
}

// SecretCreateBeforeCounter returns a count of CommonAPIClientMock.SecretCreate invocations
func (mmSecretCreate *CommonAPIClientMock) SecretCreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSecretCreate.beforeSecretCreateCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.SecretCreate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSecretCreate *mCommonAPIClientMockSecretCreate) Calls() []*CommonAPIClientMockSecretCreateParams {
	mmSecretCreate.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockSecretCreateParams, len(mmSecretCreate.callArgs))
	copy(argCopy, mmSecretCreate.callArgs)

	mmSecretCreate.mutex.RUnlock()

	return argCopy
}

// MinimockSecretCreateDone returns true if the count of the SecretCreate invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockSecretCreateDone() bool {
	for _, e := range m.SecretCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SecretCreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSecretCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSecretCreate != nil && mm_atomic.LoadUint64(&m.afterSecretCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockSecretCreateInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockSecretCreateInspect() {
	for _, e := range m.SecretCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.SecretCreate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SecretCreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSecretCreateCounter) < 1 {
		if m.SecretCreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.SecretCreate")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.SecretCreate with params: %#v", *m.SecretCreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSecretCreate != nil && mm_atomic.LoadUint64(&m.afterSecretCreateCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.SecretCreate")
	}
}

type mCommonAPIClientMockSecretInspectWithRaw struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockSecretInspectWithRawExpectation
	expectations       []*CommonAPIClientMockSecretInspectWithRawExpectation

	callArgs []*CommonAPIClientMockSecretInspectWithRawParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockSecretInspectWithRawExpectation specifies expectation struct of the CommonAPIClient.SecretInspectWithRaw
type CommonAPIClientMockSecretInspectWithRawExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockSecretInspectWithRawParams
	results *CommonAPIClientMockSecretInspectWithRawResults
	Counter uint64
}

// CommonAPIClientMockSecretInspectWithRawParams contains parameters of the CommonAPIClient.SecretInspectWithRaw
type CommonAPIClientMockSecretInspectWithRawParams struct {
	ctx  context.Context
	name string
}

// CommonAPIClientMockSecretInspectWithRawResults contains results of the CommonAPIClient.SecretInspectWithRaw
type CommonAPIClientMockSecretInspectWithRawResults struct {
	s1  swarm.Secret
	ba1 []byte
	err error
}

// Expect sets up expected params for CommonAPIClient.SecretInspectWithRaw
func (mmSecretInspectWithRaw *mCommonAPIClientMockSecretInspectWithRaw) Expect(ctx context.Context, name string) *mCommonAPIClientMockSecretInspectWithRaw {
	if mmSecretInspectWithRaw.mock.funcSecretInspectWithRaw != nil {
		mmSecretInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.SecretInspectWithRaw mock is already set by Set")
	}

	if mmSecretInspectWithRaw.defaultExpectation == nil {
		mmSecretInspectWithRaw.defaultExpectation = &CommonAPIClientMockSecretInspectWithRawExpectation{}
	}

	mmSecretInspectWithRaw.defaultExpectation.params = &CommonAPIClientMockSecretInspectWithRawParams{ctx, name}
	for _, e := range mmSecretInspectWithRaw.expectations {
		if minimock.Equal(e.params, mmSecretInspectWithRaw.defaultExpectation.params) {
			mmSecretInspectWithRaw.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSecretInspectWithRaw.defaultExpectation.params)
		}
	}

	return mmSecretInspectWithRaw
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.SecretInspectWithRaw
func (mmSecretInspectWithRaw *mCommonAPIClientMockSecretInspectWithRaw) Inspect(f func(ctx context.Context, name string)) *mCommonAPIClientMockSecretInspectWithRaw {
	if mmSecretInspectWithRaw.mock.inspectFuncSecretInspectWithRaw != nil {
		mmSecretInspectWithRaw.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.SecretInspectWithRaw")
	}

	mmSecretInspectWithRaw.mock.inspectFuncSecretInspectWithRaw = f

	return mmSecretInspectWithRaw
}

// Return sets up results that will be returned by CommonAPIClient.SecretInspectWithRaw
func (mmSecretInspectWithRaw *mCommonAPIClientMockSecretInspectWithRaw) Return(s1 swarm.Secret, ba1 []byte, err error) *CommonAPIClientMock {
	if mmSecretInspectWithRaw.mock.funcSecretInspectWithRaw != nil {
		mmSecretInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.SecretInspectWithRaw mock is already set by Set")
	}

	if mmSecretInspectWithRaw.defaultExpectation == nil {
		mmSecretInspectWithRaw.defaultExpectation = &CommonAPIClientMockSecretInspectWithRawExpectation{mock: mmSecretInspectWithRaw.mock}
	}
	mmSecretInspectWithRaw.defaultExpectation.results = &CommonAPIClientMockSecretInspectWithRawResults{s1, ba1, err}
	return mmSecretInspectWithRaw.mock
}

//Set uses given function f to mock the CommonAPIClient.SecretInspectWithRaw method
func (mmSecretInspectWithRaw *mCommonAPIClientMockSecretInspectWithRaw) Set(f func(ctx context.Context, name string) (s1 swarm.Secret, ba1 []byte, err error)) *CommonAPIClientMock {
	if mmSecretInspectWithRaw.defaultExpectation != nil {
		mmSecretInspectWithRaw.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.SecretInspectWithRaw method")
	}

	if len(mmSecretInspectWithRaw.expectations) > 0 {
		mmSecretInspectWithRaw.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.SecretInspectWithRaw method")
	}

	mmSecretInspectWithRaw.mock.funcSecretInspectWithRaw = f
	return mmSecretInspectWithRaw.mock
}

// When sets expectation for the CommonAPIClient.SecretInspectWithRaw which will trigger the result defined by the following
// Then helper
func (mmSecretInspectWithRaw *mCommonAPIClientMockSecretInspectWithRaw) When(ctx context.Context, name string) *CommonAPIClientMockSecretInspectWithRawExpectation {
	if mmSecretInspectWithRaw.mock.funcSecretInspectWithRaw != nil {
		mmSecretInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.SecretInspectWithRaw mock is already set by Set")
	}

	expectation := &CommonAPIClientMockSecretInspectWithRawExpectation{
		mock:   mmSecretInspectWithRaw.mock,
		params: &CommonAPIClientMockSecretInspectWithRawParams{ctx, name},
	}
	mmSecretInspectWithRaw.expectations = append(mmSecretInspectWithRaw.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.SecretInspectWithRaw return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockSecretInspectWithRawExpectation) Then(s1 swarm.Secret, ba1 []byte, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockSecretInspectWithRawResults{s1, ba1, err}
	return e.mock
}

// SecretInspectWithRaw implements client.CommonAPIClient
func (mmSecretInspectWithRaw *CommonAPIClientMock) SecretInspectWithRaw(ctx context.Context, name string) (s1 swarm.Secret, ba1 []byte, err error) {
	mm_atomic.AddUint64(&mmSecretInspectWithRaw.beforeSecretInspectWithRawCounter, 1)
	defer mm_atomic.AddUint64(&mmSecretInspectWithRaw.afterSecretInspectWithRawCounter, 1)

	if mmSecretInspectWithRaw.inspectFuncSecretInspectWithRaw != nil {
		mmSecretInspectWithRaw.inspectFuncSecretInspectWithRaw(ctx, name)
	}

	mm_params := &CommonAPIClientMockSecretInspectWithRawParams{ctx, name}

	// Record call args
	mmSecretInspectWithRaw.SecretInspectWithRawMock.mutex.Lock()
	mmSecretInspectWithRaw.SecretInspectWithRawMock.callArgs = append(mmSecretInspectWithRaw.SecretInspectWithRawMock.callArgs, mm_params)
	mmSecretInspectWithRaw.SecretInspectWithRawMock.mutex.Unlock()

	for _, e := range mmSecretInspectWithRaw.SecretInspectWithRawMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.ba1, e.results.err
		}
	}

	if mmSecretInspectWithRaw.SecretInspectWithRawMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSecretInspectWithRaw.SecretInspectWithRawMock.defaultExpectation.Counter, 1)
		mm_want := mmSecretInspectWithRaw.SecretInspectWithRawMock.defaultExpectation.params
		mm_got := CommonAPIClientMockSecretInspectWithRawParams{ctx, name}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSecretInspectWithRaw.t.Errorf("CommonAPIClientMock.SecretInspectWithRaw got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSecretInspectWithRaw.SecretInspectWithRawMock.defaultExpectation.results
		if mm_results == nil {
			mmSecretInspectWithRaw.t.Fatal("No results are set for the CommonAPIClientMock.SecretInspectWithRaw")
		}
		return (*mm_results).s1, (*mm_results).ba1, (*mm_results).err
	}
	if mmSecretInspectWithRaw.funcSecretInspectWithRaw != nil {
		return mmSecretInspectWithRaw.funcSecretInspectWithRaw(ctx, name)
	}
	mmSecretInspectWithRaw.t.Fatalf("Unexpected call to CommonAPIClientMock.SecretInspectWithRaw. %v %v", ctx, name)
	return
}

// SecretInspectWithRawAfterCounter returns a count of finished CommonAPIClientMock.SecretInspectWithRaw invocations
func (mmSecretInspectWithRaw *CommonAPIClientMock) SecretInspectWithRawAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSecretInspectWithRaw.afterSecretInspectWithRawCounter)
}

// SecretInspectWithRawBeforeCounter returns a count of CommonAPIClientMock.SecretInspectWithRaw invocations
func (mmSecretInspectWithRaw *CommonAPIClientMock) SecretInspectWithRawBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSecretInspectWithRaw.beforeSecretInspectWithRawCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.SecretInspectWithRaw.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSecretInspectWithRaw *mCommonAPIClientMockSecretInspectWithRaw) Calls() []*CommonAPIClientMockSecretInspectWithRawParams {
	mmSecretInspectWithRaw.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockSecretInspectWithRawParams, len(mmSecretInspectWithRaw.callArgs))
	copy(argCopy, mmSecretInspectWithRaw.callArgs)

	mmSecretInspectWithRaw.mutex.RUnlock()

	return argCopy
}

// MinimockSecretInspectWithRawDone returns true if the count of the SecretInspectWithRaw invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockSecretInspectWithRawDone() bool {
	for _, e := range m.SecretInspectWithRawMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SecretInspectWithRawMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSecretInspectWithRawCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSecretInspectWithRaw != nil && mm_atomic.LoadUint64(&m.afterSecretInspectWithRawCounter) < 1 {
		return false
	}
	return true
}

// MinimockSecretInspectWithRawInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockSecretInspectWithRawInspect() {
	for _, e := range m.SecretInspectWithRawMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.SecretInspectWithRaw with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SecretInspectWithRawMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSecretInspectWithRawCounter) < 1 {
		if m.SecretInspectWithRawMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.SecretInspectWithRaw")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.SecretInspectWithRaw with params: %#v", *m.SecretInspectWithRawMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSecretInspectWithRaw != nil && mm_atomic.LoadUint64(&m.afterSecretInspectWithRawCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.SecretInspectWithRaw")
	}
}

type mCommonAPIClientMockSecretList struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockSecretListExpectation
	expectations       []*CommonAPIClientMockSecretListExpectation

	callArgs []*CommonAPIClientMockSecretListParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockSecretListExpectation specifies expectation struct of the CommonAPIClient.SecretList
type CommonAPIClientMockSecretListExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockSecretListParams
	results *CommonAPIClientMockSecretListResults
	Counter uint64
}

// CommonAPIClientMockSecretListParams contains parameters of the CommonAPIClient.SecretList
type CommonAPIClientMockSecretListParams struct {
	ctx     context.Context
	options types.SecretListOptions
}

// CommonAPIClientMockSecretListResults contains results of the CommonAPIClient.SecretList
type CommonAPIClientMockSecretListResults struct {
	sa1 []swarm.Secret
	err error
}

// Expect sets up expected params for CommonAPIClient.SecretList
func (mmSecretList *mCommonAPIClientMockSecretList) Expect(ctx context.Context, options types.SecretListOptions) *mCommonAPIClientMockSecretList {
	if mmSecretList.mock.funcSecretList != nil {
		mmSecretList.mock.t.Fatalf("CommonAPIClientMock.SecretList mock is already set by Set")
	}

	if mmSecretList.defaultExpectation == nil {
		mmSecretList.defaultExpectation = &CommonAPIClientMockSecretListExpectation{}
	}

	mmSecretList.defaultExpectation.params = &CommonAPIClientMockSecretListParams{ctx, options}
	for _, e := range mmSecretList.expectations {
		if minimock.Equal(e.params, mmSecretList.defaultExpectation.params) {
			mmSecretList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSecretList.defaultExpectation.params)
		}
	}

	return mmSecretList
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.SecretList
func (mmSecretList *mCommonAPIClientMockSecretList) Inspect(f func(ctx context.Context, options types.SecretListOptions)) *mCommonAPIClientMockSecretList {
	if mmSecretList.mock.inspectFuncSecretList != nil {
		mmSecretList.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.SecretList")
	}

	mmSecretList.mock.inspectFuncSecretList = f

	return mmSecretList
}

// Return sets up results that will be returned by CommonAPIClient.SecretList
func (mmSecretList *mCommonAPIClientMockSecretList) Return(sa1 []swarm.Secret, err error) *CommonAPIClientMock {
	if mmSecretList.mock.funcSecretList != nil {
		mmSecretList.mock.t.Fatalf("CommonAPIClientMock.SecretList mock is already set by Set")
	}

	if mmSecretList.defaultExpectation == nil {
		mmSecretList.defaultExpectation = &CommonAPIClientMockSecretListExpectation{mock: mmSecretList.mock}
	}
	mmSecretList.defaultExpectation.results = &CommonAPIClientMockSecretListResults{sa1, err}
	return mmSecretList.mock
}

//Set uses given function f to mock the CommonAPIClient.SecretList method
func (mmSecretList *mCommonAPIClientMockSecretList) Set(f func(ctx context.Context, options types.SecretListOptions) (sa1 []swarm.Secret, err error)) *CommonAPIClientMock {
	if mmSecretList.defaultExpectation != nil {
		mmSecretList.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.SecretList method")
	}

	if len(mmSecretList.expectations) > 0 {
		mmSecretList.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.SecretList method")
	}

	mmSecretList.mock.funcSecretList = f
	return mmSecretList.mock
}

// When sets expectation for the CommonAPIClient.SecretList which will trigger the result defined by the following
// Then helper
func (mmSecretList *mCommonAPIClientMockSecretList) When(ctx context.Context, options types.SecretListOptions) *CommonAPIClientMockSecretListExpectation {
	if mmSecretList.mock.funcSecretList != nil {
		mmSecretList.mock.t.Fatalf("CommonAPIClientMock.SecretList mock is already set by Set")
	}

	expectation := &CommonAPIClientMockSecretListExpectation{
		mock:   mmSecretList.mock,
		params: &CommonAPIClientMockSecretListParams{ctx, options},
	}
	mmSecretList.expectations = append(mmSecretList.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.SecretList return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockSecretListExpectation) Then(sa1 []swarm.Secret, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockSecretListResults{sa1, err}
	return e.mock
}

// SecretList implements client.CommonAPIClient
func (mmSecretList *CommonAPIClientMock) SecretList(ctx context.Context, options types.SecretListOptions) (sa1 []swarm.Secret, err error) {
	mm_atomic.AddUint64(&mmSecretList.beforeSecretListCounter, 1)
	defer mm_atomic.AddUint64(&mmSecretList.afterSecretListCounter, 1)

	if mmSecretList.inspectFuncSecretList != nil {
		mmSecretList.inspectFuncSecretList(ctx, options)
	}

	mm_params := &CommonAPIClientMockSecretListParams{ctx, options}

	// Record call args
	mmSecretList.SecretListMock.mutex.Lock()
	mmSecretList.SecretListMock.callArgs = append(mmSecretList.SecretListMock.callArgs, mm_params)
	mmSecretList.SecretListMock.mutex.Unlock()

	for _, e := range mmSecretList.SecretListMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sa1, e.results.err
		}
	}

	if mmSecretList.SecretListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSecretList.SecretListMock.defaultExpectation.Counter, 1)
		mm_want := mmSecretList.SecretListMock.defaultExpectation.params
		mm_got := CommonAPIClientMockSecretListParams{ctx, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSecretList.t.Errorf("CommonAPIClientMock.SecretList got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSecretList.SecretListMock.defaultExpectation.results
		if mm_results == nil {
			mmSecretList.t.Fatal("No results are set for the CommonAPIClientMock.SecretList")
		}
		return (*mm_results).sa1, (*mm_results).err
	}
	if mmSecretList.funcSecretList != nil {
		return mmSecretList.funcSecretList(ctx, options)
	}
	mmSecretList.t.Fatalf("Unexpected call to CommonAPIClientMock.SecretList. %v %v", ctx, options)
	return
}

// SecretListAfterCounter returns a count of finished CommonAPIClientMock.SecretList invocations
func (mmSecretList *CommonAPIClientMock) SecretListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSecretList.afterSecretListCounter)
}

// SecretListBeforeCounter returns a count of CommonAPIClientMock.SecretList invocations
func (mmSecretList *CommonAPIClientMock) SecretListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSecretList.beforeSecretListCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.SecretList.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSecretList *mCommonAPIClientMockSecretList) Calls() []*CommonAPIClientMockSecretListParams {
	mmSecretList.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockSecretListParams, len(mmSecretList.callArgs))
	copy(argCopy, mmSecretList.callArgs)

	mmSecretList.mutex.RUnlock()

	return argCopy
}

// MinimockSecretListDone returns true if the count of the SecretList invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockSecretListDone() bool {
	for _, e := range m.SecretListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SecretListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSecretListCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSecretList != nil && mm_atomic.LoadUint64(&m.afterSecretListCounter) < 1 {
		return false
	}
	return true
}

// MinimockSecretListInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockSecretListInspect() {
	for _, e := range m.SecretListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.SecretList with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SecretListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSecretListCounter) < 1 {
		if m.SecretListMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.SecretList")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.SecretList with params: %#v", *m.SecretListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSecretList != nil && mm_atomic.LoadUint64(&m.afterSecretListCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.SecretList")
	}
}

type mCommonAPIClientMockSecretRemove struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockSecretRemoveExpectation
	expectations       []*CommonAPIClientMockSecretRemoveExpectation

	callArgs []*CommonAPIClientMockSecretRemoveParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockSecretRemoveExpectation specifies expectation struct of the CommonAPIClient.SecretRemove
type CommonAPIClientMockSecretRemoveExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockSecretRemoveParams
	results *CommonAPIClientMockSecretRemoveResults
	Counter uint64
}

// CommonAPIClientMockSecretRemoveParams contains parameters of the CommonAPIClient.SecretRemove
type CommonAPIClientMockSecretRemoveParams struct {
	ctx context.Context
	id  string
}

// CommonAPIClientMockSecretRemoveResults contains results of the CommonAPIClient.SecretRemove
type CommonAPIClientMockSecretRemoveResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.SecretRemove
func (mmSecretRemove *mCommonAPIClientMockSecretRemove) Expect(ctx context.Context, id string) *mCommonAPIClientMockSecretRemove {
	if mmSecretRemove.mock.funcSecretRemove != nil {
		mmSecretRemove.mock.t.Fatalf("CommonAPIClientMock.SecretRemove mock is already set by Set")
	}

	if mmSecretRemove.defaultExpectation == nil {
		mmSecretRemove.defaultExpectation = &CommonAPIClientMockSecretRemoveExpectation{}
	}

	mmSecretRemove.defaultExpectation.params = &CommonAPIClientMockSecretRemoveParams{ctx, id}
	for _, e := range mmSecretRemove.expectations {
		if minimock.Equal(e.params, mmSecretRemove.defaultExpectation.params) {
			mmSecretRemove.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSecretRemove.defaultExpectation.params)
		}
	}

	return mmSecretRemove
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.SecretRemove
func (mmSecretRemove *mCommonAPIClientMockSecretRemove) Inspect(f func(ctx context.Context, id string)) *mCommonAPIClientMockSecretRemove {
	if mmSecretRemove.mock.inspectFuncSecretRemove != nil {
		mmSecretRemove.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.SecretRemove")
	}

	mmSecretRemove.mock.inspectFuncSecretRemove = f

	return mmSecretRemove
}

// Return sets up results that will be returned by CommonAPIClient.SecretRemove
func (mmSecretRemove *mCommonAPIClientMockSecretRemove) Return(err error) *CommonAPIClientMock {
	if mmSecretRemove.mock.funcSecretRemove != nil {
		mmSecretRemove.mock.t.Fatalf("CommonAPIClientMock.SecretRemove mock is already set by Set")
	}

	if mmSecretRemove.defaultExpectation == nil {
		mmSecretRemove.defaultExpectation = &CommonAPIClientMockSecretRemoveExpectation{mock: mmSecretRemove.mock}
	}
	mmSecretRemove.defaultExpectation.results = &CommonAPIClientMockSecretRemoveResults{err}
	return mmSecretRemove.mock
}

//Set uses given function f to mock the CommonAPIClient.SecretRemove method
func (mmSecretRemove *mCommonAPIClientMockSecretRemove) Set(f func(ctx context.Context, id string) (err error)) *CommonAPIClientMock {
	if mmSecretRemove.defaultExpectation != nil {
		mmSecretRemove.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.SecretRemove method")
	}

	if len(mmSecretRemove.expectations) > 0 {
		mmSecretRemove.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.SecretRemove method")
	}

	mmSecretRemove.mock.funcSecretRemove = f
	return mmSecretRemove.mock
}

// When sets expectation for the CommonAPIClient.SecretRemove which will trigger the result defined by the following
// Then helper
func (mmSecretRemove *mCommonAPIClientMockSecretRemove) When(ctx context.Context, id string) *CommonAPIClientMockSecretRemoveExpectation {
	if mmSecretRemove.mock.funcSecretRemove != nil {
		mmSecretRemove.mock.t.Fatalf("CommonAPIClientMock.SecretRemove mock is already set by Set")
	}

	expectation := &CommonAPIClientMockSecretRemoveExpectation{
		mock:   mmSecretRemove.mock,
		params: &CommonAPIClientMockSecretRemoveParams{ctx, id},
	}
	mmSecretRemove.expectations = append(mmSecretRemove.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.SecretRemove return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockSecretRemoveExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockSecretRemoveResults{err}
	return e.mock
}

// SecretRemove implements client.CommonAPIClient
func (mmSecretRemove *CommonAPIClientMock) SecretRemove(ctx context.Context, id string) (err error) {
	mm_atomic.AddUint64(&mmSecretRemove.beforeSecretRemoveCounter, 1)
	defer mm_atomic.AddUint64(&mmSecretRemove.afterSecretRemoveCounter, 1)

	if mmSecretRemove.inspectFuncSecretRemove != nil {
		mmSecretRemove.inspectFuncSecretRemove(ctx, id)
	}

	mm_params := &CommonAPIClientMockSecretRemoveParams{ctx, id}

	// Record call args
	mmSecretRemove.SecretRemoveMock.mutex.Lock()
	mmSecretRemove.SecretRemoveMock.callArgs = append(mmSecretRemove.SecretRemoveMock.callArgs, mm_params)
	mmSecretRemove.SecretRemoveMock.mutex.Unlock()

	for _, e := range mmSecretRemove.SecretRemoveMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSecretRemove.SecretRemoveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSecretRemove.SecretRemoveMock.defaultExpectation.Counter, 1)
		mm_want := mmSecretRemove.SecretRemoveMock.defaultExpectation.params
		mm_got := CommonAPIClientMockSecretRemoveParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSecretRemove.t.Errorf("CommonAPIClientMock.SecretRemove got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSecretRemove.SecretRemoveMock.defaultExpectation.results
		if mm_results == nil {
			mmSecretRemove.t.Fatal("No results are set for the CommonAPIClientMock.SecretRemove")
		}
		return (*mm_results).err
	}
	if mmSecretRemove.funcSecretRemove != nil {
		return mmSecretRemove.funcSecretRemove(ctx, id)
	}
	mmSecretRemove.t.Fatalf("Unexpected call to CommonAPIClientMock.SecretRemove. %v %v", ctx, id)
	return
}

// SecretRemoveAfterCounter returns a count of finished CommonAPIClientMock.SecretRemove invocations
func (mmSecretRemove *CommonAPIClientMock) SecretRemoveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSecretRemove.afterSecretRemoveCounter)
}

// SecretRemoveBeforeCounter returns a count of CommonAPIClientMock.SecretRemove invocations
func (mmSecretRemove *CommonAPIClientMock) SecretRemoveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSecretRemove.beforeSecretRemoveCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.SecretRemove.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSecretRemove *mCommonAPIClientMockSecretRemove) Calls() []*CommonAPIClientMockSecretRemoveParams {
	mmSecretRemove.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockSecretRemoveParams, len(mmSecretRemove.callArgs))
	copy(argCopy, mmSecretRemove.callArgs)

	mmSecretRemove.mutex.RUnlock()

	return argCopy
}

// MinimockSecretRemoveDone returns true if the count of the SecretRemove invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockSecretRemoveDone() bool {
	for _, e := range m.SecretRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SecretRemoveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSecretRemoveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSecretRemove != nil && mm_atomic.LoadUint64(&m.afterSecretRemoveCounter) < 1 {
		return false
	}
	return true
}

// MinimockSecretRemoveInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockSecretRemoveInspect() {
	for _, e := range m.SecretRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.SecretRemove with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SecretRemoveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSecretRemoveCounter) < 1 {
		if m.SecretRemoveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.SecretRemove")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.SecretRemove with params: %#v", *m.SecretRemoveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSecretRemove != nil && mm_atomic.LoadUint64(&m.afterSecretRemoveCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.SecretRemove")
	}
}

type mCommonAPIClientMockSecretUpdate struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockSecretUpdateExpectation
	expectations       []*CommonAPIClientMockSecretUpdateExpectation

	callArgs []*CommonAPIClientMockSecretUpdateParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockSecretUpdateExpectation specifies expectation struct of the CommonAPIClient.SecretUpdate
type CommonAPIClientMockSecretUpdateExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockSecretUpdateParams
	results *CommonAPIClientMockSecretUpdateResults
	Counter uint64
}

// CommonAPIClientMockSecretUpdateParams contains parameters of the CommonAPIClient.SecretUpdate
type CommonAPIClientMockSecretUpdateParams struct {
	ctx     context.Context
	id      string
	version swarm.Version
	secret  swarm.SecretSpec
}

// CommonAPIClientMockSecretUpdateResults contains results of the CommonAPIClient.SecretUpdate
type CommonAPIClientMockSecretUpdateResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.SecretUpdate
func (mmSecretUpdate *mCommonAPIClientMockSecretUpdate) Expect(ctx context.Context, id string, version swarm.Version, secret swarm.SecretSpec) *mCommonAPIClientMockSecretUpdate {
	if mmSecretUpdate.mock.funcSecretUpdate != nil {
		mmSecretUpdate.mock.t.Fatalf("CommonAPIClientMock.SecretUpdate mock is already set by Set")
	}

	if mmSecretUpdate.defaultExpectation == nil {
		mmSecretUpdate.defaultExpectation = &CommonAPIClientMockSecretUpdateExpectation{}
	}

	mmSecretUpdate.defaultExpectation.params = &CommonAPIClientMockSecretUpdateParams{ctx, id, version, secret}
	for _, e := range mmSecretUpdate.expectations {
		if minimock.Equal(e.params, mmSecretUpdate.defaultExpectation.params) {
			mmSecretUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSecretUpdate.defaultExpectation.params)
		}
	}

	return mmSecretUpdate
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.SecretUpdate
func (mmSecretUpdate *mCommonAPIClientMockSecretUpdate) Inspect(f func(ctx context.Context, id string, version swarm.Version, secret swarm.SecretSpec)) *mCommonAPIClientMockSecretUpdate {
	if mmSecretUpdate.mock.inspectFuncSecretUpdate != nil {
		mmSecretUpdate.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.SecretUpdate")
	}

	mmSecretUpdate.mock.inspectFuncSecretUpdate = f

	return mmSecretUpdate
}

// Return sets up results that will be returned by CommonAPIClient.SecretUpdate
func (mmSecretUpdate *mCommonAPIClientMockSecretUpdate) Return(err error) *CommonAPIClientMock {
	if mmSecretUpdate.mock.funcSecretUpdate != nil {
		mmSecretUpdate.mock.t.Fatalf("CommonAPIClientMock.SecretUpdate mock is already set by Set")
	}

	if mmSecretUpdate.defaultExpectation == nil {
		mmSecretUpdate.defaultExpectation = &CommonAPIClientMockSecretUpdateExpectation{mock: mmSecretUpdate.mock}
	}
	mmSecretUpdate.defaultExpectation.results = &CommonAPIClientMockSecretUpdateResults{err}
	return mmSecretUpdate.mock
}

//Set uses given function f to mock the CommonAPIClient.SecretUpdate method
func (mmSecretUpdate *mCommonAPIClientMockSecretUpdate) Set(f func(ctx context.Context, id string, version swarm.Version, secret swarm.SecretSpec) (err error)) *CommonAPIClientMock {
	if mmSecretUpdate.defaultExpectation != nil {
		mmSecretUpdate.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.SecretUpdate method")
	}

	if len(mmSecretUpdate.expectations) > 0 {
		mmSecretUpdate.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.SecretUpdate method")
	}

	mmSecretUpdate.mock.funcSecretUpdate = f
	return mmSecretUpdate.mock
}

// When sets expectation for the CommonAPIClient.SecretUpdate which will trigger the result defined by the following
// Then helper
func (mmSecretUpdate *mCommonAPIClientMockSecretUpdate) When(ctx context.Context, id string, version swarm.Version, secret swarm.SecretSpec) *CommonAPIClientMockSecretUpdateExpectation {
	if mmSecretUpdate.mock.funcSecretUpdate != nil {
		mmSecretUpdate.mock.t.Fatalf("CommonAPIClientMock.SecretUpdate mock is already set by Set")
	}

	expectation := &CommonAPIClientMockSecretUpdateExpectation{
		mock:   mmSecretUpdate.mock,
		params: &CommonAPIClientMockSecretUpdateParams{ctx, id, version, secret},
	}
	mmSecretUpdate.expectations = append(mmSecretUpdate.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.SecretUpdate return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockSecretUpdateExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockSecretUpdateResults{err}
	return e.mock
}

// SecretUpdate implements client.CommonAPIClient
func (mmSecretUpdate *CommonAPIClientMock) SecretUpdate(ctx context.Context, id string, version swarm.Version, secret swarm.SecretSpec) (err error) {
	mm_atomic.AddUint64(&mmSecretUpdate.beforeSecretUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmSecretUpdate.afterSecretUpdateCounter, 1)

	if mmSecretUpdate.inspectFuncSecretUpdate != nil {
		mmSecretUpdate.inspectFuncSecretUpdate(ctx, id, version, secret)
	}

	mm_params := &CommonAPIClientMockSecretUpdateParams{ctx, id, version, secret}

	// Record call args
	mmSecretUpdate.SecretUpdateMock.mutex.Lock()
	mmSecretUpdate.SecretUpdateMock.callArgs = append(mmSecretUpdate.SecretUpdateMock.callArgs, mm_params)
	mmSecretUpdate.SecretUpdateMock.mutex.Unlock()

	for _, e := range mmSecretUpdate.SecretUpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSecretUpdate.SecretUpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSecretUpdate.SecretUpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmSecretUpdate.SecretUpdateMock.defaultExpectation.params
		mm_got := CommonAPIClientMockSecretUpdateParams{ctx, id, version, secret}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSecretUpdate.t.Errorf("CommonAPIClientMock.SecretUpdate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSecretUpdate.SecretUpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmSecretUpdate.t.Fatal("No results are set for the CommonAPIClientMock.SecretUpdate")
		}
		return (*mm_results).err
	}
	if mmSecretUpdate.funcSecretUpdate != nil {
		return mmSecretUpdate.funcSecretUpdate(ctx, id, version, secret)
	}
	mmSecretUpdate.t.Fatalf("Unexpected call to CommonAPIClientMock.SecretUpdate. %v %v %v %v", ctx, id, version, secret)
	return
}

// SecretUpdateAfterCounter returns a count of finished CommonAPIClientMock.SecretUpdate invocations
func (mmSecretUpdate *CommonAPIClientMock) SecretUpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSecretUpdate.afterSecretUpdateCounter)
}

// SecretUpdateBeforeCounter returns a count of CommonAPIClientMock.SecretUpdate invocations
func (mmSecretUpdate *CommonAPIClientMock) SecretUpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSecretUpdate.beforeSecretUpdateCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.SecretUpdate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSecretUpdate *mCommonAPIClientMockSecretUpdate) Calls() []*CommonAPIClientMockSecretUpdateParams {
	mmSecretUpdate.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockSecretUpdateParams, len(mmSecretUpdate.callArgs))
	copy(argCopy, mmSecretUpdate.callArgs)

	mmSecretUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockSecretUpdateDone returns true if the count of the SecretUpdate invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockSecretUpdateDone() bool {
	for _, e := range m.SecretUpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SecretUpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSecretUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSecretUpdate != nil && mm_atomic.LoadUint64(&m.afterSecretUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockSecretUpdateInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockSecretUpdateInspect() {
	for _, e := range m.SecretUpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.SecretUpdate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SecretUpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSecretUpdateCounter) < 1 {
		if m.SecretUpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.SecretUpdate")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.SecretUpdate with params: %#v", *m.SecretUpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSecretUpdate != nil && mm_atomic.LoadUint64(&m.afterSecretUpdateCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.SecretUpdate")
	}
}

type mCommonAPIClientMockServerVersion struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockServerVersionExpectation
	expectations       []*CommonAPIClientMockServerVersionExpectation

	callArgs []*CommonAPIClientMockServerVersionParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockServerVersionExpectation specifies expectation struct of the CommonAPIClient.ServerVersion
type CommonAPIClientMockServerVersionExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockServerVersionParams
	results *CommonAPIClientMockServerVersionResults
	Counter uint64
}

// CommonAPIClientMockServerVersionParams contains parameters of the CommonAPIClient.ServerVersion
type CommonAPIClientMockServerVersionParams struct {
	ctx context.Context
}

// CommonAPIClientMockServerVersionResults contains results of the CommonAPIClient.ServerVersion
type CommonAPIClientMockServerVersionResults struct {
	v1  types.Version
	err error
}

// Expect sets up expected params for CommonAPIClient.ServerVersion
func (mmServerVersion *mCommonAPIClientMockServerVersion) Expect(ctx context.Context) *mCommonAPIClientMockServerVersion {
	if mmServerVersion.mock.funcServerVersion != nil {
		mmServerVersion.mock.t.Fatalf("CommonAPIClientMock.ServerVersion mock is already set by Set")
	}

	if mmServerVersion.defaultExpectation == nil {
		mmServerVersion.defaultExpectation = &CommonAPIClientMockServerVersionExpectation{}
	}

	mmServerVersion.defaultExpectation.params = &CommonAPIClientMockServerVersionParams{ctx}
	for _, e := range mmServerVersion.expectations {
		if minimock.Equal(e.params, mmServerVersion.defaultExpectation.params) {
			mmServerVersion.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmServerVersion.defaultExpectation.params)
		}
	}

	return mmServerVersion
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ServerVersion
func (mmServerVersion *mCommonAPIClientMockServerVersion) Inspect(f func(ctx context.Context)) *mCommonAPIClientMockServerVersion {
	if mmServerVersion.mock.inspectFuncServerVersion != nil {
		mmServerVersion.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ServerVersion")
	}

	mmServerVersion.mock.inspectFuncServerVersion = f

	return mmServerVersion
}

// Return sets up results that will be returned by CommonAPIClient.ServerVersion
func (mmServerVersion *mCommonAPIClientMockServerVersion) Return(v1 types.Version, err error) *CommonAPIClientMock {
	if mmServerVersion.mock.funcServerVersion != nil {
		mmServerVersion.mock.t.Fatalf("CommonAPIClientMock.ServerVersion mock is already set by Set")
	}

	if mmServerVersion.defaultExpectation == nil {
		mmServerVersion.defaultExpectation = &CommonAPIClientMockServerVersionExpectation{mock: mmServerVersion.mock}
	}
	mmServerVersion.defaultExpectation.results = &CommonAPIClientMockServerVersionResults{v1, err}
	return mmServerVersion.mock
}

//Set uses given function f to mock the CommonAPIClient.ServerVersion method
func (mmServerVersion *mCommonAPIClientMockServerVersion) Set(f func(ctx context.Context) (v1 types.Version, err error)) *CommonAPIClientMock {
	if mmServerVersion.defaultExpectation != nil {
		mmServerVersion.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ServerVersion method")
	}

	if len(mmServerVersion.expectations) > 0 {
		mmServerVersion.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ServerVersion method")
	}

	mmServerVersion.mock.funcServerVersion = f
	return mmServerVersion.mock
}

// When sets expectation for the CommonAPIClient.ServerVersion which will trigger the result defined by the following
// Then helper
func (mmServerVersion *mCommonAPIClientMockServerVersion) When(ctx context.Context) *CommonAPIClientMockServerVersionExpectation {
	if mmServerVersion.mock.funcServerVersion != nil {
		mmServerVersion.mock.t.Fatalf("CommonAPIClientMock.ServerVersion mock is already set by Set")
	}

	expectation := &CommonAPIClientMockServerVersionExpectation{
		mock:   mmServerVersion.mock,
		params: &CommonAPIClientMockServerVersionParams{ctx},
	}
	mmServerVersion.expectations = append(mmServerVersion.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ServerVersion return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockServerVersionExpectation) Then(v1 types.Version, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockServerVersionResults{v1, err}
	return e.mock
}

// ServerVersion implements client.CommonAPIClient
func (mmServerVersion *CommonAPIClientMock) ServerVersion(ctx context.Context) (v1 types.Version, err error) {
	mm_atomic.AddUint64(&mmServerVersion.beforeServerVersionCounter, 1)
	defer mm_atomic.AddUint64(&mmServerVersion.afterServerVersionCounter, 1)

	if mmServerVersion.inspectFuncServerVersion != nil {
		mmServerVersion.inspectFuncServerVersion(ctx)
	}

	mm_params := &CommonAPIClientMockServerVersionParams{ctx}

	// Record call args
	mmServerVersion.ServerVersionMock.mutex.Lock()
	mmServerVersion.ServerVersionMock.callArgs = append(mmServerVersion.ServerVersionMock.callArgs, mm_params)
	mmServerVersion.ServerVersionMock.mutex.Unlock()

	for _, e := range mmServerVersion.ServerVersionMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.v1, e.results.err
		}
	}

	if mmServerVersion.ServerVersionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmServerVersion.ServerVersionMock.defaultExpectation.Counter, 1)
		mm_want := mmServerVersion.ServerVersionMock.defaultExpectation.params
		mm_got := CommonAPIClientMockServerVersionParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmServerVersion.t.Errorf("CommonAPIClientMock.ServerVersion got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmServerVersion.ServerVersionMock.defaultExpectation.results
		if mm_results == nil {
			mmServerVersion.t.Fatal("No results are set for the CommonAPIClientMock.ServerVersion")
		}
		return (*mm_results).v1, (*mm_results).err
	}
	if mmServerVersion.funcServerVersion != nil {
		return mmServerVersion.funcServerVersion(ctx)
	}
	mmServerVersion.t.Fatalf("Unexpected call to CommonAPIClientMock.ServerVersion. %v", ctx)
	return
}

// ServerVersionAfterCounter returns a count of finished CommonAPIClientMock.ServerVersion invocations
func (mmServerVersion *CommonAPIClientMock) ServerVersionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServerVersion.afterServerVersionCounter)
}

// ServerVersionBeforeCounter returns a count of CommonAPIClientMock.ServerVersion invocations
func (mmServerVersion *CommonAPIClientMock) ServerVersionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServerVersion.beforeServerVersionCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ServerVersion.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmServerVersion *mCommonAPIClientMockServerVersion) Calls() []*CommonAPIClientMockServerVersionParams {
	mmServerVersion.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockServerVersionParams, len(mmServerVersion.callArgs))
	copy(argCopy, mmServerVersion.callArgs)

	mmServerVersion.mutex.RUnlock()

	return argCopy
}

// MinimockServerVersionDone returns true if the count of the ServerVersion invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockServerVersionDone() bool {
	for _, e := range m.ServerVersionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServerVersionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServerVersionCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServerVersion != nil && mm_atomic.LoadUint64(&m.afterServerVersionCounter) < 1 {
		return false
	}
	return true
}

// MinimockServerVersionInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockServerVersionInspect() {
	for _, e := range m.ServerVersionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ServerVersion with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServerVersionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServerVersionCounter) < 1 {
		if m.ServerVersionMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ServerVersion")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ServerVersion with params: %#v", *m.ServerVersionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServerVersion != nil && mm_atomic.LoadUint64(&m.afterServerVersionCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ServerVersion")
	}
}

type mCommonAPIClientMockServiceCreate struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockServiceCreateExpectation
	expectations       []*CommonAPIClientMockServiceCreateExpectation

	callArgs []*CommonAPIClientMockServiceCreateParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockServiceCreateExpectation specifies expectation struct of the CommonAPIClient.ServiceCreate
type CommonAPIClientMockServiceCreateExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockServiceCreateParams
	results *CommonAPIClientMockServiceCreateResults
	Counter uint64
}

// CommonAPIClientMockServiceCreateParams contains parameters of the CommonAPIClient.ServiceCreate
type CommonAPIClientMockServiceCreateParams struct {
	ctx     context.Context
	service swarm.ServiceSpec
	options types.ServiceCreateOptions
}

// CommonAPIClientMockServiceCreateResults contains results of the CommonAPIClient.ServiceCreate
type CommonAPIClientMockServiceCreateResults struct {
	s1  types.ServiceCreateResponse
	err error
}

// Expect sets up expected params for CommonAPIClient.ServiceCreate
func (mmServiceCreate *mCommonAPIClientMockServiceCreate) Expect(ctx context.Context, service swarm.ServiceSpec, options types.ServiceCreateOptions) *mCommonAPIClientMockServiceCreate {
	if mmServiceCreate.mock.funcServiceCreate != nil {
		mmServiceCreate.mock.t.Fatalf("CommonAPIClientMock.ServiceCreate mock is already set by Set")
	}

	if mmServiceCreate.defaultExpectation == nil {
		mmServiceCreate.defaultExpectation = &CommonAPIClientMockServiceCreateExpectation{}
	}

	mmServiceCreate.defaultExpectation.params = &CommonAPIClientMockServiceCreateParams{ctx, service, options}
	for _, e := range mmServiceCreate.expectations {
		if minimock.Equal(e.params, mmServiceCreate.defaultExpectation.params) {
			mmServiceCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmServiceCreate.defaultExpectation.params)
		}
	}

	return mmServiceCreate
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ServiceCreate
func (mmServiceCreate *mCommonAPIClientMockServiceCreate) Inspect(f func(ctx context.Context, service swarm.ServiceSpec, options types.ServiceCreateOptions)) *mCommonAPIClientMockServiceCreate {
	if mmServiceCreate.mock.inspectFuncServiceCreate != nil {
		mmServiceCreate.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ServiceCreate")
	}

	mmServiceCreate.mock.inspectFuncServiceCreate = f

	return mmServiceCreate
}

// Return sets up results that will be returned by CommonAPIClient.ServiceCreate
func (mmServiceCreate *mCommonAPIClientMockServiceCreate) Return(s1 types.ServiceCreateResponse, err error) *CommonAPIClientMock {
	if mmServiceCreate.mock.funcServiceCreate != nil {
		mmServiceCreate.mock.t.Fatalf("CommonAPIClientMock.ServiceCreate mock is already set by Set")
	}

	if mmServiceCreate.defaultExpectation == nil {
		mmServiceCreate.defaultExpectation = &CommonAPIClientMockServiceCreateExpectation{mock: mmServiceCreate.mock}
	}
	mmServiceCreate.defaultExpectation.results = &CommonAPIClientMockServiceCreateResults{s1, err}
	return mmServiceCreate.mock
}

//Set uses given function f to mock the CommonAPIClient.ServiceCreate method
func (mmServiceCreate *mCommonAPIClientMockServiceCreate) Set(f func(ctx context.Context, service swarm.ServiceSpec, options types.ServiceCreateOptions) (s1 types.ServiceCreateResponse, err error)) *CommonAPIClientMock {
	if mmServiceCreate.defaultExpectation != nil {
		mmServiceCreate.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ServiceCreate method")
	}

	if len(mmServiceCreate.expectations) > 0 {
		mmServiceCreate.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ServiceCreate method")
	}

	mmServiceCreate.mock.funcServiceCreate = f
	return mmServiceCreate.mock
}

// When sets expectation for the CommonAPIClient.ServiceCreate which will trigger the result defined by the following
// Then helper
func (mmServiceCreate *mCommonAPIClientMockServiceCreate) When(ctx context.Context, service swarm.ServiceSpec, options types.ServiceCreateOptions) *CommonAPIClientMockServiceCreateExpectation {
	if mmServiceCreate.mock.funcServiceCreate != nil {
		mmServiceCreate.mock.t.Fatalf("CommonAPIClientMock.ServiceCreate mock is already set by Set")
	}

	expectation := &CommonAPIClientMockServiceCreateExpectation{
		mock:   mmServiceCreate.mock,
		params: &CommonAPIClientMockServiceCreateParams{ctx, service, options},
	}
	mmServiceCreate.expectations = append(mmServiceCreate.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ServiceCreate return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockServiceCreateExpectation) Then(s1 types.ServiceCreateResponse, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockServiceCreateResults{s1, err}
	return e.mock
}

// ServiceCreate implements client.CommonAPIClient
func (mmServiceCreate *CommonAPIClientMock) ServiceCreate(ctx context.Context, service swarm.ServiceSpec, options types.ServiceCreateOptions) (s1 types.ServiceCreateResponse, err error) {
	mm_atomic.AddUint64(&mmServiceCreate.beforeServiceCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmServiceCreate.afterServiceCreateCounter, 1)

	if mmServiceCreate.inspectFuncServiceCreate != nil {
		mmServiceCreate.inspectFuncServiceCreate(ctx, service, options)
	}

	mm_params := &CommonAPIClientMockServiceCreateParams{ctx, service, options}

	// Record call args
	mmServiceCreate.ServiceCreateMock.mutex.Lock()
	mmServiceCreate.ServiceCreateMock.callArgs = append(mmServiceCreate.ServiceCreateMock.callArgs, mm_params)
	mmServiceCreate.ServiceCreateMock.mutex.Unlock()

	for _, e := range mmServiceCreate.ServiceCreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmServiceCreate.ServiceCreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmServiceCreate.ServiceCreateMock.defaultExpectation.Counter, 1)
		mm_want := mmServiceCreate.ServiceCreateMock.defaultExpectation.params
		mm_got := CommonAPIClientMockServiceCreateParams{ctx, service, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmServiceCreate.t.Errorf("CommonAPIClientMock.ServiceCreate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmServiceCreate.ServiceCreateMock.defaultExpectation.results
		if mm_results == nil {
			mmServiceCreate.t.Fatal("No results are set for the CommonAPIClientMock.ServiceCreate")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmServiceCreate.funcServiceCreate != nil {
		return mmServiceCreate.funcServiceCreate(ctx, service, options)
	}
	mmServiceCreate.t.Fatalf("Unexpected call to CommonAPIClientMock.ServiceCreate. %v %v %v", ctx, service, options)
	return
}

// ServiceCreateAfterCounter returns a count of finished CommonAPIClientMock.ServiceCreate invocations
func (mmServiceCreate *CommonAPIClientMock) ServiceCreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServiceCreate.afterServiceCreateCounter)
}

// ServiceCreateBeforeCounter returns a count of CommonAPIClientMock.ServiceCreate invocations
func (mmServiceCreate *CommonAPIClientMock) ServiceCreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServiceCreate.beforeServiceCreateCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ServiceCreate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmServiceCreate *mCommonAPIClientMockServiceCreate) Calls() []*CommonAPIClientMockServiceCreateParams {
	mmServiceCreate.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockServiceCreateParams, len(mmServiceCreate.callArgs))
	copy(argCopy, mmServiceCreate.callArgs)

	mmServiceCreate.mutex.RUnlock()

	return argCopy
}

// MinimockServiceCreateDone returns true if the count of the ServiceCreate invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockServiceCreateDone() bool {
	for _, e := range m.ServiceCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServiceCreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServiceCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServiceCreate != nil && mm_atomic.LoadUint64(&m.afterServiceCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockServiceCreateInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockServiceCreateInspect() {
	for _, e := range m.ServiceCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ServiceCreate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServiceCreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServiceCreateCounter) < 1 {
		if m.ServiceCreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ServiceCreate")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ServiceCreate with params: %#v", *m.ServiceCreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServiceCreate != nil && mm_atomic.LoadUint64(&m.afterServiceCreateCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ServiceCreate")
	}
}

type mCommonAPIClientMockServiceInspectWithRaw struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockServiceInspectWithRawExpectation
	expectations       []*CommonAPIClientMockServiceInspectWithRawExpectation

	callArgs []*CommonAPIClientMockServiceInspectWithRawParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockServiceInspectWithRawExpectation specifies expectation struct of the CommonAPIClient.ServiceInspectWithRaw
type CommonAPIClientMockServiceInspectWithRawExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockServiceInspectWithRawParams
	results *CommonAPIClientMockServiceInspectWithRawResults
	Counter uint64
}

// CommonAPIClientMockServiceInspectWithRawParams contains parameters of the CommonAPIClient.ServiceInspectWithRaw
type CommonAPIClientMockServiceInspectWithRawParams struct {
	ctx       context.Context
	serviceID string
	options   types.ServiceInspectOptions
}

// CommonAPIClientMockServiceInspectWithRawResults contains results of the CommonAPIClient.ServiceInspectWithRaw
type CommonAPIClientMockServiceInspectWithRawResults struct {
	s1  swarm.Service
	ba1 []byte
	err error
}

// Expect sets up expected params for CommonAPIClient.ServiceInspectWithRaw
func (mmServiceInspectWithRaw *mCommonAPIClientMockServiceInspectWithRaw) Expect(ctx context.Context, serviceID string, options types.ServiceInspectOptions) *mCommonAPIClientMockServiceInspectWithRaw {
	if mmServiceInspectWithRaw.mock.funcServiceInspectWithRaw != nil {
		mmServiceInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.ServiceInspectWithRaw mock is already set by Set")
	}

	if mmServiceInspectWithRaw.defaultExpectation == nil {
		mmServiceInspectWithRaw.defaultExpectation = &CommonAPIClientMockServiceInspectWithRawExpectation{}
	}

	mmServiceInspectWithRaw.defaultExpectation.params = &CommonAPIClientMockServiceInspectWithRawParams{ctx, serviceID, options}
	for _, e := range mmServiceInspectWithRaw.expectations {
		if minimock.Equal(e.params, mmServiceInspectWithRaw.defaultExpectation.params) {
			mmServiceInspectWithRaw.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmServiceInspectWithRaw.defaultExpectation.params)
		}
	}

	return mmServiceInspectWithRaw
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ServiceInspectWithRaw
func (mmServiceInspectWithRaw *mCommonAPIClientMockServiceInspectWithRaw) Inspect(f func(ctx context.Context, serviceID string, options types.ServiceInspectOptions)) *mCommonAPIClientMockServiceInspectWithRaw {
	if mmServiceInspectWithRaw.mock.inspectFuncServiceInspectWithRaw != nil {
		mmServiceInspectWithRaw.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ServiceInspectWithRaw")
	}

	mmServiceInspectWithRaw.mock.inspectFuncServiceInspectWithRaw = f

	return mmServiceInspectWithRaw
}

// Return sets up results that will be returned by CommonAPIClient.ServiceInspectWithRaw
func (mmServiceInspectWithRaw *mCommonAPIClientMockServiceInspectWithRaw) Return(s1 swarm.Service, ba1 []byte, err error) *CommonAPIClientMock {
	if mmServiceInspectWithRaw.mock.funcServiceInspectWithRaw != nil {
		mmServiceInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.ServiceInspectWithRaw mock is already set by Set")
	}

	if mmServiceInspectWithRaw.defaultExpectation == nil {
		mmServiceInspectWithRaw.defaultExpectation = &CommonAPIClientMockServiceInspectWithRawExpectation{mock: mmServiceInspectWithRaw.mock}
	}
	mmServiceInspectWithRaw.defaultExpectation.results = &CommonAPIClientMockServiceInspectWithRawResults{s1, ba1, err}
	return mmServiceInspectWithRaw.mock
}

//Set uses given function f to mock the CommonAPIClient.ServiceInspectWithRaw method
func (mmServiceInspectWithRaw *mCommonAPIClientMockServiceInspectWithRaw) Set(f func(ctx context.Context, serviceID string, options types.ServiceInspectOptions) (s1 swarm.Service, ba1 []byte, err error)) *CommonAPIClientMock {
	if mmServiceInspectWithRaw.defaultExpectation != nil {
		mmServiceInspectWithRaw.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ServiceInspectWithRaw method")
	}

	if len(mmServiceInspectWithRaw.expectations) > 0 {
		mmServiceInspectWithRaw.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ServiceInspectWithRaw method")
	}

	mmServiceInspectWithRaw.mock.funcServiceInspectWithRaw = f
	return mmServiceInspectWithRaw.mock
}

// When sets expectation for the CommonAPIClient.ServiceInspectWithRaw which will trigger the result defined by the following
// Then helper
func (mmServiceInspectWithRaw *mCommonAPIClientMockServiceInspectWithRaw) When(ctx context.Context, serviceID string, options types.ServiceInspectOptions) *CommonAPIClientMockServiceInspectWithRawExpectation {
	if mmServiceInspectWithRaw.mock.funcServiceInspectWithRaw != nil {
		mmServiceInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.ServiceInspectWithRaw mock is already set by Set")
	}

	expectation := &CommonAPIClientMockServiceInspectWithRawExpectation{
		mock:   mmServiceInspectWithRaw.mock,
		params: &CommonAPIClientMockServiceInspectWithRawParams{ctx, serviceID, options},
	}
	mmServiceInspectWithRaw.expectations = append(mmServiceInspectWithRaw.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ServiceInspectWithRaw return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockServiceInspectWithRawExpectation) Then(s1 swarm.Service, ba1 []byte, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockServiceInspectWithRawResults{s1, ba1, err}
	return e.mock
}

// ServiceInspectWithRaw implements client.CommonAPIClient
func (mmServiceInspectWithRaw *CommonAPIClientMock) ServiceInspectWithRaw(ctx context.Context, serviceID string, options types.ServiceInspectOptions) (s1 swarm.Service, ba1 []byte, err error) {
	mm_atomic.AddUint64(&mmServiceInspectWithRaw.beforeServiceInspectWithRawCounter, 1)
	defer mm_atomic.AddUint64(&mmServiceInspectWithRaw.afterServiceInspectWithRawCounter, 1)

	if mmServiceInspectWithRaw.inspectFuncServiceInspectWithRaw != nil {
		mmServiceInspectWithRaw.inspectFuncServiceInspectWithRaw(ctx, serviceID, options)
	}

	mm_params := &CommonAPIClientMockServiceInspectWithRawParams{ctx, serviceID, options}

	// Record call args
	mmServiceInspectWithRaw.ServiceInspectWithRawMock.mutex.Lock()
	mmServiceInspectWithRaw.ServiceInspectWithRawMock.callArgs = append(mmServiceInspectWithRaw.ServiceInspectWithRawMock.callArgs, mm_params)
	mmServiceInspectWithRaw.ServiceInspectWithRawMock.mutex.Unlock()

	for _, e := range mmServiceInspectWithRaw.ServiceInspectWithRawMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.ba1, e.results.err
		}
	}

	if mmServiceInspectWithRaw.ServiceInspectWithRawMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmServiceInspectWithRaw.ServiceInspectWithRawMock.defaultExpectation.Counter, 1)
		mm_want := mmServiceInspectWithRaw.ServiceInspectWithRawMock.defaultExpectation.params
		mm_got := CommonAPIClientMockServiceInspectWithRawParams{ctx, serviceID, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmServiceInspectWithRaw.t.Errorf("CommonAPIClientMock.ServiceInspectWithRaw got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmServiceInspectWithRaw.ServiceInspectWithRawMock.defaultExpectation.results
		if mm_results == nil {
			mmServiceInspectWithRaw.t.Fatal("No results are set for the CommonAPIClientMock.ServiceInspectWithRaw")
		}
		return (*mm_results).s1, (*mm_results).ba1, (*mm_results).err
	}
	if mmServiceInspectWithRaw.funcServiceInspectWithRaw != nil {
		return mmServiceInspectWithRaw.funcServiceInspectWithRaw(ctx, serviceID, options)
	}
	mmServiceInspectWithRaw.t.Fatalf("Unexpected call to CommonAPIClientMock.ServiceInspectWithRaw. %v %v %v", ctx, serviceID, options)
	return
}

// ServiceInspectWithRawAfterCounter returns a count of finished CommonAPIClientMock.ServiceInspectWithRaw invocations
func (mmServiceInspectWithRaw *CommonAPIClientMock) ServiceInspectWithRawAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServiceInspectWithRaw.afterServiceInspectWithRawCounter)
}

// ServiceInspectWithRawBeforeCounter returns a count of CommonAPIClientMock.ServiceInspectWithRaw invocations
func (mmServiceInspectWithRaw *CommonAPIClientMock) ServiceInspectWithRawBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServiceInspectWithRaw.beforeServiceInspectWithRawCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ServiceInspectWithRaw.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmServiceInspectWithRaw *mCommonAPIClientMockServiceInspectWithRaw) Calls() []*CommonAPIClientMockServiceInspectWithRawParams {
	mmServiceInspectWithRaw.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockServiceInspectWithRawParams, len(mmServiceInspectWithRaw.callArgs))
	copy(argCopy, mmServiceInspectWithRaw.callArgs)

	mmServiceInspectWithRaw.mutex.RUnlock()

	return argCopy
}

// MinimockServiceInspectWithRawDone returns true if the count of the ServiceInspectWithRaw invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockServiceInspectWithRawDone() bool {
	for _, e := range m.ServiceInspectWithRawMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServiceInspectWithRawMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServiceInspectWithRawCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServiceInspectWithRaw != nil && mm_atomic.LoadUint64(&m.afterServiceInspectWithRawCounter) < 1 {
		return false
	}
	return true
}

// MinimockServiceInspectWithRawInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockServiceInspectWithRawInspect() {
	for _, e := range m.ServiceInspectWithRawMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ServiceInspectWithRaw with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServiceInspectWithRawMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServiceInspectWithRawCounter) < 1 {
		if m.ServiceInspectWithRawMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ServiceInspectWithRaw")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ServiceInspectWithRaw with params: %#v", *m.ServiceInspectWithRawMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServiceInspectWithRaw != nil && mm_atomic.LoadUint64(&m.afterServiceInspectWithRawCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ServiceInspectWithRaw")
	}
}

type mCommonAPIClientMockServiceList struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockServiceListExpectation
	expectations       []*CommonAPIClientMockServiceListExpectation

	callArgs []*CommonAPIClientMockServiceListParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockServiceListExpectation specifies expectation struct of the CommonAPIClient.ServiceList
type CommonAPIClientMockServiceListExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockServiceListParams
	results *CommonAPIClientMockServiceListResults
	Counter uint64
}

// CommonAPIClientMockServiceListParams contains parameters of the CommonAPIClient.ServiceList
type CommonAPIClientMockServiceListParams struct {
	ctx     context.Context
	options types.ServiceListOptions
}

// CommonAPIClientMockServiceListResults contains results of the CommonAPIClient.ServiceList
type CommonAPIClientMockServiceListResults struct {
	sa1 []swarm.Service
	err error
}

// Expect sets up expected params for CommonAPIClient.ServiceList
func (mmServiceList *mCommonAPIClientMockServiceList) Expect(ctx context.Context, options types.ServiceListOptions) *mCommonAPIClientMockServiceList {
	if mmServiceList.mock.funcServiceList != nil {
		mmServiceList.mock.t.Fatalf("CommonAPIClientMock.ServiceList mock is already set by Set")
	}

	if mmServiceList.defaultExpectation == nil {
		mmServiceList.defaultExpectation = &CommonAPIClientMockServiceListExpectation{}
	}

	mmServiceList.defaultExpectation.params = &CommonAPIClientMockServiceListParams{ctx, options}
	for _, e := range mmServiceList.expectations {
		if minimock.Equal(e.params, mmServiceList.defaultExpectation.params) {
			mmServiceList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmServiceList.defaultExpectation.params)
		}
	}

	return mmServiceList
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ServiceList
func (mmServiceList *mCommonAPIClientMockServiceList) Inspect(f func(ctx context.Context, options types.ServiceListOptions)) *mCommonAPIClientMockServiceList {
	if mmServiceList.mock.inspectFuncServiceList != nil {
		mmServiceList.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ServiceList")
	}

	mmServiceList.mock.inspectFuncServiceList = f

	return mmServiceList
}

// Return sets up results that will be returned by CommonAPIClient.ServiceList
func (mmServiceList *mCommonAPIClientMockServiceList) Return(sa1 []swarm.Service, err error) *CommonAPIClientMock {
	if mmServiceList.mock.funcServiceList != nil {
		mmServiceList.mock.t.Fatalf("CommonAPIClientMock.ServiceList mock is already set by Set")
	}

	if mmServiceList.defaultExpectation == nil {
		mmServiceList.defaultExpectation = &CommonAPIClientMockServiceListExpectation{mock: mmServiceList.mock}
	}
	mmServiceList.defaultExpectation.results = &CommonAPIClientMockServiceListResults{sa1, err}
	return mmServiceList.mock
}

//Set uses given function f to mock the CommonAPIClient.ServiceList method
func (mmServiceList *mCommonAPIClientMockServiceList) Set(f func(ctx context.Context, options types.ServiceListOptions) (sa1 []swarm.Service, err error)) *CommonAPIClientMock {
	if mmServiceList.defaultExpectation != nil {
		mmServiceList.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ServiceList method")
	}

	if len(mmServiceList.expectations) > 0 {
		mmServiceList.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ServiceList method")
	}

	mmServiceList.mock.funcServiceList = f
	return mmServiceList.mock
}

// When sets expectation for the CommonAPIClient.ServiceList which will trigger the result defined by the following
// Then helper
func (mmServiceList *mCommonAPIClientMockServiceList) When(ctx context.Context, options types.ServiceListOptions) *CommonAPIClientMockServiceListExpectation {
	if mmServiceList.mock.funcServiceList != nil {
		mmServiceList.mock.t.Fatalf("CommonAPIClientMock.ServiceList mock is already set by Set")
	}

	expectation := &CommonAPIClientMockServiceListExpectation{
		mock:   mmServiceList.mock,
		params: &CommonAPIClientMockServiceListParams{ctx, options},
	}
	mmServiceList.expectations = append(mmServiceList.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ServiceList return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockServiceListExpectation) Then(sa1 []swarm.Service, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockServiceListResults{sa1, err}
	return e.mock
}

// ServiceList implements client.CommonAPIClient
func (mmServiceList *CommonAPIClientMock) ServiceList(ctx context.Context, options types.ServiceListOptions) (sa1 []swarm.Service, err error) {
	mm_atomic.AddUint64(&mmServiceList.beforeServiceListCounter, 1)
	defer mm_atomic.AddUint64(&mmServiceList.afterServiceListCounter, 1)

	if mmServiceList.inspectFuncServiceList != nil {
		mmServiceList.inspectFuncServiceList(ctx, options)
	}

	mm_params := &CommonAPIClientMockServiceListParams{ctx, options}

	// Record call args
	mmServiceList.ServiceListMock.mutex.Lock()
	mmServiceList.ServiceListMock.callArgs = append(mmServiceList.ServiceListMock.callArgs, mm_params)
	mmServiceList.ServiceListMock.mutex.Unlock()

	for _, e := range mmServiceList.ServiceListMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sa1, e.results.err
		}
	}

	if mmServiceList.ServiceListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmServiceList.ServiceListMock.defaultExpectation.Counter, 1)
		mm_want := mmServiceList.ServiceListMock.defaultExpectation.params
		mm_got := CommonAPIClientMockServiceListParams{ctx, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmServiceList.t.Errorf("CommonAPIClientMock.ServiceList got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmServiceList.ServiceListMock.defaultExpectation.results
		if mm_results == nil {
			mmServiceList.t.Fatal("No results are set for the CommonAPIClientMock.ServiceList")
		}
		return (*mm_results).sa1, (*mm_results).err
	}
	if mmServiceList.funcServiceList != nil {
		return mmServiceList.funcServiceList(ctx, options)
	}
	mmServiceList.t.Fatalf("Unexpected call to CommonAPIClientMock.ServiceList. %v %v", ctx, options)
	return
}

// ServiceListAfterCounter returns a count of finished CommonAPIClientMock.ServiceList invocations
func (mmServiceList *CommonAPIClientMock) ServiceListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServiceList.afterServiceListCounter)
}

// ServiceListBeforeCounter returns a count of CommonAPIClientMock.ServiceList invocations
func (mmServiceList *CommonAPIClientMock) ServiceListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServiceList.beforeServiceListCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ServiceList.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmServiceList *mCommonAPIClientMockServiceList) Calls() []*CommonAPIClientMockServiceListParams {
	mmServiceList.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockServiceListParams, len(mmServiceList.callArgs))
	copy(argCopy, mmServiceList.callArgs)

	mmServiceList.mutex.RUnlock()

	return argCopy
}

// MinimockServiceListDone returns true if the count of the ServiceList invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockServiceListDone() bool {
	for _, e := range m.ServiceListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServiceListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServiceListCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServiceList != nil && mm_atomic.LoadUint64(&m.afterServiceListCounter) < 1 {
		return false
	}
	return true
}

// MinimockServiceListInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockServiceListInspect() {
	for _, e := range m.ServiceListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ServiceList with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServiceListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServiceListCounter) < 1 {
		if m.ServiceListMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ServiceList")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ServiceList with params: %#v", *m.ServiceListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServiceList != nil && mm_atomic.LoadUint64(&m.afterServiceListCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ServiceList")
	}
}

type mCommonAPIClientMockServiceLogs struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockServiceLogsExpectation
	expectations       []*CommonAPIClientMockServiceLogsExpectation

	callArgs []*CommonAPIClientMockServiceLogsParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockServiceLogsExpectation specifies expectation struct of the CommonAPIClient.ServiceLogs
type CommonAPIClientMockServiceLogsExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockServiceLogsParams
	results *CommonAPIClientMockServiceLogsResults
	Counter uint64
}

// CommonAPIClientMockServiceLogsParams contains parameters of the CommonAPIClient.ServiceLogs
type CommonAPIClientMockServiceLogsParams struct {
	ctx       context.Context
	serviceID string
	options   types.ContainerLogsOptions
}

// CommonAPIClientMockServiceLogsResults contains results of the CommonAPIClient.ServiceLogs
type CommonAPIClientMockServiceLogsResults struct {
	r1  io.ReadCloser
	err error
}

// Expect sets up expected params for CommonAPIClient.ServiceLogs
func (mmServiceLogs *mCommonAPIClientMockServiceLogs) Expect(ctx context.Context, serviceID string, options types.ContainerLogsOptions) *mCommonAPIClientMockServiceLogs {
	if mmServiceLogs.mock.funcServiceLogs != nil {
		mmServiceLogs.mock.t.Fatalf("CommonAPIClientMock.ServiceLogs mock is already set by Set")
	}

	if mmServiceLogs.defaultExpectation == nil {
		mmServiceLogs.defaultExpectation = &CommonAPIClientMockServiceLogsExpectation{}
	}

	mmServiceLogs.defaultExpectation.params = &CommonAPIClientMockServiceLogsParams{ctx, serviceID, options}
	for _, e := range mmServiceLogs.expectations {
		if minimock.Equal(e.params, mmServiceLogs.defaultExpectation.params) {
			mmServiceLogs.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmServiceLogs.defaultExpectation.params)
		}
	}

	return mmServiceLogs
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ServiceLogs
func (mmServiceLogs *mCommonAPIClientMockServiceLogs) Inspect(f func(ctx context.Context, serviceID string, options types.ContainerLogsOptions)) *mCommonAPIClientMockServiceLogs {
	if mmServiceLogs.mock.inspectFuncServiceLogs != nil {
		mmServiceLogs.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ServiceLogs")
	}

	mmServiceLogs.mock.inspectFuncServiceLogs = f

	return mmServiceLogs
}

// Return sets up results that will be returned by CommonAPIClient.ServiceLogs
func (mmServiceLogs *mCommonAPIClientMockServiceLogs) Return(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	if mmServiceLogs.mock.funcServiceLogs != nil {
		mmServiceLogs.mock.t.Fatalf("CommonAPIClientMock.ServiceLogs mock is already set by Set")
	}

	if mmServiceLogs.defaultExpectation == nil {
		mmServiceLogs.defaultExpectation = &CommonAPIClientMockServiceLogsExpectation{mock: mmServiceLogs.mock}
	}
	mmServiceLogs.defaultExpectation.results = &CommonAPIClientMockServiceLogsResults{r1, err}
	return mmServiceLogs.mock
}

//Set uses given function f to mock the CommonAPIClient.ServiceLogs method
func (mmServiceLogs *mCommonAPIClientMockServiceLogs) Set(f func(ctx context.Context, serviceID string, options types.ContainerLogsOptions) (r1 io.ReadCloser, err error)) *CommonAPIClientMock {
	if mmServiceLogs.defaultExpectation != nil {
		mmServiceLogs.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ServiceLogs method")
	}

	if len(mmServiceLogs.expectations) > 0 {
		mmServiceLogs.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ServiceLogs method")
	}

	mmServiceLogs.mock.funcServiceLogs = f
	return mmServiceLogs.mock
}

// When sets expectation for the CommonAPIClient.ServiceLogs which will trigger the result defined by the following
// Then helper
func (mmServiceLogs *mCommonAPIClientMockServiceLogs) When(ctx context.Context, serviceID string, options types.ContainerLogsOptions) *CommonAPIClientMockServiceLogsExpectation {
	if mmServiceLogs.mock.funcServiceLogs != nil {
		mmServiceLogs.mock.t.Fatalf("CommonAPIClientMock.ServiceLogs mock is already set by Set")
	}

	expectation := &CommonAPIClientMockServiceLogsExpectation{
		mock:   mmServiceLogs.mock,
		params: &CommonAPIClientMockServiceLogsParams{ctx, serviceID, options},
	}
	mmServiceLogs.expectations = append(mmServiceLogs.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ServiceLogs return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockServiceLogsExpectation) Then(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockServiceLogsResults{r1, err}
	return e.mock
}

// ServiceLogs implements client.CommonAPIClient
func (mmServiceLogs *CommonAPIClientMock) ServiceLogs(ctx context.Context, serviceID string, options types.ContainerLogsOptions) (r1 io.ReadCloser, err error) {
	mm_atomic.AddUint64(&mmServiceLogs.beforeServiceLogsCounter, 1)
	defer mm_atomic.AddUint64(&mmServiceLogs.afterServiceLogsCounter, 1)

	if mmServiceLogs.inspectFuncServiceLogs != nil {
		mmServiceLogs.inspectFuncServiceLogs(ctx, serviceID, options)
	}

	mm_params := &CommonAPIClientMockServiceLogsParams{ctx, serviceID, options}

	// Record call args
	mmServiceLogs.ServiceLogsMock.mutex.Lock()
	mmServiceLogs.ServiceLogsMock.callArgs = append(mmServiceLogs.ServiceLogsMock.callArgs, mm_params)
	mmServiceLogs.ServiceLogsMock.mutex.Unlock()

	for _, e := range mmServiceLogs.ServiceLogsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmServiceLogs.ServiceLogsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmServiceLogs.ServiceLogsMock.defaultExpectation.Counter, 1)
		mm_want := mmServiceLogs.ServiceLogsMock.defaultExpectation.params
		mm_got := CommonAPIClientMockServiceLogsParams{ctx, serviceID, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmServiceLogs.t.Errorf("CommonAPIClientMock.ServiceLogs got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmServiceLogs.ServiceLogsMock.defaultExpectation.results
		if mm_results == nil {
			mmServiceLogs.t.Fatal("No results are set for the CommonAPIClientMock.ServiceLogs")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmServiceLogs.funcServiceLogs != nil {
		return mmServiceLogs.funcServiceLogs(ctx, serviceID, options)
	}
	mmServiceLogs.t.Fatalf("Unexpected call to CommonAPIClientMock.ServiceLogs. %v %v %v", ctx, serviceID, options)
	return
}

// ServiceLogsAfterCounter returns a count of finished CommonAPIClientMock.ServiceLogs invocations
func (mmServiceLogs *CommonAPIClientMock) ServiceLogsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServiceLogs.afterServiceLogsCounter)
}

// ServiceLogsBeforeCounter returns a count of CommonAPIClientMock.ServiceLogs invocations
func (mmServiceLogs *CommonAPIClientMock) ServiceLogsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServiceLogs.beforeServiceLogsCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ServiceLogs.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmServiceLogs *mCommonAPIClientMockServiceLogs) Calls() []*CommonAPIClientMockServiceLogsParams {
	mmServiceLogs.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockServiceLogsParams, len(mmServiceLogs.callArgs))
	copy(argCopy, mmServiceLogs.callArgs)

	mmServiceLogs.mutex.RUnlock()

	return argCopy
}

// MinimockServiceLogsDone returns true if the count of the ServiceLogs invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockServiceLogsDone() bool {
	for _, e := range m.ServiceLogsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServiceLogsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServiceLogsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServiceLogs != nil && mm_atomic.LoadUint64(&m.afterServiceLogsCounter) < 1 {
		return false
	}
	return true
}

// MinimockServiceLogsInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockServiceLogsInspect() {
	for _, e := range m.ServiceLogsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ServiceLogs with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServiceLogsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServiceLogsCounter) < 1 {
		if m.ServiceLogsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ServiceLogs")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ServiceLogs with params: %#v", *m.ServiceLogsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServiceLogs != nil && mm_atomic.LoadUint64(&m.afterServiceLogsCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ServiceLogs")
	}
}

type mCommonAPIClientMockServiceRemove struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockServiceRemoveExpectation
	expectations       []*CommonAPIClientMockServiceRemoveExpectation

	callArgs []*CommonAPIClientMockServiceRemoveParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockServiceRemoveExpectation specifies expectation struct of the CommonAPIClient.ServiceRemove
type CommonAPIClientMockServiceRemoveExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockServiceRemoveParams
	results *CommonAPIClientMockServiceRemoveResults
	Counter uint64
}

// CommonAPIClientMockServiceRemoveParams contains parameters of the CommonAPIClient.ServiceRemove
type CommonAPIClientMockServiceRemoveParams struct {
	ctx       context.Context
	serviceID string
}

// CommonAPIClientMockServiceRemoveResults contains results of the CommonAPIClient.ServiceRemove
type CommonAPIClientMockServiceRemoveResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.ServiceRemove
func (mmServiceRemove *mCommonAPIClientMockServiceRemove) Expect(ctx context.Context, serviceID string) *mCommonAPIClientMockServiceRemove {
	if mmServiceRemove.mock.funcServiceRemove != nil {
		mmServiceRemove.mock.t.Fatalf("CommonAPIClientMock.ServiceRemove mock is already set by Set")
	}

	if mmServiceRemove.defaultExpectation == nil {
		mmServiceRemove.defaultExpectation = &CommonAPIClientMockServiceRemoveExpectation{}
	}

	mmServiceRemove.defaultExpectation.params = &CommonAPIClientMockServiceRemoveParams{ctx, serviceID}
	for _, e := range mmServiceRemove.expectations {
		if minimock.Equal(e.params, mmServiceRemove.defaultExpectation.params) {
			mmServiceRemove.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmServiceRemove.defaultExpectation.params)
		}
	}

	return mmServiceRemove
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ServiceRemove
func (mmServiceRemove *mCommonAPIClientMockServiceRemove) Inspect(f func(ctx context.Context, serviceID string)) *mCommonAPIClientMockServiceRemove {
	if mmServiceRemove.mock.inspectFuncServiceRemove != nil {
		mmServiceRemove.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ServiceRemove")
	}

	mmServiceRemove.mock.inspectFuncServiceRemove = f

	return mmServiceRemove
}

// Return sets up results that will be returned by CommonAPIClient.ServiceRemove
func (mmServiceRemove *mCommonAPIClientMockServiceRemove) Return(err error) *CommonAPIClientMock {
	if mmServiceRemove.mock.funcServiceRemove != nil {
		mmServiceRemove.mock.t.Fatalf("CommonAPIClientMock.ServiceRemove mock is already set by Set")
	}

	if mmServiceRemove.defaultExpectation == nil {
		mmServiceRemove.defaultExpectation = &CommonAPIClientMockServiceRemoveExpectation{mock: mmServiceRemove.mock}
	}
	mmServiceRemove.defaultExpectation.results = &CommonAPIClientMockServiceRemoveResults{err}
	return mmServiceRemove.mock
}

//Set uses given function f to mock the CommonAPIClient.ServiceRemove method
func (mmServiceRemove *mCommonAPIClientMockServiceRemove) Set(f func(ctx context.Context, serviceID string) (err error)) *CommonAPIClientMock {
	if mmServiceRemove.defaultExpectation != nil {
		mmServiceRemove.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ServiceRemove method")
	}

	if len(mmServiceRemove.expectations) > 0 {
		mmServiceRemove.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ServiceRemove method")
	}

	mmServiceRemove.mock.funcServiceRemove = f
	return mmServiceRemove.mock
}

// When sets expectation for the CommonAPIClient.ServiceRemove which will trigger the result defined by the following
// Then helper
func (mmServiceRemove *mCommonAPIClientMockServiceRemove) When(ctx context.Context, serviceID string) *CommonAPIClientMockServiceRemoveExpectation {
	if mmServiceRemove.mock.funcServiceRemove != nil {
		mmServiceRemove.mock.t.Fatalf("CommonAPIClientMock.ServiceRemove mock is already set by Set")
	}

	expectation := &CommonAPIClientMockServiceRemoveExpectation{
		mock:   mmServiceRemove.mock,
		params: &CommonAPIClientMockServiceRemoveParams{ctx, serviceID},
	}
	mmServiceRemove.expectations = append(mmServiceRemove.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ServiceRemove return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockServiceRemoveExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockServiceRemoveResults{err}
	return e.mock
}

// ServiceRemove implements client.CommonAPIClient
func (mmServiceRemove *CommonAPIClientMock) ServiceRemove(ctx context.Context, serviceID string) (err error) {
	mm_atomic.AddUint64(&mmServiceRemove.beforeServiceRemoveCounter, 1)
	defer mm_atomic.AddUint64(&mmServiceRemove.afterServiceRemoveCounter, 1)

	if mmServiceRemove.inspectFuncServiceRemove != nil {
		mmServiceRemove.inspectFuncServiceRemove(ctx, serviceID)
	}

	mm_params := &CommonAPIClientMockServiceRemoveParams{ctx, serviceID}

	// Record call args
	mmServiceRemove.ServiceRemoveMock.mutex.Lock()
	mmServiceRemove.ServiceRemoveMock.callArgs = append(mmServiceRemove.ServiceRemoveMock.callArgs, mm_params)
	mmServiceRemove.ServiceRemoveMock.mutex.Unlock()

	for _, e := range mmServiceRemove.ServiceRemoveMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmServiceRemove.ServiceRemoveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmServiceRemove.ServiceRemoveMock.defaultExpectation.Counter, 1)
		mm_want := mmServiceRemove.ServiceRemoveMock.defaultExpectation.params
		mm_got := CommonAPIClientMockServiceRemoveParams{ctx, serviceID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmServiceRemove.t.Errorf("CommonAPIClientMock.ServiceRemove got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmServiceRemove.ServiceRemoveMock.defaultExpectation.results
		if mm_results == nil {
			mmServiceRemove.t.Fatal("No results are set for the CommonAPIClientMock.ServiceRemove")
		}
		return (*mm_results).err
	}
	if mmServiceRemove.funcServiceRemove != nil {
		return mmServiceRemove.funcServiceRemove(ctx, serviceID)
	}
	mmServiceRemove.t.Fatalf("Unexpected call to CommonAPIClientMock.ServiceRemove. %v %v", ctx, serviceID)
	return
}

// ServiceRemoveAfterCounter returns a count of finished CommonAPIClientMock.ServiceRemove invocations
func (mmServiceRemove *CommonAPIClientMock) ServiceRemoveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServiceRemove.afterServiceRemoveCounter)
}

// ServiceRemoveBeforeCounter returns a count of CommonAPIClientMock.ServiceRemove invocations
func (mmServiceRemove *CommonAPIClientMock) ServiceRemoveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServiceRemove.beforeServiceRemoveCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ServiceRemove.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmServiceRemove *mCommonAPIClientMockServiceRemove) Calls() []*CommonAPIClientMockServiceRemoveParams {
	mmServiceRemove.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockServiceRemoveParams, len(mmServiceRemove.callArgs))
	copy(argCopy, mmServiceRemove.callArgs)

	mmServiceRemove.mutex.RUnlock()

	return argCopy
}

// MinimockServiceRemoveDone returns true if the count of the ServiceRemove invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockServiceRemoveDone() bool {
	for _, e := range m.ServiceRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServiceRemoveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServiceRemoveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServiceRemove != nil && mm_atomic.LoadUint64(&m.afterServiceRemoveCounter) < 1 {
		return false
	}
	return true
}

// MinimockServiceRemoveInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockServiceRemoveInspect() {
	for _, e := range m.ServiceRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ServiceRemove with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServiceRemoveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServiceRemoveCounter) < 1 {
		if m.ServiceRemoveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ServiceRemove")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ServiceRemove with params: %#v", *m.ServiceRemoveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServiceRemove != nil && mm_atomic.LoadUint64(&m.afterServiceRemoveCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ServiceRemove")
	}
}

type mCommonAPIClientMockServiceUpdate struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockServiceUpdateExpectation
	expectations       []*CommonAPIClientMockServiceUpdateExpectation

	callArgs []*CommonAPIClientMockServiceUpdateParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockServiceUpdateExpectation specifies expectation struct of the CommonAPIClient.ServiceUpdate
type CommonAPIClientMockServiceUpdateExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockServiceUpdateParams
	results *CommonAPIClientMockServiceUpdateResults
	Counter uint64
}

// CommonAPIClientMockServiceUpdateParams contains parameters of the CommonAPIClient.ServiceUpdate
type CommonAPIClientMockServiceUpdateParams struct {
	ctx       context.Context
	serviceID string
	version   swarm.Version
	service   swarm.ServiceSpec
	options   types.ServiceUpdateOptions
}

// CommonAPIClientMockServiceUpdateResults contains results of the CommonAPIClient.ServiceUpdate
type CommonAPIClientMockServiceUpdateResults struct {
	s1  types.ServiceUpdateResponse
	err error
}

// Expect sets up expected params for CommonAPIClient.ServiceUpdate
func (mmServiceUpdate *mCommonAPIClientMockServiceUpdate) Expect(ctx context.Context, serviceID string, version swarm.Version, service swarm.ServiceSpec, options types.ServiceUpdateOptions) *mCommonAPIClientMockServiceUpdate {
	if mmServiceUpdate.mock.funcServiceUpdate != nil {
		mmServiceUpdate.mock.t.Fatalf("CommonAPIClientMock.ServiceUpdate mock is already set by Set")
	}

	if mmServiceUpdate.defaultExpectation == nil {
		mmServiceUpdate.defaultExpectation = &CommonAPIClientMockServiceUpdateExpectation{}
	}

	mmServiceUpdate.defaultExpectation.params = &CommonAPIClientMockServiceUpdateParams{ctx, serviceID, version, service, options}
	for _, e := range mmServiceUpdate.expectations {
		if minimock.Equal(e.params, mmServiceUpdate.defaultExpectation.params) {
			mmServiceUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmServiceUpdate.defaultExpectation.params)
		}
	}

	return mmServiceUpdate
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.ServiceUpdate
func (mmServiceUpdate *mCommonAPIClientMockServiceUpdate) Inspect(f func(ctx context.Context, serviceID string, version swarm.Version, service swarm.ServiceSpec, options types.ServiceUpdateOptions)) *mCommonAPIClientMockServiceUpdate {
	if mmServiceUpdate.mock.inspectFuncServiceUpdate != nil {
		mmServiceUpdate.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.ServiceUpdate")
	}

	mmServiceUpdate.mock.inspectFuncServiceUpdate = f

	return mmServiceUpdate
}

// Return sets up results that will be returned by CommonAPIClient.ServiceUpdate
func (mmServiceUpdate *mCommonAPIClientMockServiceUpdate) Return(s1 types.ServiceUpdateResponse, err error) *CommonAPIClientMock {
	if mmServiceUpdate.mock.funcServiceUpdate != nil {
		mmServiceUpdate.mock.t.Fatalf("CommonAPIClientMock.ServiceUpdate mock is already set by Set")
	}

	if mmServiceUpdate.defaultExpectation == nil {
		mmServiceUpdate.defaultExpectation = &CommonAPIClientMockServiceUpdateExpectation{mock: mmServiceUpdate.mock}
	}
	mmServiceUpdate.defaultExpectation.results = &CommonAPIClientMockServiceUpdateResults{s1, err}
	return mmServiceUpdate.mock
}

//Set uses given function f to mock the CommonAPIClient.ServiceUpdate method
func (mmServiceUpdate *mCommonAPIClientMockServiceUpdate) Set(f func(ctx context.Context, serviceID string, version swarm.Version, service swarm.ServiceSpec, options types.ServiceUpdateOptions) (s1 types.ServiceUpdateResponse, err error)) *CommonAPIClientMock {
	if mmServiceUpdate.defaultExpectation != nil {
		mmServiceUpdate.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.ServiceUpdate method")
	}

	if len(mmServiceUpdate.expectations) > 0 {
		mmServiceUpdate.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.ServiceUpdate method")
	}

	mmServiceUpdate.mock.funcServiceUpdate = f
	return mmServiceUpdate.mock
}

// When sets expectation for the CommonAPIClient.ServiceUpdate which will trigger the result defined by the following
// Then helper
func (mmServiceUpdate *mCommonAPIClientMockServiceUpdate) When(ctx context.Context, serviceID string, version swarm.Version, service swarm.ServiceSpec, options types.ServiceUpdateOptions) *CommonAPIClientMockServiceUpdateExpectation {
	if mmServiceUpdate.mock.funcServiceUpdate != nil {
		mmServiceUpdate.mock.t.Fatalf("CommonAPIClientMock.ServiceUpdate mock is already set by Set")
	}

	expectation := &CommonAPIClientMockServiceUpdateExpectation{
		mock:   mmServiceUpdate.mock,
		params: &CommonAPIClientMockServiceUpdateParams{ctx, serviceID, version, service, options},
	}
	mmServiceUpdate.expectations = append(mmServiceUpdate.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.ServiceUpdate return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockServiceUpdateExpectation) Then(s1 types.ServiceUpdateResponse, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockServiceUpdateResults{s1, err}
	return e.mock
}

// ServiceUpdate implements client.CommonAPIClient
func (mmServiceUpdate *CommonAPIClientMock) ServiceUpdate(ctx context.Context, serviceID string, version swarm.Version, service swarm.ServiceSpec, options types.ServiceUpdateOptions) (s1 types.ServiceUpdateResponse, err error) {
	mm_atomic.AddUint64(&mmServiceUpdate.beforeServiceUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmServiceUpdate.afterServiceUpdateCounter, 1)

	if mmServiceUpdate.inspectFuncServiceUpdate != nil {
		mmServiceUpdate.inspectFuncServiceUpdate(ctx, serviceID, version, service, options)
	}

	mm_params := &CommonAPIClientMockServiceUpdateParams{ctx, serviceID, version, service, options}

	// Record call args
	mmServiceUpdate.ServiceUpdateMock.mutex.Lock()
	mmServiceUpdate.ServiceUpdateMock.callArgs = append(mmServiceUpdate.ServiceUpdateMock.callArgs, mm_params)
	mmServiceUpdate.ServiceUpdateMock.mutex.Unlock()

	for _, e := range mmServiceUpdate.ServiceUpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmServiceUpdate.ServiceUpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmServiceUpdate.ServiceUpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmServiceUpdate.ServiceUpdateMock.defaultExpectation.params
		mm_got := CommonAPIClientMockServiceUpdateParams{ctx, serviceID, version, service, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmServiceUpdate.t.Errorf("CommonAPIClientMock.ServiceUpdate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmServiceUpdate.ServiceUpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmServiceUpdate.t.Fatal("No results are set for the CommonAPIClientMock.ServiceUpdate")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmServiceUpdate.funcServiceUpdate != nil {
		return mmServiceUpdate.funcServiceUpdate(ctx, serviceID, version, service, options)
	}
	mmServiceUpdate.t.Fatalf("Unexpected call to CommonAPIClientMock.ServiceUpdate. %v %v %v %v %v", ctx, serviceID, version, service, options)
	return
}

// ServiceUpdateAfterCounter returns a count of finished CommonAPIClientMock.ServiceUpdate invocations
func (mmServiceUpdate *CommonAPIClientMock) ServiceUpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServiceUpdate.afterServiceUpdateCounter)
}

// ServiceUpdateBeforeCounter returns a count of CommonAPIClientMock.ServiceUpdate invocations
func (mmServiceUpdate *CommonAPIClientMock) ServiceUpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmServiceUpdate.beforeServiceUpdateCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.ServiceUpdate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmServiceUpdate *mCommonAPIClientMockServiceUpdate) Calls() []*CommonAPIClientMockServiceUpdateParams {
	mmServiceUpdate.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockServiceUpdateParams, len(mmServiceUpdate.callArgs))
	copy(argCopy, mmServiceUpdate.callArgs)

	mmServiceUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockServiceUpdateDone returns true if the count of the ServiceUpdate invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockServiceUpdateDone() bool {
	for _, e := range m.ServiceUpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServiceUpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServiceUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServiceUpdate != nil && mm_atomic.LoadUint64(&m.afterServiceUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockServiceUpdateInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockServiceUpdateInspect() {
	for _, e := range m.ServiceUpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.ServiceUpdate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ServiceUpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterServiceUpdateCounter) < 1 {
		if m.ServiceUpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.ServiceUpdate")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.ServiceUpdate with params: %#v", *m.ServiceUpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcServiceUpdate != nil && mm_atomic.LoadUint64(&m.afterServiceUpdateCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.ServiceUpdate")
	}
}

type mCommonAPIClientMockSwarmGetUnlockKey struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockSwarmGetUnlockKeyExpectation
	expectations       []*CommonAPIClientMockSwarmGetUnlockKeyExpectation

	callArgs []*CommonAPIClientMockSwarmGetUnlockKeyParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockSwarmGetUnlockKeyExpectation specifies expectation struct of the CommonAPIClient.SwarmGetUnlockKey
type CommonAPIClientMockSwarmGetUnlockKeyExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockSwarmGetUnlockKeyParams
	results *CommonAPIClientMockSwarmGetUnlockKeyResults
	Counter uint64
}

// CommonAPIClientMockSwarmGetUnlockKeyParams contains parameters of the CommonAPIClient.SwarmGetUnlockKey
type CommonAPIClientMockSwarmGetUnlockKeyParams struct {
	ctx context.Context
}

// CommonAPIClientMockSwarmGetUnlockKeyResults contains results of the CommonAPIClient.SwarmGetUnlockKey
type CommonAPIClientMockSwarmGetUnlockKeyResults struct {
	s1  types.SwarmUnlockKeyResponse
	err error
}

// Expect sets up expected params for CommonAPIClient.SwarmGetUnlockKey
func (mmSwarmGetUnlockKey *mCommonAPIClientMockSwarmGetUnlockKey) Expect(ctx context.Context) *mCommonAPIClientMockSwarmGetUnlockKey {
	if mmSwarmGetUnlockKey.mock.funcSwarmGetUnlockKey != nil {
		mmSwarmGetUnlockKey.mock.t.Fatalf("CommonAPIClientMock.SwarmGetUnlockKey mock is already set by Set")
	}

	if mmSwarmGetUnlockKey.defaultExpectation == nil {
		mmSwarmGetUnlockKey.defaultExpectation = &CommonAPIClientMockSwarmGetUnlockKeyExpectation{}
	}

	mmSwarmGetUnlockKey.defaultExpectation.params = &CommonAPIClientMockSwarmGetUnlockKeyParams{ctx}
	for _, e := range mmSwarmGetUnlockKey.expectations {
		if minimock.Equal(e.params, mmSwarmGetUnlockKey.defaultExpectation.params) {
			mmSwarmGetUnlockKey.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSwarmGetUnlockKey.defaultExpectation.params)
		}
	}

	return mmSwarmGetUnlockKey
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.SwarmGetUnlockKey
func (mmSwarmGetUnlockKey *mCommonAPIClientMockSwarmGetUnlockKey) Inspect(f func(ctx context.Context)) *mCommonAPIClientMockSwarmGetUnlockKey {
	if mmSwarmGetUnlockKey.mock.inspectFuncSwarmGetUnlockKey != nil {
		mmSwarmGetUnlockKey.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.SwarmGetUnlockKey")
	}

	mmSwarmGetUnlockKey.mock.inspectFuncSwarmGetUnlockKey = f

	return mmSwarmGetUnlockKey
}

// Return sets up results that will be returned by CommonAPIClient.SwarmGetUnlockKey
func (mmSwarmGetUnlockKey *mCommonAPIClientMockSwarmGetUnlockKey) Return(s1 types.SwarmUnlockKeyResponse, err error) *CommonAPIClientMock {
	if mmSwarmGetUnlockKey.mock.funcSwarmGetUnlockKey != nil {
		mmSwarmGetUnlockKey.mock.t.Fatalf("CommonAPIClientMock.SwarmGetUnlockKey mock is already set by Set")
	}

	if mmSwarmGetUnlockKey.defaultExpectation == nil {
		mmSwarmGetUnlockKey.defaultExpectation = &CommonAPIClientMockSwarmGetUnlockKeyExpectation{mock: mmSwarmGetUnlockKey.mock}
	}
	mmSwarmGetUnlockKey.defaultExpectation.results = &CommonAPIClientMockSwarmGetUnlockKeyResults{s1, err}
	return mmSwarmGetUnlockKey.mock
}

//Set uses given function f to mock the CommonAPIClient.SwarmGetUnlockKey method
func (mmSwarmGetUnlockKey *mCommonAPIClientMockSwarmGetUnlockKey) Set(f func(ctx context.Context) (s1 types.SwarmUnlockKeyResponse, err error)) *CommonAPIClientMock {
	if mmSwarmGetUnlockKey.defaultExpectation != nil {
		mmSwarmGetUnlockKey.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.SwarmGetUnlockKey method")
	}

	if len(mmSwarmGetUnlockKey.expectations) > 0 {
		mmSwarmGetUnlockKey.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.SwarmGetUnlockKey method")
	}

	mmSwarmGetUnlockKey.mock.funcSwarmGetUnlockKey = f
	return mmSwarmGetUnlockKey.mock
}

// When sets expectation for the CommonAPIClient.SwarmGetUnlockKey which will trigger the result defined by the following
// Then helper
func (mmSwarmGetUnlockKey *mCommonAPIClientMockSwarmGetUnlockKey) When(ctx context.Context) *CommonAPIClientMockSwarmGetUnlockKeyExpectation {
	if mmSwarmGetUnlockKey.mock.funcSwarmGetUnlockKey != nil {
		mmSwarmGetUnlockKey.mock.t.Fatalf("CommonAPIClientMock.SwarmGetUnlockKey mock is already set by Set")
	}

	expectation := &CommonAPIClientMockSwarmGetUnlockKeyExpectation{
		mock:   mmSwarmGetUnlockKey.mock,
		params: &CommonAPIClientMockSwarmGetUnlockKeyParams{ctx},
	}
	mmSwarmGetUnlockKey.expectations = append(mmSwarmGetUnlockKey.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.SwarmGetUnlockKey return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockSwarmGetUnlockKeyExpectation) Then(s1 types.SwarmUnlockKeyResponse, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockSwarmGetUnlockKeyResults{s1, err}
	return e.mock
}

// SwarmGetUnlockKey implements client.CommonAPIClient
func (mmSwarmGetUnlockKey *CommonAPIClientMock) SwarmGetUnlockKey(ctx context.Context) (s1 types.SwarmUnlockKeyResponse, err error) {
	mm_atomic.AddUint64(&mmSwarmGetUnlockKey.beforeSwarmGetUnlockKeyCounter, 1)
	defer mm_atomic.AddUint64(&mmSwarmGetUnlockKey.afterSwarmGetUnlockKeyCounter, 1)

	if mmSwarmGetUnlockKey.inspectFuncSwarmGetUnlockKey != nil {
		mmSwarmGetUnlockKey.inspectFuncSwarmGetUnlockKey(ctx)
	}

	mm_params := &CommonAPIClientMockSwarmGetUnlockKeyParams{ctx}

	// Record call args
	mmSwarmGetUnlockKey.SwarmGetUnlockKeyMock.mutex.Lock()
	mmSwarmGetUnlockKey.SwarmGetUnlockKeyMock.callArgs = append(mmSwarmGetUnlockKey.SwarmGetUnlockKeyMock.callArgs, mm_params)
	mmSwarmGetUnlockKey.SwarmGetUnlockKeyMock.mutex.Unlock()

	for _, e := range mmSwarmGetUnlockKey.SwarmGetUnlockKeyMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmSwarmGetUnlockKey.SwarmGetUnlockKeyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSwarmGetUnlockKey.SwarmGetUnlockKeyMock.defaultExpectation.Counter, 1)
		mm_want := mmSwarmGetUnlockKey.SwarmGetUnlockKeyMock.defaultExpectation.params
		mm_got := CommonAPIClientMockSwarmGetUnlockKeyParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSwarmGetUnlockKey.t.Errorf("CommonAPIClientMock.SwarmGetUnlockKey got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSwarmGetUnlockKey.SwarmGetUnlockKeyMock.defaultExpectation.results
		if mm_results == nil {
			mmSwarmGetUnlockKey.t.Fatal("No results are set for the CommonAPIClientMock.SwarmGetUnlockKey")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmSwarmGetUnlockKey.funcSwarmGetUnlockKey != nil {
		return mmSwarmGetUnlockKey.funcSwarmGetUnlockKey(ctx)
	}
	mmSwarmGetUnlockKey.t.Fatalf("Unexpected call to CommonAPIClientMock.SwarmGetUnlockKey. %v", ctx)
	return
}

// SwarmGetUnlockKeyAfterCounter returns a count of finished CommonAPIClientMock.SwarmGetUnlockKey invocations
func (mmSwarmGetUnlockKey *CommonAPIClientMock) SwarmGetUnlockKeyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSwarmGetUnlockKey.afterSwarmGetUnlockKeyCounter)
}

// SwarmGetUnlockKeyBeforeCounter returns a count of CommonAPIClientMock.SwarmGetUnlockKey invocations
func (mmSwarmGetUnlockKey *CommonAPIClientMock) SwarmGetUnlockKeyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSwarmGetUnlockKey.beforeSwarmGetUnlockKeyCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.SwarmGetUnlockKey.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSwarmGetUnlockKey *mCommonAPIClientMockSwarmGetUnlockKey) Calls() []*CommonAPIClientMockSwarmGetUnlockKeyParams {
	mmSwarmGetUnlockKey.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockSwarmGetUnlockKeyParams, len(mmSwarmGetUnlockKey.callArgs))
	copy(argCopy, mmSwarmGetUnlockKey.callArgs)

	mmSwarmGetUnlockKey.mutex.RUnlock()

	return argCopy
}

// MinimockSwarmGetUnlockKeyDone returns true if the count of the SwarmGetUnlockKey invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockSwarmGetUnlockKeyDone() bool {
	for _, e := range m.SwarmGetUnlockKeyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SwarmGetUnlockKeyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSwarmGetUnlockKeyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSwarmGetUnlockKey != nil && mm_atomic.LoadUint64(&m.afterSwarmGetUnlockKeyCounter) < 1 {
		return false
	}
	return true
}

// MinimockSwarmGetUnlockKeyInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockSwarmGetUnlockKeyInspect() {
	for _, e := range m.SwarmGetUnlockKeyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.SwarmGetUnlockKey with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SwarmGetUnlockKeyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSwarmGetUnlockKeyCounter) < 1 {
		if m.SwarmGetUnlockKeyMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.SwarmGetUnlockKey")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.SwarmGetUnlockKey with params: %#v", *m.SwarmGetUnlockKeyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSwarmGetUnlockKey != nil && mm_atomic.LoadUint64(&m.afterSwarmGetUnlockKeyCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.SwarmGetUnlockKey")
	}
}

type mCommonAPIClientMockSwarmInit struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockSwarmInitExpectation
	expectations       []*CommonAPIClientMockSwarmInitExpectation

	callArgs []*CommonAPIClientMockSwarmInitParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockSwarmInitExpectation specifies expectation struct of the CommonAPIClient.SwarmInit
type CommonAPIClientMockSwarmInitExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockSwarmInitParams
	results *CommonAPIClientMockSwarmInitResults
	Counter uint64
}

// CommonAPIClientMockSwarmInitParams contains parameters of the CommonAPIClient.SwarmInit
type CommonAPIClientMockSwarmInitParams struct {
	ctx context.Context
	req swarm.InitRequest
}

// CommonAPIClientMockSwarmInitResults contains results of the CommonAPIClient.SwarmInit
type CommonAPIClientMockSwarmInitResults struct {
	s1  string
	err error
}

// Expect sets up expected params for CommonAPIClient.SwarmInit
func (mmSwarmInit *mCommonAPIClientMockSwarmInit) Expect(ctx context.Context, req swarm.InitRequest) *mCommonAPIClientMockSwarmInit {
	if mmSwarmInit.mock.funcSwarmInit != nil {
		mmSwarmInit.mock.t.Fatalf("CommonAPIClientMock.SwarmInit mock is already set by Set")
	}

	if mmSwarmInit.defaultExpectation == nil {
		mmSwarmInit.defaultExpectation = &CommonAPIClientMockSwarmInitExpectation{}
	}

	mmSwarmInit.defaultExpectation.params = &CommonAPIClientMockSwarmInitParams{ctx, req}
	for _, e := range mmSwarmInit.expectations {
		if minimock.Equal(e.params, mmSwarmInit.defaultExpectation.params) {
			mmSwarmInit.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSwarmInit.defaultExpectation.params)
		}
	}

	return mmSwarmInit
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.SwarmInit
func (mmSwarmInit *mCommonAPIClientMockSwarmInit) Inspect(f func(ctx context.Context, req swarm.InitRequest)) *mCommonAPIClientMockSwarmInit {
	if mmSwarmInit.mock.inspectFuncSwarmInit != nil {
		mmSwarmInit.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.SwarmInit")
	}

	mmSwarmInit.mock.inspectFuncSwarmInit = f

	return mmSwarmInit
}

// Return sets up results that will be returned by CommonAPIClient.SwarmInit
func (mmSwarmInit *mCommonAPIClientMockSwarmInit) Return(s1 string, err error) *CommonAPIClientMock {
	if mmSwarmInit.mock.funcSwarmInit != nil {
		mmSwarmInit.mock.t.Fatalf("CommonAPIClientMock.SwarmInit mock is already set by Set")
	}

	if mmSwarmInit.defaultExpectation == nil {
		mmSwarmInit.defaultExpectation = &CommonAPIClientMockSwarmInitExpectation{mock: mmSwarmInit.mock}
	}
	mmSwarmInit.defaultExpectation.results = &CommonAPIClientMockSwarmInitResults{s1, err}
	return mmSwarmInit.mock
}

//Set uses given function f to mock the CommonAPIClient.SwarmInit method
func (mmSwarmInit *mCommonAPIClientMockSwarmInit) Set(f func(ctx context.Context, req swarm.InitRequest) (s1 string, err error)) *CommonAPIClientMock {
	if mmSwarmInit.defaultExpectation != nil {
		mmSwarmInit.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.SwarmInit method")
	}

	if len(mmSwarmInit.expectations) > 0 {
		mmSwarmInit.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.SwarmInit method")
	}

	mmSwarmInit.mock.funcSwarmInit = f
	return mmSwarmInit.mock
}

// When sets expectation for the CommonAPIClient.SwarmInit which will trigger the result defined by the following
// Then helper
func (mmSwarmInit *mCommonAPIClientMockSwarmInit) When(ctx context.Context, req swarm.InitRequest) *CommonAPIClientMockSwarmInitExpectation {
	if mmSwarmInit.mock.funcSwarmInit != nil {
		mmSwarmInit.mock.t.Fatalf("CommonAPIClientMock.SwarmInit mock is already set by Set")
	}

	expectation := &CommonAPIClientMockSwarmInitExpectation{
		mock:   mmSwarmInit.mock,
		params: &CommonAPIClientMockSwarmInitParams{ctx, req},
	}
	mmSwarmInit.expectations = append(mmSwarmInit.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.SwarmInit return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockSwarmInitExpectation) Then(s1 string, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockSwarmInitResults{s1, err}
	return e.mock
}

// SwarmInit implements client.CommonAPIClient
func (mmSwarmInit *CommonAPIClientMock) SwarmInit(ctx context.Context, req swarm.InitRequest) (s1 string, err error) {
	mm_atomic.AddUint64(&mmSwarmInit.beforeSwarmInitCounter, 1)
	defer mm_atomic.AddUint64(&mmSwarmInit.afterSwarmInitCounter, 1)

	if mmSwarmInit.inspectFuncSwarmInit != nil {
		mmSwarmInit.inspectFuncSwarmInit(ctx, req)
	}

	mm_params := &CommonAPIClientMockSwarmInitParams{ctx, req}

	// Record call args
	mmSwarmInit.SwarmInitMock.mutex.Lock()
	mmSwarmInit.SwarmInitMock.callArgs = append(mmSwarmInit.SwarmInitMock.callArgs, mm_params)
	mmSwarmInit.SwarmInitMock.mutex.Unlock()

	for _, e := range mmSwarmInit.SwarmInitMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmSwarmInit.SwarmInitMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSwarmInit.SwarmInitMock.defaultExpectation.Counter, 1)
		mm_want := mmSwarmInit.SwarmInitMock.defaultExpectation.params
		mm_got := CommonAPIClientMockSwarmInitParams{ctx, req}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSwarmInit.t.Errorf("CommonAPIClientMock.SwarmInit got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSwarmInit.SwarmInitMock.defaultExpectation.results
		if mm_results == nil {
			mmSwarmInit.t.Fatal("No results are set for the CommonAPIClientMock.SwarmInit")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmSwarmInit.funcSwarmInit != nil {
		return mmSwarmInit.funcSwarmInit(ctx, req)
	}
	mmSwarmInit.t.Fatalf("Unexpected call to CommonAPIClientMock.SwarmInit. %v %v", ctx, req)
	return
}

// SwarmInitAfterCounter returns a count of finished CommonAPIClientMock.SwarmInit invocations
func (mmSwarmInit *CommonAPIClientMock) SwarmInitAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSwarmInit.afterSwarmInitCounter)
}

// SwarmInitBeforeCounter returns a count of CommonAPIClientMock.SwarmInit invocations
func (mmSwarmInit *CommonAPIClientMock) SwarmInitBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSwarmInit.beforeSwarmInitCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.SwarmInit.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSwarmInit *mCommonAPIClientMockSwarmInit) Calls() []*CommonAPIClientMockSwarmInitParams {
	mmSwarmInit.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockSwarmInitParams, len(mmSwarmInit.callArgs))
	copy(argCopy, mmSwarmInit.callArgs)

	mmSwarmInit.mutex.RUnlock()

	return argCopy
}

// MinimockSwarmInitDone returns true if the count of the SwarmInit invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockSwarmInitDone() bool {
	for _, e := range m.SwarmInitMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SwarmInitMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSwarmInitCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSwarmInit != nil && mm_atomic.LoadUint64(&m.afterSwarmInitCounter) < 1 {
		return false
	}
	return true
}

// MinimockSwarmInitInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockSwarmInitInspect() {
	for _, e := range m.SwarmInitMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.SwarmInit with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SwarmInitMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSwarmInitCounter) < 1 {
		if m.SwarmInitMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.SwarmInit")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.SwarmInit with params: %#v", *m.SwarmInitMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSwarmInit != nil && mm_atomic.LoadUint64(&m.afterSwarmInitCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.SwarmInit")
	}
}

type mCommonAPIClientMockSwarmInspect struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockSwarmInspectExpectation
	expectations       []*CommonAPIClientMockSwarmInspectExpectation

	callArgs []*CommonAPIClientMockSwarmInspectParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockSwarmInspectExpectation specifies expectation struct of the CommonAPIClient.SwarmInspect
type CommonAPIClientMockSwarmInspectExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockSwarmInspectParams
	results *CommonAPIClientMockSwarmInspectResults
	Counter uint64
}

// CommonAPIClientMockSwarmInspectParams contains parameters of the CommonAPIClient.SwarmInspect
type CommonAPIClientMockSwarmInspectParams struct {
	ctx context.Context
}

// CommonAPIClientMockSwarmInspectResults contains results of the CommonAPIClient.SwarmInspect
type CommonAPIClientMockSwarmInspectResults struct {
	s1  swarm.Swarm
	err error
}

// Expect sets up expected params for CommonAPIClient.SwarmInspect
func (mmSwarmInspect *mCommonAPIClientMockSwarmInspect) Expect(ctx context.Context) *mCommonAPIClientMockSwarmInspect {
	if mmSwarmInspect.mock.funcSwarmInspect != nil {
		mmSwarmInspect.mock.t.Fatalf("CommonAPIClientMock.SwarmInspect mock is already set by Set")
	}

	if mmSwarmInspect.defaultExpectation == nil {
		mmSwarmInspect.defaultExpectation = &CommonAPIClientMockSwarmInspectExpectation{}
	}

	mmSwarmInspect.defaultExpectation.params = &CommonAPIClientMockSwarmInspectParams{ctx}
	for _, e := range mmSwarmInspect.expectations {
		if minimock.Equal(e.params, mmSwarmInspect.defaultExpectation.params) {
			mmSwarmInspect.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSwarmInspect.defaultExpectation.params)
		}
	}

	return mmSwarmInspect
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.SwarmInspect
func (mmSwarmInspect *mCommonAPIClientMockSwarmInspect) Inspect(f func(ctx context.Context)) *mCommonAPIClientMockSwarmInspect {
	if mmSwarmInspect.mock.inspectFuncSwarmInspect != nil {
		mmSwarmInspect.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.SwarmInspect")
	}

	mmSwarmInspect.mock.inspectFuncSwarmInspect = f

	return mmSwarmInspect
}

// Return sets up results that will be returned by CommonAPIClient.SwarmInspect
func (mmSwarmInspect *mCommonAPIClientMockSwarmInspect) Return(s1 swarm.Swarm, err error) *CommonAPIClientMock {
	if mmSwarmInspect.mock.funcSwarmInspect != nil {
		mmSwarmInspect.mock.t.Fatalf("CommonAPIClientMock.SwarmInspect mock is already set by Set")
	}

	if mmSwarmInspect.defaultExpectation == nil {
		mmSwarmInspect.defaultExpectation = &CommonAPIClientMockSwarmInspectExpectation{mock: mmSwarmInspect.mock}
	}
	mmSwarmInspect.defaultExpectation.results = &CommonAPIClientMockSwarmInspectResults{s1, err}
	return mmSwarmInspect.mock
}

//Set uses given function f to mock the CommonAPIClient.SwarmInspect method
func (mmSwarmInspect *mCommonAPIClientMockSwarmInspect) Set(f func(ctx context.Context) (s1 swarm.Swarm, err error)) *CommonAPIClientMock {
	if mmSwarmInspect.defaultExpectation != nil {
		mmSwarmInspect.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.SwarmInspect method")
	}

	if len(mmSwarmInspect.expectations) > 0 {
		mmSwarmInspect.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.SwarmInspect method")
	}

	mmSwarmInspect.mock.funcSwarmInspect = f
	return mmSwarmInspect.mock
}

// When sets expectation for the CommonAPIClient.SwarmInspect which will trigger the result defined by the following
// Then helper
func (mmSwarmInspect *mCommonAPIClientMockSwarmInspect) When(ctx context.Context) *CommonAPIClientMockSwarmInspectExpectation {
	if mmSwarmInspect.mock.funcSwarmInspect != nil {
		mmSwarmInspect.mock.t.Fatalf("CommonAPIClientMock.SwarmInspect mock is already set by Set")
	}

	expectation := &CommonAPIClientMockSwarmInspectExpectation{
		mock:   mmSwarmInspect.mock,
		params: &CommonAPIClientMockSwarmInspectParams{ctx},
	}
	mmSwarmInspect.expectations = append(mmSwarmInspect.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.SwarmInspect return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockSwarmInspectExpectation) Then(s1 swarm.Swarm, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockSwarmInspectResults{s1, err}
	return e.mock
}

// SwarmInspect implements client.CommonAPIClient
func (mmSwarmInspect *CommonAPIClientMock) SwarmInspect(ctx context.Context) (s1 swarm.Swarm, err error) {
	mm_atomic.AddUint64(&mmSwarmInspect.beforeSwarmInspectCounter, 1)
	defer mm_atomic.AddUint64(&mmSwarmInspect.afterSwarmInspectCounter, 1)

	if mmSwarmInspect.inspectFuncSwarmInspect != nil {
		mmSwarmInspect.inspectFuncSwarmInspect(ctx)
	}

	mm_params := &CommonAPIClientMockSwarmInspectParams{ctx}

	// Record call args
	mmSwarmInspect.SwarmInspectMock.mutex.Lock()
	mmSwarmInspect.SwarmInspectMock.callArgs = append(mmSwarmInspect.SwarmInspectMock.callArgs, mm_params)
	mmSwarmInspect.SwarmInspectMock.mutex.Unlock()

	for _, e := range mmSwarmInspect.SwarmInspectMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmSwarmInspect.SwarmInspectMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSwarmInspect.SwarmInspectMock.defaultExpectation.Counter, 1)
		mm_want := mmSwarmInspect.SwarmInspectMock.defaultExpectation.params
		mm_got := CommonAPIClientMockSwarmInspectParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSwarmInspect.t.Errorf("CommonAPIClientMock.SwarmInspect got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSwarmInspect.SwarmInspectMock.defaultExpectation.results
		if mm_results == nil {
			mmSwarmInspect.t.Fatal("No results are set for the CommonAPIClientMock.SwarmInspect")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmSwarmInspect.funcSwarmInspect != nil {
		return mmSwarmInspect.funcSwarmInspect(ctx)
	}
	mmSwarmInspect.t.Fatalf("Unexpected call to CommonAPIClientMock.SwarmInspect. %v", ctx)
	return
}

// SwarmInspectAfterCounter returns a count of finished CommonAPIClientMock.SwarmInspect invocations
func (mmSwarmInspect *CommonAPIClientMock) SwarmInspectAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSwarmInspect.afterSwarmInspectCounter)
}

// SwarmInspectBeforeCounter returns a count of CommonAPIClientMock.SwarmInspect invocations
func (mmSwarmInspect *CommonAPIClientMock) SwarmInspectBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSwarmInspect.beforeSwarmInspectCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.SwarmInspect.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSwarmInspect *mCommonAPIClientMockSwarmInspect) Calls() []*CommonAPIClientMockSwarmInspectParams {
	mmSwarmInspect.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockSwarmInspectParams, len(mmSwarmInspect.callArgs))
	copy(argCopy, mmSwarmInspect.callArgs)

	mmSwarmInspect.mutex.RUnlock()

	return argCopy
}

// MinimockSwarmInspectDone returns true if the count of the SwarmInspect invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockSwarmInspectDone() bool {
	for _, e := range m.SwarmInspectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SwarmInspectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSwarmInspectCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSwarmInspect != nil && mm_atomic.LoadUint64(&m.afterSwarmInspectCounter) < 1 {
		return false
	}
	return true
}

// MinimockSwarmInspectInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockSwarmInspectInspect() {
	for _, e := range m.SwarmInspectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.SwarmInspect with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SwarmInspectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSwarmInspectCounter) < 1 {
		if m.SwarmInspectMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.SwarmInspect")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.SwarmInspect with params: %#v", *m.SwarmInspectMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSwarmInspect != nil && mm_atomic.LoadUint64(&m.afterSwarmInspectCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.SwarmInspect")
	}
}

type mCommonAPIClientMockSwarmJoin struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockSwarmJoinExpectation
	expectations       []*CommonAPIClientMockSwarmJoinExpectation

	callArgs []*CommonAPIClientMockSwarmJoinParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockSwarmJoinExpectation specifies expectation struct of the CommonAPIClient.SwarmJoin
type CommonAPIClientMockSwarmJoinExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockSwarmJoinParams
	results *CommonAPIClientMockSwarmJoinResults
	Counter uint64
}

// CommonAPIClientMockSwarmJoinParams contains parameters of the CommonAPIClient.SwarmJoin
type CommonAPIClientMockSwarmJoinParams struct {
	ctx context.Context
	req swarm.JoinRequest
}

// CommonAPIClientMockSwarmJoinResults contains results of the CommonAPIClient.SwarmJoin
type CommonAPIClientMockSwarmJoinResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.SwarmJoin
func (mmSwarmJoin *mCommonAPIClientMockSwarmJoin) Expect(ctx context.Context, req swarm.JoinRequest) *mCommonAPIClientMockSwarmJoin {
	if mmSwarmJoin.mock.funcSwarmJoin != nil {
		mmSwarmJoin.mock.t.Fatalf("CommonAPIClientMock.SwarmJoin mock is already set by Set")
	}

	if mmSwarmJoin.defaultExpectation == nil {
		mmSwarmJoin.defaultExpectation = &CommonAPIClientMockSwarmJoinExpectation{}
	}

	mmSwarmJoin.defaultExpectation.params = &CommonAPIClientMockSwarmJoinParams{ctx, req}
	for _, e := range mmSwarmJoin.expectations {
		if minimock.Equal(e.params, mmSwarmJoin.defaultExpectation.params) {
			mmSwarmJoin.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSwarmJoin.defaultExpectation.params)
		}
	}

	return mmSwarmJoin
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.SwarmJoin
func (mmSwarmJoin *mCommonAPIClientMockSwarmJoin) Inspect(f func(ctx context.Context, req swarm.JoinRequest)) *mCommonAPIClientMockSwarmJoin {
	if mmSwarmJoin.mock.inspectFuncSwarmJoin != nil {
		mmSwarmJoin.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.SwarmJoin")
	}

	mmSwarmJoin.mock.inspectFuncSwarmJoin = f

	return mmSwarmJoin
}

// Return sets up results that will be returned by CommonAPIClient.SwarmJoin
func (mmSwarmJoin *mCommonAPIClientMockSwarmJoin) Return(err error) *CommonAPIClientMock {
	if mmSwarmJoin.mock.funcSwarmJoin != nil {
		mmSwarmJoin.mock.t.Fatalf("CommonAPIClientMock.SwarmJoin mock is already set by Set")
	}

	if mmSwarmJoin.defaultExpectation == nil {
		mmSwarmJoin.defaultExpectation = &CommonAPIClientMockSwarmJoinExpectation{mock: mmSwarmJoin.mock}
	}
	mmSwarmJoin.defaultExpectation.results = &CommonAPIClientMockSwarmJoinResults{err}
	return mmSwarmJoin.mock
}

//Set uses given function f to mock the CommonAPIClient.SwarmJoin method
func (mmSwarmJoin *mCommonAPIClientMockSwarmJoin) Set(f func(ctx context.Context, req swarm.JoinRequest) (err error)) *CommonAPIClientMock {
	if mmSwarmJoin.defaultExpectation != nil {
		mmSwarmJoin.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.SwarmJoin method")
	}

	if len(mmSwarmJoin.expectations) > 0 {
		mmSwarmJoin.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.SwarmJoin method")
	}

	mmSwarmJoin.mock.funcSwarmJoin = f
	return mmSwarmJoin.mock
}

// When sets expectation for the CommonAPIClient.SwarmJoin which will trigger the result defined by the following
// Then helper
func (mmSwarmJoin *mCommonAPIClientMockSwarmJoin) When(ctx context.Context, req swarm.JoinRequest) *CommonAPIClientMockSwarmJoinExpectation {
	if mmSwarmJoin.mock.funcSwarmJoin != nil {
		mmSwarmJoin.mock.t.Fatalf("CommonAPIClientMock.SwarmJoin mock is already set by Set")
	}

	expectation := &CommonAPIClientMockSwarmJoinExpectation{
		mock:   mmSwarmJoin.mock,
		params: &CommonAPIClientMockSwarmJoinParams{ctx, req},
	}
	mmSwarmJoin.expectations = append(mmSwarmJoin.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.SwarmJoin return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockSwarmJoinExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockSwarmJoinResults{err}
	return e.mock
}

// SwarmJoin implements client.CommonAPIClient
func (mmSwarmJoin *CommonAPIClientMock) SwarmJoin(ctx context.Context, req swarm.JoinRequest) (err error) {
	mm_atomic.AddUint64(&mmSwarmJoin.beforeSwarmJoinCounter, 1)
	defer mm_atomic.AddUint64(&mmSwarmJoin.afterSwarmJoinCounter, 1)

	if mmSwarmJoin.inspectFuncSwarmJoin != nil {
		mmSwarmJoin.inspectFuncSwarmJoin(ctx, req)
	}

	mm_params := &CommonAPIClientMockSwarmJoinParams{ctx, req}

	// Record call args
	mmSwarmJoin.SwarmJoinMock.mutex.Lock()
	mmSwarmJoin.SwarmJoinMock.callArgs = append(mmSwarmJoin.SwarmJoinMock.callArgs, mm_params)
	mmSwarmJoin.SwarmJoinMock.mutex.Unlock()

	for _, e := range mmSwarmJoin.SwarmJoinMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSwarmJoin.SwarmJoinMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSwarmJoin.SwarmJoinMock.defaultExpectation.Counter, 1)
		mm_want := mmSwarmJoin.SwarmJoinMock.defaultExpectation.params
		mm_got := CommonAPIClientMockSwarmJoinParams{ctx, req}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSwarmJoin.t.Errorf("CommonAPIClientMock.SwarmJoin got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSwarmJoin.SwarmJoinMock.defaultExpectation.results
		if mm_results == nil {
			mmSwarmJoin.t.Fatal("No results are set for the CommonAPIClientMock.SwarmJoin")
		}
		return (*mm_results).err
	}
	if mmSwarmJoin.funcSwarmJoin != nil {
		return mmSwarmJoin.funcSwarmJoin(ctx, req)
	}
	mmSwarmJoin.t.Fatalf("Unexpected call to CommonAPIClientMock.SwarmJoin. %v %v", ctx, req)
	return
}

// SwarmJoinAfterCounter returns a count of finished CommonAPIClientMock.SwarmJoin invocations
func (mmSwarmJoin *CommonAPIClientMock) SwarmJoinAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSwarmJoin.afterSwarmJoinCounter)
}

// SwarmJoinBeforeCounter returns a count of CommonAPIClientMock.SwarmJoin invocations
func (mmSwarmJoin *CommonAPIClientMock) SwarmJoinBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSwarmJoin.beforeSwarmJoinCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.SwarmJoin.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSwarmJoin *mCommonAPIClientMockSwarmJoin) Calls() []*CommonAPIClientMockSwarmJoinParams {
	mmSwarmJoin.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockSwarmJoinParams, len(mmSwarmJoin.callArgs))
	copy(argCopy, mmSwarmJoin.callArgs)

	mmSwarmJoin.mutex.RUnlock()

	return argCopy
}

// MinimockSwarmJoinDone returns true if the count of the SwarmJoin invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockSwarmJoinDone() bool {
	for _, e := range m.SwarmJoinMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SwarmJoinMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSwarmJoinCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSwarmJoin != nil && mm_atomic.LoadUint64(&m.afterSwarmJoinCounter) < 1 {
		return false
	}
	return true
}

// MinimockSwarmJoinInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockSwarmJoinInspect() {
	for _, e := range m.SwarmJoinMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.SwarmJoin with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SwarmJoinMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSwarmJoinCounter) < 1 {
		if m.SwarmJoinMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.SwarmJoin")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.SwarmJoin with params: %#v", *m.SwarmJoinMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSwarmJoin != nil && mm_atomic.LoadUint64(&m.afterSwarmJoinCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.SwarmJoin")
	}
}

type mCommonAPIClientMockSwarmLeave struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockSwarmLeaveExpectation
	expectations       []*CommonAPIClientMockSwarmLeaveExpectation

	callArgs []*CommonAPIClientMockSwarmLeaveParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockSwarmLeaveExpectation specifies expectation struct of the CommonAPIClient.SwarmLeave
type CommonAPIClientMockSwarmLeaveExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockSwarmLeaveParams
	results *CommonAPIClientMockSwarmLeaveResults
	Counter uint64
}

// CommonAPIClientMockSwarmLeaveParams contains parameters of the CommonAPIClient.SwarmLeave
type CommonAPIClientMockSwarmLeaveParams struct {
	ctx   context.Context
	force bool
}

// CommonAPIClientMockSwarmLeaveResults contains results of the CommonAPIClient.SwarmLeave
type CommonAPIClientMockSwarmLeaveResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.SwarmLeave
func (mmSwarmLeave *mCommonAPIClientMockSwarmLeave) Expect(ctx context.Context, force bool) *mCommonAPIClientMockSwarmLeave {
	if mmSwarmLeave.mock.funcSwarmLeave != nil {
		mmSwarmLeave.mock.t.Fatalf("CommonAPIClientMock.SwarmLeave mock is already set by Set")
	}

	if mmSwarmLeave.defaultExpectation == nil {
		mmSwarmLeave.defaultExpectation = &CommonAPIClientMockSwarmLeaveExpectation{}
	}

	mmSwarmLeave.defaultExpectation.params = &CommonAPIClientMockSwarmLeaveParams{ctx, force}
	for _, e := range mmSwarmLeave.expectations {
		if minimock.Equal(e.params, mmSwarmLeave.defaultExpectation.params) {
			mmSwarmLeave.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSwarmLeave.defaultExpectation.params)
		}
	}

	return mmSwarmLeave
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.SwarmLeave
func (mmSwarmLeave *mCommonAPIClientMockSwarmLeave) Inspect(f func(ctx context.Context, force bool)) *mCommonAPIClientMockSwarmLeave {
	if mmSwarmLeave.mock.inspectFuncSwarmLeave != nil {
		mmSwarmLeave.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.SwarmLeave")
	}

	mmSwarmLeave.mock.inspectFuncSwarmLeave = f

	return mmSwarmLeave
}

// Return sets up results that will be returned by CommonAPIClient.SwarmLeave
func (mmSwarmLeave *mCommonAPIClientMockSwarmLeave) Return(err error) *CommonAPIClientMock {
	if mmSwarmLeave.mock.funcSwarmLeave != nil {
		mmSwarmLeave.mock.t.Fatalf("CommonAPIClientMock.SwarmLeave mock is already set by Set")
	}

	if mmSwarmLeave.defaultExpectation == nil {
		mmSwarmLeave.defaultExpectation = &CommonAPIClientMockSwarmLeaveExpectation{mock: mmSwarmLeave.mock}
	}
	mmSwarmLeave.defaultExpectation.results = &CommonAPIClientMockSwarmLeaveResults{err}
	return mmSwarmLeave.mock
}

//Set uses given function f to mock the CommonAPIClient.SwarmLeave method
func (mmSwarmLeave *mCommonAPIClientMockSwarmLeave) Set(f func(ctx context.Context, force bool) (err error)) *CommonAPIClientMock {
	if mmSwarmLeave.defaultExpectation != nil {
		mmSwarmLeave.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.SwarmLeave method")
	}

	if len(mmSwarmLeave.expectations) > 0 {
		mmSwarmLeave.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.SwarmLeave method")
	}

	mmSwarmLeave.mock.funcSwarmLeave = f
	return mmSwarmLeave.mock
}

// When sets expectation for the CommonAPIClient.SwarmLeave which will trigger the result defined by the following
// Then helper
func (mmSwarmLeave *mCommonAPIClientMockSwarmLeave) When(ctx context.Context, force bool) *CommonAPIClientMockSwarmLeaveExpectation {
	if mmSwarmLeave.mock.funcSwarmLeave != nil {
		mmSwarmLeave.mock.t.Fatalf("CommonAPIClientMock.SwarmLeave mock is already set by Set")
	}

	expectation := &CommonAPIClientMockSwarmLeaveExpectation{
		mock:   mmSwarmLeave.mock,
		params: &CommonAPIClientMockSwarmLeaveParams{ctx, force},
	}
	mmSwarmLeave.expectations = append(mmSwarmLeave.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.SwarmLeave return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockSwarmLeaveExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockSwarmLeaveResults{err}
	return e.mock
}

// SwarmLeave implements client.CommonAPIClient
func (mmSwarmLeave *CommonAPIClientMock) SwarmLeave(ctx context.Context, force bool) (err error) {
	mm_atomic.AddUint64(&mmSwarmLeave.beforeSwarmLeaveCounter, 1)
	defer mm_atomic.AddUint64(&mmSwarmLeave.afterSwarmLeaveCounter, 1)

	if mmSwarmLeave.inspectFuncSwarmLeave != nil {
		mmSwarmLeave.inspectFuncSwarmLeave(ctx, force)
	}

	mm_params := &CommonAPIClientMockSwarmLeaveParams{ctx, force}

	// Record call args
	mmSwarmLeave.SwarmLeaveMock.mutex.Lock()
	mmSwarmLeave.SwarmLeaveMock.callArgs = append(mmSwarmLeave.SwarmLeaveMock.callArgs, mm_params)
	mmSwarmLeave.SwarmLeaveMock.mutex.Unlock()

	for _, e := range mmSwarmLeave.SwarmLeaveMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSwarmLeave.SwarmLeaveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSwarmLeave.SwarmLeaveMock.defaultExpectation.Counter, 1)
		mm_want := mmSwarmLeave.SwarmLeaveMock.defaultExpectation.params
		mm_got := CommonAPIClientMockSwarmLeaveParams{ctx, force}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSwarmLeave.t.Errorf("CommonAPIClientMock.SwarmLeave got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSwarmLeave.SwarmLeaveMock.defaultExpectation.results
		if mm_results == nil {
			mmSwarmLeave.t.Fatal("No results are set for the CommonAPIClientMock.SwarmLeave")
		}
		return (*mm_results).err
	}
	if mmSwarmLeave.funcSwarmLeave != nil {
		return mmSwarmLeave.funcSwarmLeave(ctx, force)
	}
	mmSwarmLeave.t.Fatalf("Unexpected call to CommonAPIClientMock.SwarmLeave. %v %v", ctx, force)
	return
}

// SwarmLeaveAfterCounter returns a count of finished CommonAPIClientMock.SwarmLeave invocations
func (mmSwarmLeave *CommonAPIClientMock) SwarmLeaveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSwarmLeave.afterSwarmLeaveCounter)
}

// SwarmLeaveBeforeCounter returns a count of CommonAPIClientMock.SwarmLeave invocations
func (mmSwarmLeave *CommonAPIClientMock) SwarmLeaveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSwarmLeave.beforeSwarmLeaveCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.SwarmLeave.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSwarmLeave *mCommonAPIClientMockSwarmLeave) Calls() []*CommonAPIClientMockSwarmLeaveParams {
	mmSwarmLeave.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockSwarmLeaveParams, len(mmSwarmLeave.callArgs))
	copy(argCopy, mmSwarmLeave.callArgs)

	mmSwarmLeave.mutex.RUnlock()

	return argCopy
}

// MinimockSwarmLeaveDone returns true if the count of the SwarmLeave invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockSwarmLeaveDone() bool {
	for _, e := range m.SwarmLeaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SwarmLeaveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSwarmLeaveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSwarmLeave != nil && mm_atomic.LoadUint64(&m.afterSwarmLeaveCounter) < 1 {
		return false
	}
	return true
}

// MinimockSwarmLeaveInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockSwarmLeaveInspect() {
	for _, e := range m.SwarmLeaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.SwarmLeave with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SwarmLeaveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSwarmLeaveCounter) < 1 {
		if m.SwarmLeaveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.SwarmLeave")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.SwarmLeave with params: %#v", *m.SwarmLeaveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSwarmLeave != nil && mm_atomic.LoadUint64(&m.afterSwarmLeaveCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.SwarmLeave")
	}
}

type mCommonAPIClientMockSwarmUnlock struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockSwarmUnlockExpectation
	expectations       []*CommonAPIClientMockSwarmUnlockExpectation

	callArgs []*CommonAPIClientMockSwarmUnlockParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockSwarmUnlockExpectation specifies expectation struct of the CommonAPIClient.SwarmUnlock
type CommonAPIClientMockSwarmUnlockExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockSwarmUnlockParams
	results *CommonAPIClientMockSwarmUnlockResults
	Counter uint64
}

// CommonAPIClientMockSwarmUnlockParams contains parameters of the CommonAPIClient.SwarmUnlock
type CommonAPIClientMockSwarmUnlockParams struct {
	ctx context.Context
	req swarm.UnlockRequest
}

// CommonAPIClientMockSwarmUnlockResults contains results of the CommonAPIClient.SwarmUnlock
type CommonAPIClientMockSwarmUnlockResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.SwarmUnlock
func (mmSwarmUnlock *mCommonAPIClientMockSwarmUnlock) Expect(ctx context.Context, req swarm.UnlockRequest) *mCommonAPIClientMockSwarmUnlock {
	if mmSwarmUnlock.mock.funcSwarmUnlock != nil {
		mmSwarmUnlock.mock.t.Fatalf("CommonAPIClientMock.SwarmUnlock mock is already set by Set")
	}

	if mmSwarmUnlock.defaultExpectation == nil {
		mmSwarmUnlock.defaultExpectation = &CommonAPIClientMockSwarmUnlockExpectation{}
	}

	mmSwarmUnlock.defaultExpectation.params = &CommonAPIClientMockSwarmUnlockParams{ctx, req}
	for _, e := range mmSwarmUnlock.expectations {
		if minimock.Equal(e.params, mmSwarmUnlock.defaultExpectation.params) {
			mmSwarmUnlock.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSwarmUnlock.defaultExpectation.params)
		}
	}

	return mmSwarmUnlock
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.SwarmUnlock
func (mmSwarmUnlock *mCommonAPIClientMockSwarmUnlock) Inspect(f func(ctx context.Context, req swarm.UnlockRequest)) *mCommonAPIClientMockSwarmUnlock {
	if mmSwarmUnlock.mock.inspectFuncSwarmUnlock != nil {
		mmSwarmUnlock.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.SwarmUnlock")
	}

	mmSwarmUnlock.mock.inspectFuncSwarmUnlock = f

	return mmSwarmUnlock
}

// Return sets up results that will be returned by CommonAPIClient.SwarmUnlock
func (mmSwarmUnlock *mCommonAPIClientMockSwarmUnlock) Return(err error) *CommonAPIClientMock {
	if mmSwarmUnlock.mock.funcSwarmUnlock != nil {
		mmSwarmUnlock.mock.t.Fatalf("CommonAPIClientMock.SwarmUnlock mock is already set by Set")
	}

	if mmSwarmUnlock.defaultExpectation == nil {
		mmSwarmUnlock.defaultExpectation = &CommonAPIClientMockSwarmUnlockExpectation{mock: mmSwarmUnlock.mock}
	}
	mmSwarmUnlock.defaultExpectation.results = &CommonAPIClientMockSwarmUnlockResults{err}
	return mmSwarmUnlock.mock
}

//Set uses given function f to mock the CommonAPIClient.SwarmUnlock method
func (mmSwarmUnlock *mCommonAPIClientMockSwarmUnlock) Set(f func(ctx context.Context, req swarm.UnlockRequest) (err error)) *CommonAPIClientMock {
	if mmSwarmUnlock.defaultExpectation != nil {
		mmSwarmUnlock.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.SwarmUnlock method")
	}

	if len(mmSwarmUnlock.expectations) > 0 {
		mmSwarmUnlock.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.SwarmUnlock method")
	}

	mmSwarmUnlock.mock.funcSwarmUnlock = f
	return mmSwarmUnlock.mock
}

// When sets expectation for the CommonAPIClient.SwarmUnlock which will trigger the result defined by the following
// Then helper
func (mmSwarmUnlock *mCommonAPIClientMockSwarmUnlock) When(ctx context.Context, req swarm.UnlockRequest) *CommonAPIClientMockSwarmUnlockExpectation {
	if mmSwarmUnlock.mock.funcSwarmUnlock != nil {
		mmSwarmUnlock.mock.t.Fatalf("CommonAPIClientMock.SwarmUnlock mock is already set by Set")
	}

	expectation := &CommonAPIClientMockSwarmUnlockExpectation{
		mock:   mmSwarmUnlock.mock,
		params: &CommonAPIClientMockSwarmUnlockParams{ctx, req},
	}
	mmSwarmUnlock.expectations = append(mmSwarmUnlock.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.SwarmUnlock return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockSwarmUnlockExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockSwarmUnlockResults{err}
	return e.mock
}

// SwarmUnlock implements client.CommonAPIClient
func (mmSwarmUnlock *CommonAPIClientMock) SwarmUnlock(ctx context.Context, req swarm.UnlockRequest) (err error) {
	mm_atomic.AddUint64(&mmSwarmUnlock.beforeSwarmUnlockCounter, 1)
	defer mm_atomic.AddUint64(&mmSwarmUnlock.afterSwarmUnlockCounter, 1)

	if mmSwarmUnlock.inspectFuncSwarmUnlock != nil {
		mmSwarmUnlock.inspectFuncSwarmUnlock(ctx, req)
	}

	mm_params := &CommonAPIClientMockSwarmUnlockParams{ctx, req}

	// Record call args
	mmSwarmUnlock.SwarmUnlockMock.mutex.Lock()
	mmSwarmUnlock.SwarmUnlockMock.callArgs = append(mmSwarmUnlock.SwarmUnlockMock.callArgs, mm_params)
	mmSwarmUnlock.SwarmUnlockMock.mutex.Unlock()

	for _, e := range mmSwarmUnlock.SwarmUnlockMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSwarmUnlock.SwarmUnlockMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSwarmUnlock.SwarmUnlockMock.defaultExpectation.Counter, 1)
		mm_want := mmSwarmUnlock.SwarmUnlockMock.defaultExpectation.params
		mm_got := CommonAPIClientMockSwarmUnlockParams{ctx, req}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSwarmUnlock.t.Errorf("CommonAPIClientMock.SwarmUnlock got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSwarmUnlock.SwarmUnlockMock.defaultExpectation.results
		if mm_results == nil {
			mmSwarmUnlock.t.Fatal("No results are set for the CommonAPIClientMock.SwarmUnlock")
		}
		return (*mm_results).err
	}
	if mmSwarmUnlock.funcSwarmUnlock != nil {
		return mmSwarmUnlock.funcSwarmUnlock(ctx, req)
	}
	mmSwarmUnlock.t.Fatalf("Unexpected call to CommonAPIClientMock.SwarmUnlock. %v %v", ctx, req)
	return
}

// SwarmUnlockAfterCounter returns a count of finished CommonAPIClientMock.SwarmUnlock invocations
func (mmSwarmUnlock *CommonAPIClientMock) SwarmUnlockAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSwarmUnlock.afterSwarmUnlockCounter)
}

// SwarmUnlockBeforeCounter returns a count of CommonAPIClientMock.SwarmUnlock invocations
func (mmSwarmUnlock *CommonAPIClientMock) SwarmUnlockBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSwarmUnlock.beforeSwarmUnlockCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.SwarmUnlock.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSwarmUnlock *mCommonAPIClientMockSwarmUnlock) Calls() []*CommonAPIClientMockSwarmUnlockParams {
	mmSwarmUnlock.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockSwarmUnlockParams, len(mmSwarmUnlock.callArgs))
	copy(argCopy, mmSwarmUnlock.callArgs)

	mmSwarmUnlock.mutex.RUnlock()

	return argCopy
}

// MinimockSwarmUnlockDone returns true if the count of the SwarmUnlock invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockSwarmUnlockDone() bool {
	for _, e := range m.SwarmUnlockMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SwarmUnlockMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSwarmUnlockCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSwarmUnlock != nil && mm_atomic.LoadUint64(&m.afterSwarmUnlockCounter) < 1 {
		return false
	}
	return true
}

// MinimockSwarmUnlockInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockSwarmUnlockInspect() {
	for _, e := range m.SwarmUnlockMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.SwarmUnlock with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SwarmUnlockMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSwarmUnlockCounter) < 1 {
		if m.SwarmUnlockMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.SwarmUnlock")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.SwarmUnlock with params: %#v", *m.SwarmUnlockMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSwarmUnlock != nil && mm_atomic.LoadUint64(&m.afterSwarmUnlockCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.SwarmUnlock")
	}
}

type mCommonAPIClientMockSwarmUpdate struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockSwarmUpdateExpectation
	expectations       []*CommonAPIClientMockSwarmUpdateExpectation

	callArgs []*CommonAPIClientMockSwarmUpdateParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockSwarmUpdateExpectation specifies expectation struct of the CommonAPIClient.SwarmUpdate
type CommonAPIClientMockSwarmUpdateExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockSwarmUpdateParams
	results *CommonAPIClientMockSwarmUpdateResults
	Counter uint64
}

// CommonAPIClientMockSwarmUpdateParams contains parameters of the CommonAPIClient.SwarmUpdate
type CommonAPIClientMockSwarmUpdateParams struct {
	ctx     context.Context
	version swarm.Version
	swarm   swarm.Spec
	flags   swarm.UpdateFlags
}

// CommonAPIClientMockSwarmUpdateResults contains results of the CommonAPIClient.SwarmUpdate
type CommonAPIClientMockSwarmUpdateResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.SwarmUpdate
func (mmSwarmUpdate *mCommonAPIClientMockSwarmUpdate) Expect(ctx context.Context, version swarm.Version, swarm swarm.Spec, flags swarm.UpdateFlags) *mCommonAPIClientMockSwarmUpdate {
	if mmSwarmUpdate.mock.funcSwarmUpdate != nil {
		mmSwarmUpdate.mock.t.Fatalf("CommonAPIClientMock.SwarmUpdate mock is already set by Set")
	}

	if mmSwarmUpdate.defaultExpectation == nil {
		mmSwarmUpdate.defaultExpectation = &CommonAPIClientMockSwarmUpdateExpectation{}
	}

	mmSwarmUpdate.defaultExpectation.params = &CommonAPIClientMockSwarmUpdateParams{ctx, version, swarm, flags}
	for _, e := range mmSwarmUpdate.expectations {
		if minimock.Equal(e.params, mmSwarmUpdate.defaultExpectation.params) {
			mmSwarmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSwarmUpdate.defaultExpectation.params)
		}
	}

	return mmSwarmUpdate
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.SwarmUpdate
func (mmSwarmUpdate *mCommonAPIClientMockSwarmUpdate) Inspect(f func(ctx context.Context, version swarm.Version, swarm swarm.Spec, flags swarm.UpdateFlags)) *mCommonAPIClientMockSwarmUpdate {
	if mmSwarmUpdate.mock.inspectFuncSwarmUpdate != nil {
		mmSwarmUpdate.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.SwarmUpdate")
	}

	mmSwarmUpdate.mock.inspectFuncSwarmUpdate = f

	return mmSwarmUpdate
}

// Return sets up results that will be returned by CommonAPIClient.SwarmUpdate
func (mmSwarmUpdate *mCommonAPIClientMockSwarmUpdate) Return(err error) *CommonAPIClientMock {
	if mmSwarmUpdate.mock.funcSwarmUpdate != nil {
		mmSwarmUpdate.mock.t.Fatalf("CommonAPIClientMock.SwarmUpdate mock is already set by Set")
	}

	if mmSwarmUpdate.defaultExpectation == nil {
		mmSwarmUpdate.defaultExpectation = &CommonAPIClientMockSwarmUpdateExpectation{mock: mmSwarmUpdate.mock}
	}
	mmSwarmUpdate.defaultExpectation.results = &CommonAPIClientMockSwarmUpdateResults{err}
	return mmSwarmUpdate.mock
}

//Set uses given function f to mock the CommonAPIClient.SwarmUpdate method
func (mmSwarmUpdate *mCommonAPIClientMockSwarmUpdate) Set(f func(ctx context.Context, version swarm.Version, swarm swarm.Spec, flags swarm.UpdateFlags) (err error)) *CommonAPIClientMock {
	if mmSwarmUpdate.defaultExpectation != nil {
		mmSwarmUpdate.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.SwarmUpdate method")
	}

	if len(mmSwarmUpdate.expectations) > 0 {
		mmSwarmUpdate.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.SwarmUpdate method")
	}

	mmSwarmUpdate.mock.funcSwarmUpdate = f
	return mmSwarmUpdate.mock
}

// When sets expectation for the CommonAPIClient.SwarmUpdate which will trigger the result defined by the following
// Then helper
func (mmSwarmUpdate *mCommonAPIClientMockSwarmUpdate) When(ctx context.Context, version swarm.Version, swarm swarm.Spec, flags swarm.UpdateFlags) *CommonAPIClientMockSwarmUpdateExpectation {
	if mmSwarmUpdate.mock.funcSwarmUpdate != nil {
		mmSwarmUpdate.mock.t.Fatalf("CommonAPIClientMock.SwarmUpdate mock is already set by Set")
	}

	expectation := &CommonAPIClientMockSwarmUpdateExpectation{
		mock:   mmSwarmUpdate.mock,
		params: &CommonAPIClientMockSwarmUpdateParams{ctx, version, swarm, flags},
	}
	mmSwarmUpdate.expectations = append(mmSwarmUpdate.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.SwarmUpdate return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockSwarmUpdateExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockSwarmUpdateResults{err}
	return e.mock
}

// SwarmUpdate implements client.CommonAPIClient
func (mmSwarmUpdate *CommonAPIClientMock) SwarmUpdate(ctx context.Context, version swarm.Version, swarm swarm.Spec, flags swarm.UpdateFlags) (err error) {
	mm_atomic.AddUint64(&mmSwarmUpdate.beforeSwarmUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmSwarmUpdate.afterSwarmUpdateCounter, 1)

	if mmSwarmUpdate.inspectFuncSwarmUpdate != nil {
		mmSwarmUpdate.inspectFuncSwarmUpdate(ctx, version, swarm, flags)
	}

	mm_params := &CommonAPIClientMockSwarmUpdateParams{ctx, version, swarm, flags}

	// Record call args
	mmSwarmUpdate.SwarmUpdateMock.mutex.Lock()
	mmSwarmUpdate.SwarmUpdateMock.callArgs = append(mmSwarmUpdate.SwarmUpdateMock.callArgs, mm_params)
	mmSwarmUpdate.SwarmUpdateMock.mutex.Unlock()

	for _, e := range mmSwarmUpdate.SwarmUpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSwarmUpdate.SwarmUpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSwarmUpdate.SwarmUpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmSwarmUpdate.SwarmUpdateMock.defaultExpectation.params
		mm_got := CommonAPIClientMockSwarmUpdateParams{ctx, version, swarm, flags}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSwarmUpdate.t.Errorf("CommonAPIClientMock.SwarmUpdate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSwarmUpdate.SwarmUpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmSwarmUpdate.t.Fatal("No results are set for the CommonAPIClientMock.SwarmUpdate")
		}
		return (*mm_results).err
	}
	if mmSwarmUpdate.funcSwarmUpdate != nil {
		return mmSwarmUpdate.funcSwarmUpdate(ctx, version, swarm, flags)
	}
	mmSwarmUpdate.t.Fatalf("Unexpected call to CommonAPIClientMock.SwarmUpdate. %v %v %v %v", ctx, version, swarm, flags)
	return
}

// SwarmUpdateAfterCounter returns a count of finished CommonAPIClientMock.SwarmUpdate invocations
func (mmSwarmUpdate *CommonAPIClientMock) SwarmUpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSwarmUpdate.afterSwarmUpdateCounter)
}

// SwarmUpdateBeforeCounter returns a count of CommonAPIClientMock.SwarmUpdate invocations
func (mmSwarmUpdate *CommonAPIClientMock) SwarmUpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSwarmUpdate.beforeSwarmUpdateCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.SwarmUpdate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSwarmUpdate *mCommonAPIClientMockSwarmUpdate) Calls() []*CommonAPIClientMockSwarmUpdateParams {
	mmSwarmUpdate.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockSwarmUpdateParams, len(mmSwarmUpdate.callArgs))
	copy(argCopy, mmSwarmUpdate.callArgs)

	mmSwarmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockSwarmUpdateDone returns true if the count of the SwarmUpdate invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockSwarmUpdateDone() bool {
	for _, e := range m.SwarmUpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SwarmUpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSwarmUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSwarmUpdate != nil && mm_atomic.LoadUint64(&m.afterSwarmUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockSwarmUpdateInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockSwarmUpdateInspect() {
	for _, e := range m.SwarmUpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.SwarmUpdate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SwarmUpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSwarmUpdateCounter) < 1 {
		if m.SwarmUpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.SwarmUpdate")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.SwarmUpdate with params: %#v", *m.SwarmUpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSwarmUpdate != nil && mm_atomic.LoadUint64(&m.afterSwarmUpdateCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.SwarmUpdate")
	}
}

type mCommonAPIClientMockTaskInspectWithRaw struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockTaskInspectWithRawExpectation
	expectations       []*CommonAPIClientMockTaskInspectWithRawExpectation

	callArgs []*CommonAPIClientMockTaskInspectWithRawParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockTaskInspectWithRawExpectation specifies expectation struct of the CommonAPIClient.TaskInspectWithRaw
type CommonAPIClientMockTaskInspectWithRawExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockTaskInspectWithRawParams
	results *CommonAPIClientMockTaskInspectWithRawResults
	Counter uint64
}

// CommonAPIClientMockTaskInspectWithRawParams contains parameters of the CommonAPIClient.TaskInspectWithRaw
type CommonAPIClientMockTaskInspectWithRawParams struct {
	ctx    context.Context
	taskID string
}

// CommonAPIClientMockTaskInspectWithRawResults contains results of the CommonAPIClient.TaskInspectWithRaw
type CommonAPIClientMockTaskInspectWithRawResults struct {
	t1  swarm.Task
	ba1 []byte
	err error
}

// Expect sets up expected params for CommonAPIClient.TaskInspectWithRaw
func (mmTaskInspectWithRaw *mCommonAPIClientMockTaskInspectWithRaw) Expect(ctx context.Context, taskID string) *mCommonAPIClientMockTaskInspectWithRaw {
	if mmTaskInspectWithRaw.mock.funcTaskInspectWithRaw != nil {
		mmTaskInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.TaskInspectWithRaw mock is already set by Set")
	}

	if mmTaskInspectWithRaw.defaultExpectation == nil {
		mmTaskInspectWithRaw.defaultExpectation = &CommonAPIClientMockTaskInspectWithRawExpectation{}
	}

	mmTaskInspectWithRaw.defaultExpectation.params = &CommonAPIClientMockTaskInspectWithRawParams{ctx, taskID}
	for _, e := range mmTaskInspectWithRaw.expectations {
		if minimock.Equal(e.params, mmTaskInspectWithRaw.defaultExpectation.params) {
			mmTaskInspectWithRaw.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTaskInspectWithRaw.defaultExpectation.params)
		}
	}

	return mmTaskInspectWithRaw
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.TaskInspectWithRaw
func (mmTaskInspectWithRaw *mCommonAPIClientMockTaskInspectWithRaw) Inspect(f func(ctx context.Context, taskID string)) *mCommonAPIClientMockTaskInspectWithRaw {
	if mmTaskInspectWithRaw.mock.inspectFuncTaskInspectWithRaw != nil {
		mmTaskInspectWithRaw.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.TaskInspectWithRaw")
	}

	mmTaskInspectWithRaw.mock.inspectFuncTaskInspectWithRaw = f

	return mmTaskInspectWithRaw
}

// Return sets up results that will be returned by CommonAPIClient.TaskInspectWithRaw
func (mmTaskInspectWithRaw *mCommonAPIClientMockTaskInspectWithRaw) Return(t1 swarm.Task, ba1 []byte, err error) *CommonAPIClientMock {
	if mmTaskInspectWithRaw.mock.funcTaskInspectWithRaw != nil {
		mmTaskInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.TaskInspectWithRaw mock is already set by Set")
	}

	if mmTaskInspectWithRaw.defaultExpectation == nil {
		mmTaskInspectWithRaw.defaultExpectation = &CommonAPIClientMockTaskInspectWithRawExpectation{mock: mmTaskInspectWithRaw.mock}
	}
	mmTaskInspectWithRaw.defaultExpectation.results = &CommonAPIClientMockTaskInspectWithRawResults{t1, ba1, err}
	return mmTaskInspectWithRaw.mock
}

//Set uses given function f to mock the CommonAPIClient.TaskInspectWithRaw method
func (mmTaskInspectWithRaw *mCommonAPIClientMockTaskInspectWithRaw) Set(f func(ctx context.Context, taskID string) (t1 swarm.Task, ba1 []byte, err error)) *CommonAPIClientMock {
	if mmTaskInspectWithRaw.defaultExpectation != nil {
		mmTaskInspectWithRaw.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.TaskInspectWithRaw method")
	}

	if len(mmTaskInspectWithRaw.expectations) > 0 {
		mmTaskInspectWithRaw.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.TaskInspectWithRaw method")
	}

	mmTaskInspectWithRaw.mock.funcTaskInspectWithRaw = f
	return mmTaskInspectWithRaw.mock
}

// When sets expectation for the CommonAPIClient.TaskInspectWithRaw which will trigger the result defined by the following
// Then helper
func (mmTaskInspectWithRaw *mCommonAPIClientMockTaskInspectWithRaw) When(ctx context.Context, taskID string) *CommonAPIClientMockTaskInspectWithRawExpectation {
	if mmTaskInspectWithRaw.mock.funcTaskInspectWithRaw != nil {
		mmTaskInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.TaskInspectWithRaw mock is already set by Set")
	}

	expectation := &CommonAPIClientMockTaskInspectWithRawExpectation{
		mock:   mmTaskInspectWithRaw.mock,
		params: &CommonAPIClientMockTaskInspectWithRawParams{ctx, taskID},
	}
	mmTaskInspectWithRaw.expectations = append(mmTaskInspectWithRaw.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.TaskInspectWithRaw return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockTaskInspectWithRawExpectation) Then(t1 swarm.Task, ba1 []byte, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockTaskInspectWithRawResults{t1, ba1, err}
	return e.mock
}

// TaskInspectWithRaw implements client.CommonAPIClient
func (mmTaskInspectWithRaw *CommonAPIClientMock) TaskInspectWithRaw(ctx context.Context, taskID string) (t1 swarm.Task, ba1 []byte, err error) {
	mm_atomic.AddUint64(&mmTaskInspectWithRaw.beforeTaskInspectWithRawCounter, 1)
	defer mm_atomic.AddUint64(&mmTaskInspectWithRaw.afterTaskInspectWithRawCounter, 1)

	if mmTaskInspectWithRaw.inspectFuncTaskInspectWithRaw != nil {
		mmTaskInspectWithRaw.inspectFuncTaskInspectWithRaw(ctx, taskID)
	}

	mm_params := &CommonAPIClientMockTaskInspectWithRawParams{ctx, taskID}

	// Record call args
	mmTaskInspectWithRaw.TaskInspectWithRawMock.mutex.Lock()
	mmTaskInspectWithRaw.TaskInspectWithRawMock.callArgs = append(mmTaskInspectWithRaw.TaskInspectWithRawMock.callArgs, mm_params)
	mmTaskInspectWithRaw.TaskInspectWithRawMock.mutex.Unlock()

	for _, e := range mmTaskInspectWithRaw.TaskInspectWithRawMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.t1, e.results.ba1, e.results.err
		}
	}

	if mmTaskInspectWithRaw.TaskInspectWithRawMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTaskInspectWithRaw.TaskInspectWithRawMock.defaultExpectation.Counter, 1)
		mm_want := mmTaskInspectWithRaw.TaskInspectWithRawMock.defaultExpectation.params
		mm_got := CommonAPIClientMockTaskInspectWithRawParams{ctx, taskID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmTaskInspectWithRaw.t.Errorf("CommonAPIClientMock.TaskInspectWithRaw got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmTaskInspectWithRaw.TaskInspectWithRawMock.defaultExpectation.results
		if mm_results == nil {
			mmTaskInspectWithRaw.t.Fatal("No results are set for the CommonAPIClientMock.TaskInspectWithRaw")
		}
		return (*mm_results).t1, (*mm_results).ba1, (*mm_results).err
	}
	if mmTaskInspectWithRaw.funcTaskInspectWithRaw != nil {
		return mmTaskInspectWithRaw.funcTaskInspectWithRaw(ctx, taskID)
	}
	mmTaskInspectWithRaw.t.Fatalf("Unexpected call to CommonAPIClientMock.TaskInspectWithRaw. %v %v", ctx, taskID)
	return
}

// TaskInspectWithRawAfterCounter returns a count of finished CommonAPIClientMock.TaskInspectWithRaw invocations
func (mmTaskInspectWithRaw *CommonAPIClientMock) TaskInspectWithRawAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTaskInspectWithRaw.afterTaskInspectWithRawCounter)
}

// TaskInspectWithRawBeforeCounter returns a count of CommonAPIClientMock.TaskInspectWithRaw invocations
func (mmTaskInspectWithRaw *CommonAPIClientMock) TaskInspectWithRawBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTaskInspectWithRaw.beforeTaskInspectWithRawCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.TaskInspectWithRaw.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTaskInspectWithRaw *mCommonAPIClientMockTaskInspectWithRaw) Calls() []*CommonAPIClientMockTaskInspectWithRawParams {
	mmTaskInspectWithRaw.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockTaskInspectWithRawParams, len(mmTaskInspectWithRaw.callArgs))
	copy(argCopy, mmTaskInspectWithRaw.callArgs)

	mmTaskInspectWithRaw.mutex.RUnlock()

	return argCopy
}

// MinimockTaskInspectWithRawDone returns true if the count of the TaskInspectWithRaw invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockTaskInspectWithRawDone() bool {
	for _, e := range m.TaskInspectWithRawMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TaskInspectWithRawMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTaskInspectWithRawCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTaskInspectWithRaw != nil && mm_atomic.LoadUint64(&m.afterTaskInspectWithRawCounter) < 1 {
		return false
	}
	return true
}

// MinimockTaskInspectWithRawInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockTaskInspectWithRawInspect() {
	for _, e := range m.TaskInspectWithRawMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.TaskInspectWithRaw with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TaskInspectWithRawMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTaskInspectWithRawCounter) < 1 {
		if m.TaskInspectWithRawMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.TaskInspectWithRaw")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.TaskInspectWithRaw with params: %#v", *m.TaskInspectWithRawMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTaskInspectWithRaw != nil && mm_atomic.LoadUint64(&m.afterTaskInspectWithRawCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.TaskInspectWithRaw")
	}
}

type mCommonAPIClientMockTaskList struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockTaskListExpectation
	expectations       []*CommonAPIClientMockTaskListExpectation

	callArgs []*CommonAPIClientMockTaskListParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockTaskListExpectation specifies expectation struct of the CommonAPIClient.TaskList
type CommonAPIClientMockTaskListExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockTaskListParams
	results *CommonAPIClientMockTaskListResults
	Counter uint64
}

// CommonAPIClientMockTaskListParams contains parameters of the CommonAPIClient.TaskList
type CommonAPIClientMockTaskListParams struct {
	ctx     context.Context
	options types.TaskListOptions
}

// CommonAPIClientMockTaskListResults contains results of the CommonAPIClient.TaskList
type CommonAPIClientMockTaskListResults struct {
	ta1 []swarm.Task
	err error
}

// Expect sets up expected params for CommonAPIClient.TaskList
func (mmTaskList *mCommonAPIClientMockTaskList) Expect(ctx context.Context, options types.TaskListOptions) *mCommonAPIClientMockTaskList {
	if mmTaskList.mock.funcTaskList != nil {
		mmTaskList.mock.t.Fatalf("CommonAPIClientMock.TaskList mock is already set by Set")
	}

	if mmTaskList.defaultExpectation == nil {
		mmTaskList.defaultExpectation = &CommonAPIClientMockTaskListExpectation{}
	}

	mmTaskList.defaultExpectation.params = &CommonAPIClientMockTaskListParams{ctx, options}
	for _, e := range mmTaskList.expectations {
		if minimock.Equal(e.params, mmTaskList.defaultExpectation.params) {
			mmTaskList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTaskList.defaultExpectation.params)
		}
	}

	return mmTaskList
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.TaskList
func (mmTaskList *mCommonAPIClientMockTaskList) Inspect(f func(ctx context.Context, options types.TaskListOptions)) *mCommonAPIClientMockTaskList {
	if mmTaskList.mock.inspectFuncTaskList != nil {
		mmTaskList.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.TaskList")
	}

	mmTaskList.mock.inspectFuncTaskList = f

	return mmTaskList
}

// Return sets up results that will be returned by CommonAPIClient.TaskList
func (mmTaskList *mCommonAPIClientMockTaskList) Return(ta1 []swarm.Task, err error) *CommonAPIClientMock {
	if mmTaskList.mock.funcTaskList != nil {
		mmTaskList.mock.t.Fatalf("CommonAPIClientMock.TaskList mock is already set by Set")
	}

	if mmTaskList.defaultExpectation == nil {
		mmTaskList.defaultExpectation = &CommonAPIClientMockTaskListExpectation{mock: mmTaskList.mock}
	}
	mmTaskList.defaultExpectation.results = &CommonAPIClientMockTaskListResults{ta1, err}
	return mmTaskList.mock
}

//Set uses given function f to mock the CommonAPIClient.TaskList method
func (mmTaskList *mCommonAPIClientMockTaskList) Set(f func(ctx context.Context, options types.TaskListOptions) (ta1 []swarm.Task, err error)) *CommonAPIClientMock {
	if mmTaskList.defaultExpectation != nil {
		mmTaskList.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.TaskList method")
	}

	if len(mmTaskList.expectations) > 0 {
		mmTaskList.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.TaskList method")
	}

	mmTaskList.mock.funcTaskList = f
	return mmTaskList.mock
}

// When sets expectation for the CommonAPIClient.TaskList which will trigger the result defined by the following
// Then helper
func (mmTaskList *mCommonAPIClientMockTaskList) When(ctx context.Context, options types.TaskListOptions) *CommonAPIClientMockTaskListExpectation {
	if mmTaskList.mock.funcTaskList != nil {
		mmTaskList.mock.t.Fatalf("CommonAPIClientMock.TaskList mock is already set by Set")
	}

	expectation := &CommonAPIClientMockTaskListExpectation{
		mock:   mmTaskList.mock,
		params: &CommonAPIClientMockTaskListParams{ctx, options},
	}
	mmTaskList.expectations = append(mmTaskList.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.TaskList return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockTaskListExpectation) Then(ta1 []swarm.Task, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockTaskListResults{ta1, err}
	return e.mock
}

// TaskList implements client.CommonAPIClient
func (mmTaskList *CommonAPIClientMock) TaskList(ctx context.Context, options types.TaskListOptions) (ta1 []swarm.Task, err error) {
	mm_atomic.AddUint64(&mmTaskList.beforeTaskListCounter, 1)
	defer mm_atomic.AddUint64(&mmTaskList.afterTaskListCounter, 1)

	if mmTaskList.inspectFuncTaskList != nil {
		mmTaskList.inspectFuncTaskList(ctx, options)
	}

	mm_params := &CommonAPIClientMockTaskListParams{ctx, options}

	// Record call args
	mmTaskList.TaskListMock.mutex.Lock()
	mmTaskList.TaskListMock.callArgs = append(mmTaskList.TaskListMock.callArgs, mm_params)
	mmTaskList.TaskListMock.mutex.Unlock()

	for _, e := range mmTaskList.TaskListMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ta1, e.results.err
		}
	}

	if mmTaskList.TaskListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTaskList.TaskListMock.defaultExpectation.Counter, 1)
		mm_want := mmTaskList.TaskListMock.defaultExpectation.params
		mm_got := CommonAPIClientMockTaskListParams{ctx, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmTaskList.t.Errorf("CommonAPIClientMock.TaskList got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmTaskList.TaskListMock.defaultExpectation.results
		if mm_results == nil {
			mmTaskList.t.Fatal("No results are set for the CommonAPIClientMock.TaskList")
		}
		return (*mm_results).ta1, (*mm_results).err
	}
	if mmTaskList.funcTaskList != nil {
		return mmTaskList.funcTaskList(ctx, options)
	}
	mmTaskList.t.Fatalf("Unexpected call to CommonAPIClientMock.TaskList. %v %v", ctx, options)
	return
}

// TaskListAfterCounter returns a count of finished CommonAPIClientMock.TaskList invocations
func (mmTaskList *CommonAPIClientMock) TaskListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTaskList.afterTaskListCounter)
}

// TaskListBeforeCounter returns a count of CommonAPIClientMock.TaskList invocations
func (mmTaskList *CommonAPIClientMock) TaskListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTaskList.beforeTaskListCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.TaskList.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTaskList *mCommonAPIClientMockTaskList) Calls() []*CommonAPIClientMockTaskListParams {
	mmTaskList.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockTaskListParams, len(mmTaskList.callArgs))
	copy(argCopy, mmTaskList.callArgs)

	mmTaskList.mutex.RUnlock()

	return argCopy
}

// MinimockTaskListDone returns true if the count of the TaskList invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockTaskListDone() bool {
	for _, e := range m.TaskListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TaskListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTaskListCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTaskList != nil && mm_atomic.LoadUint64(&m.afterTaskListCounter) < 1 {
		return false
	}
	return true
}

// MinimockTaskListInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockTaskListInspect() {
	for _, e := range m.TaskListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.TaskList with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TaskListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTaskListCounter) < 1 {
		if m.TaskListMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.TaskList")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.TaskList with params: %#v", *m.TaskListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTaskList != nil && mm_atomic.LoadUint64(&m.afterTaskListCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.TaskList")
	}
}

type mCommonAPIClientMockTaskLogs struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockTaskLogsExpectation
	expectations       []*CommonAPIClientMockTaskLogsExpectation

	callArgs []*CommonAPIClientMockTaskLogsParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockTaskLogsExpectation specifies expectation struct of the CommonAPIClient.TaskLogs
type CommonAPIClientMockTaskLogsExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockTaskLogsParams
	results *CommonAPIClientMockTaskLogsResults
	Counter uint64
}

// CommonAPIClientMockTaskLogsParams contains parameters of the CommonAPIClient.TaskLogs
type CommonAPIClientMockTaskLogsParams struct {
	ctx     context.Context
	taskID  string
	options types.ContainerLogsOptions
}

// CommonAPIClientMockTaskLogsResults contains results of the CommonAPIClient.TaskLogs
type CommonAPIClientMockTaskLogsResults struct {
	r1  io.ReadCloser
	err error
}

// Expect sets up expected params for CommonAPIClient.TaskLogs
func (mmTaskLogs *mCommonAPIClientMockTaskLogs) Expect(ctx context.Context, taskID string, options types.ContainerLogsOptions) *mCommonAPIClientMockTaskLogs {
	if mmTaskLogs.mock.funcTaskLogs != nil {
		mmTaskLogs.mock.t.Fatalf("CommonAPIClientMock.TaskLogs mock is already set by Set")
	}

	if mmTaskLogs.defaultExpectation == nil {
		mmTaskLogs.defaultExpectation = &CommonAPIClientMockTaskLogsExpectation{}
	}

	mmTaskLogs.defaultExpectation.params = &CommonAPIClientMockTaskLogsParams{ctx, taskID, options}
	for _, e := range mmTaskLogs.expectations {
		if minimock.Equal(e.params, mmTaskLogs.defaultExpectation.params) {
			mmTaskLogs.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTaskLogs.defaultExpectation.params)
		}
	}

	return mmTaskLogs
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.TaskLogs
func (mmTaskLogs *mCommonAPIClientMockTaskLogs) Inspect(f func(ctx context.Context, taskID string, options types.ContainerLogsOptions)) *mCommonAPIClientMockTaskLogs {
	if mmTaskLogs.mock.inspectFuncTaskLogs != nil {
		mmTaskLogs.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.TaskLogs")
	}

	mmTaskLogs.mock.inspectFuncTaskLogs = f

	return mmTaskLogs
}

// Return sets up results that will be returned by CommonAPIClient.TaskLogs
func (mmTaskLogs *mCommonAPIClientMockTaskLogs) Return(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	if mmTaskLogs.mock.funcTaskLogs != nil {
		mmTaskLogs.mock.t.Fatalf("CommonAPIClientMock.TaskLogs mock is already set by Set")
	}

	if mmTaskLogs.defaultExpectation == nil {
		mmTaskLogs.defaultExpectation = &CommonAPIClientMockTaskLogsExpectation{mock: mmTaskLogs.mock}
	}
	mmTaskLogs.defaultExpectation.results = &CommonAPIClientMockTaskLogsResults{r1, err}
	return mmTaskLogs.mock
}

//Set uses given function f to mock the CommonAPIClient.TaskLogs method
func (mmTaskLogs *mCommonAPIClientMockTaskLogs) Set(f func(ctx context.Context, taskID string, options types.ContainerLogsOptions) (r1 io.ReadCloser, err error)) *CommonAPIClientMock {
	if mmTaskLogs.defaultExpectation != nil {
		mmTaskLogs.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.TaskLogs method")
	}

	if len(mmTaskLogs.expectations) > 0 {
		mmTaskLogs.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.TaskLogs method")
	}

	mmTaskLogs.mock.funcTaskLogs = f
	return mmTaskLogs.mock
}

// When sets expectation for the CommonAPIClient.TaskLogs which will trigger the result defined by the following
// Then helper
func (mmTaskLogs *mCommonAPIClientMockTaskLogs) When(ctx context.Context, taskID string, options types.ContainerLogsOptions) *CommonAPIClientMockTaskLogsExpectation {
	if mmTaskLogs.mock.funcTaskLogs != nil {
		mmTaskLogs.mock.t.Fatalf("CommonAPIClientMock.TaskLogs mock is already set by Set")
	}

	expectation := &CommonAPIClientMockTaskLogsExpectation{
		mock:   mmTaskLogs.mock,
		params: &CommonAPIClientMockTaskLogsParams{ctx, taskID, options},
	}
	mmTaskLogs.expectations = append(mmTaskLogs.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.TaskLogs return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockTaskLogsExpectation) Then(r1 io.ReadCloser, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockTaskLogsResults{r1, err}
	return e.mock
}

// TaskLogs implements client.CommonAPIClient
func (mmTaskLogs *CommonAPIClientMock) TaskLogs(ctx context.Context, taskID string, options types.ContainerLogsOptions) (r1 io.ReadCloser, err error) {
	mm_atomic.AddUint64(&mmTaskLogs.beforeTaskLogsCounter, 1)
	defer mm_atomic.AddUint64(&mmTaskLogs.afterTaskLogsCounter, 1)

	if mmTaskLogs.inspectFuncTaskLogs != nil {
		mmTaskLogs.inspectFuncTaskLogs(ctx, taskID, options)
	}

	mm_params := &CommonAPIClientMockTaskLogsParams{ctx, taskID, options}

	// Record call args
	mmTaskLogs.TaskLogsMock.mutex.Lock()
	mmTaskLogs.TaskLogsMock.callArgs = append(mmTaskLogs.TaskLogsMock.callArgs, mm_params)
	mmTaskLogs.TaskLogsMock.mutex.Unlock()

	for _, e := range mmTaskLogs.TaskLogsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmTaskLogs.TaskLogsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTaskLogs.TaskLogsMock.defaultExpectation.Counter, 1)
		mm_want := mmTaskLogs.TaskLogsMock.defaultExpectation.params
		mm_got := CommonAPIClientMockTaskLogsParams{ctx, taskID, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmTaskLogs.t.Errorf("CommonAPIClientMock.TaskLogs got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmTaskLogs.TaskLogsMock.defaultExpectation.results
		if mm_results == nil {
			mmTaskLogs.t.Fatal("No results are set for the CommonAPIClientMock.TaskLogs")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmTaskLogs.funcTaskLogs != nil {
		return mmTaskLogs.funcTaskLogs(ctx, taskID, options)
	}
	mmTaskLogs.t.Fatalf("Unexpected call to CommonAPIClientMock.TaskLogs. %v %v %v", ctx, taskID, options)
	return
}

// TaskLogsAfterCounter returns a count of finished CommonAPIClientMock.TaskLogs invocations
func (mmTaskLogs *CommonAPIClientMock) TaskLogsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTaskLogs.afterTaskLogsCounter)
}

// TaskLogsBeforeCounter returns a count of CommonAPIClientMock.TaskLogs invocations
func (mmTaskLogs *CommonAPIClientMock) TaskLogsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTaskLogs.beforeTaskLogsCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.TaskLogs.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTaskLogs *mCommonAPIClientMockTaskLogs) Calls() []*CommonAPIClientMockTaskLogsParams {
	mmTaskLogs.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockTaskLogsParams, len(mmTaskLogs.callArgs))
	copy(argCopy, mmTaskLogs.callArgs)

	mmTaskLogs.mutex.RUnlock()

	return argCopy
}

// MinimockTaskLogsDone returns true if the count of the TaskLogs invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockTaskLogsDone() bool {
	for _, e := range m.TaskLogsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TaskLogsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTaskLogsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTaskLogs != nil && mm_atomic.LoadUint64(&m.afterTaskLogsCounter) < 1 {
		return false
	}
	return true
}

// MinimockTaskLogsInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockTaskLogsInspect() {
	for _, e := range m.TaskLogsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.TaskLogs with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TaskLogsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTaskLogsCounter) < 1 {
		if m.TaskLogsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.TaskLogs")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.TaskLogs with params: %#v", *m.TaskLogsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTaskLogs != nil && mm_atomic.LoadUint64(&m.afterTaskLogsCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.TaskLogs")
	}
}

type mCommonAPIClientMockVolumeCreate struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockVolumeCreateExpectation
	expectations       []*CommonAPIClientMockVolumeCreateExpectation

	callArgs []*CommonAPIClientMockVolumeCreateParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockVolumeCreateExpectation specifies expectation struct of the CommonAPIClient.VolumeCreate
type CommonAPIClientMockVolumeCreateExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockVolumeCreateParams
	results *CommonAPIClientMockVolumeCreateResults
	Counter uint64
}

// CommonAPIClientMockVolumeCreateParams contains parameters of the CommonAPIClient.VolumeCreate
type CommonAPIClientMockVolumeCreateParams struct {
	ctx     context.Context
	options volumetypes.VolumeCreateBody
}

// CommonAPIClientMockVolumeCreateResults contains results of the CommonAPIClient.VolumeCreate
type CommonAPIClientMockVolumeCreateResults struct {
	v1  types.Volume
	err error
}

// Expect sets up expected params for CommonAPIClient.VolumeCreate
func (mmVolumeCreate *mCommonAPIClientMockVolumeCreate) Expect(ctx context.Context, options volumetypes.VolumeCreateBody) *mCommonAPIClientMockVolumeCreate {
	if mmVolumeCreate.mock.funcVolumeCreate != nil {
		mmVolumeCreate.mock.t.Fatalf("CommonAPIClientMock.VolumeCreate mock is already set by Set")
	}

	if mmVolumeCreate.defaultExpectation == nil {
		mmVolumeCreate.defaultExpectation = &CommonAPIClientMockVolumeCreateExpectation{}
	}

	mmVolumeCreate.defaultExpectation.params = &CommonAPIClientMockVolumeCreateParams{ctx, options}
	for _, e := range mmVolumeCreate.expectations {
		if minimock.Equal(e.params, mmVolumeCreate.defaultExpectation.params) {
			mmVolumeCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmVolumeCreate.defaultExpectation.params)
		}
	}

	return mmVolumeCreate
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.VolumeCreate
func (mmVolumeCreate *mCommonAPIClientMockVolumeCreate) Inspect(f func(ctx context.Context, options volumetypes.VolumeCreateBody)) *mCommonAPIClientMockVolumeCreate {
	if mmVolumeCreate.mock.inspectFuncVolumeCreate != nil {
		mmVolumeCreate.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.VolumeCreate")
	}

	mmVolumeCreate.mock.inspectFuncVolumeCreate = f

	return mmVolumeCreate
}

// Return sets up results that will be returned by CommonAPIClient.VolumeCreate
func (mmVolumeCreate *mCommonAPIClientMockVolumeCreate) Return(v1 types.Volume, err error) *CommonAPIClientMock {
	if mmVolumeCreate.mock.funcVolumeCreate != nil {
		mmVolumeCreate.mock.t.Fatalf("CommonAPIClientMock.VolumeCreate mock is already set by Set")
	}

	if mmVolumeCreate.defaultExpectation == nil {
		mmVolumeCreate.defaultExpectation = &CommonAPIClientMockVolumeCreateExpectation{mock: mmVolumeCreate.mock}
	}
	mmVolumeCreate.defaultExpectation.results = &CommonAPIClientMockVolumeCreateResults{v1, err}
	return mmVolumeCreate.mock
}

//Set uses given function f to mock the CommonAPIClient.VolumeCreate method
func (mmVolumeCreate *mCommonAPIClientMockVolumeCreate) Set(f func(ctx context.Context, options volumetypes.VolumeCreateBody) (v1 types.Volume, err error)) *CommonAPIClientMock {
	if mmVolumeCreate.defaultExpectation != nil {
		mmVolumeCreate.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.VolumeCreate method")
	}

	if len(mmVolumeCreate.expectations) > 0 {
		mmVolumeCreate.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.VolumeCreate method")
	}

	mmVolumeCreate.mock.funcVolumeCreate = f
	return mmVolumeCreate.mock
}

// When sets expectation for the CommonAPIClient.VolumeCreate which will trigger the result defined by the following
// Then helper
func (mmVolumeCreate *mCommonAPIClientMockVolumeCreate) When(ctx context.Context, options volumetypes.VolumeCreateBody) *CommonAPIClientMockVolumeCreateExpectation {
	if mmVolumeCreate.mock.funcVolumeCreate != nil {
		mmVolumeCreate.mock.t.Fatalf("CommonAPIClientMock.VolumeCreate mock is already set by Set")
	}

	expectation := &CommonAPIClientMockVolumeCreateExpectation{
		mock:   mmVolumeCreate.mock,
		params: &CommonAPIClientMockVolumeCreateParams{ctx, options},
	}
	mmVolumeCreate.expectations = append(mmVolumeCreate.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.VolumeCreate return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockVolumeCreateExpectation) Then(v1 types.Volume, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockVolumeCreateResults{v1, err}
	return e.mock
}

// VolumeCreate implements client.CommonAPIClient
func (mmVolumeCreate *CommonAPIClientMock) VolumeCreate(ctx context.Context, options volumetypes.VolumeCreateBody) (v1 types.Volume, err error) {
	mm_atomic.AddUint64(&mmVolumeCreate.beforeVolumeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmVolumeCreate.afterVolumeCreateCounter, 1)

	if mmVolumeCreate.inspectFuncVolumeCreate != nil {
		mmVolumeCreate.inspectFuncVolumeCreate(ctx, options)
	}

	mm_params := &CommonAPIClientMockVolumeCreateParams{ctx, options}

	// Record call args
	mmVolumeCreate.VolumeCreateMock.mutex.Lock()
	mmVolumeCreate.VolumeCreateMock.callArgs = append(mmVolumeCreate.VolumeCreateMock.callArgs, mm_params)
	mmVolumeCreate.VolumeCreateMock.mutex.Unlock()

	for _, e := range mmVolumeCreate.VolumeCreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.v1, e.results.err
		}
	}

	if mmVolumeCreate.VolumeCreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmVolumeCreate.VolumeCreateMock.defaultExpectation.Counter, 1)
		mm_want := mmVolumeCreate.VolumeCreateMock.defaultExpectation.params
		mm_got := CommonAPIClientMockVolumeCreateParams{ctx, options}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmVolumeCreate.t.Errorf("CommonAPIClientMock.VolumeCreate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmVolumeCreate.VolumeCreateMock.defaultExpectation.results
		if mm_results == nil {
			mmVolumeCreate.t.Fatal("No results are set for the CommonAPIClientMock.VolumeCreate")
		}
		return (*mm_results).v1, (*mm_results).err
	}
	if mmVolumeCreate.funcVolumeCreate != nil {
		return mmVolumeCreate.funcVolumeCreate(ctx, options)
	}
	mmVolumeCreate.t.Fatalf("Unexpected call to CommonAPIClientMock.VolumeCreate. %v %v", ctx, options)
	return
}

// VolumeCreateAfterCounter returns a count of finished CommonAPIClientMock.VolumeCreate invocations
func (mmVolumeCreate *CommonAPIClientMock) VolumeCreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVolumeCreate.afterVolumeCreateCounter)
}

// VolumeCreateBeforeCounter returns a count of CommonAPIClientMock.VolumeCreate invocations
func (mmVolumeCreate *CommonAPIClientMock) VolumeCreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVolumeCreate.beforeVolumeCreateCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.VolumeCreate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmVolumeCreate *mCommonAPIClientMockVolumeCreate) Calls() []*CommonAPIClientMockVolumeCreateParams {
	mmVolumeCreate.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockVolumeCreateParams, len(mmVolumeCreate.callArgs))
	copy(argCopy, mmVolumeCreate.callArgs)

	mmVolumeCreate.mutex.RUnlock()

	return argCopy
}

// MinimockVolumeCreateDone returns true if the count of the VolumeCreate invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockVolumeCreateDone() bool {
	for _, e := range m.VolumeCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VolumeCreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVolumeCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVolumeCreate != nil && mm_atomic.LoadUint64(&m.afterVolumeCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockVolumeCreateInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockVolumeCreateInspect() {
	for _, e := range m.VolumeCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.VolumeCreate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VolumeCreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVolumeCreateCounter) < 1 {
		if m.VolumeCreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.VolumeCreate")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.VolumeCreate with params: %#v", *m.VolumeCreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVolumeCreate != nil && mm_atomic.LoadUint64(&m.afterVolumeCreateCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.VolumeCreate")
	}
}

type mCommonAPIClientMockVolumeInspect struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockVolumeInspectExpectation
	expectations       []*CommonAPIClientMockVolumeInspectExpectation

	callArgs []*CommonAPIClientMockVolumeInspectParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockVolumeInspectExpectation specifies expectation struct of the CommonAPIClient.VolumeInspect
type CommonAPIClientMockVolumeInspectExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockVolumeInspectParams
	results *CommonAPIClientMockVolumeInspectResults
	Counter uint64
}

// CommonAPIClientMockVolumeInspectParams contains parameters of the CommonAPIClient.VolumeInspect
type CommonAPIClientMockVolumeInspectParams struct {
	ctx      context.Context
	volumeID string
}

// CommonAPIClientMockVolumeInspectResults contains results of the CommonAPIClient.VolumeInspect
type CommonAPIClientMockVolumeInspectResults struct {
	v1  types.Volume
	err error
}

// Expect sets up expected params for CommonAPIClient.VolumeInspect
func (mmVolumeInspect *mCommonAPIClientMockVolumeInspect) Expect(ctx context.Context, volumeID string) *mCommonAPIClientMockVolumeInspect {
	if mmVolumeInspect.mock.funcVolumeInspect != nil {
		mmVolumeInspect.mock.t.Fatalf("CommonAPIClientMock.VolumeInspect mock is already set by Set")
	}

	if mmVolumeInspect.defaultExpectation == nil {
		mmVolumeInspect.defaultExpectation = &CommonAPIClientMockVolumeInspectExpectation{}
	}

	mmVolumeInspect.defaultExpectation.params = &CommonAPIClientMockVolumeInspectParams{ctx, volumeID}
	for _, e := range mmVolumeInspect.expectations {
		if minimock.Equal(e.params, mmVolumeInspect.defaultExpectation.params) {
			mmVolumeInspect.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmVolumeInspect.defaultExpectation.params)
		}
	}

	return mmVolumeInspect
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.VolumeInspect
func (mmVolumeInspect *mCommonAPIClientMockVolumeInspect) Inspect(f func(ctx context.Context, volumeID string)) *mCommonAPIClientMockVolumeInspect {
	if mmVolumeInspect.mock.inspectFuncVolumeInspect != nil {
		mmVolumeInspect.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.VolumeInspect")
	}

	mmVolumeInspect.mock.inspectFuncVolumeInspect = f

	return mmVolumeInspect
}

// Return sets up results that will be returned by CommonAPIClient.VolumeInspect
func (mmVolumeInspect *mCommonAPIClientMockVolumeInspect) Return(v1 types.Volume, err error) *CommonAPIClientMock {
	if mmVolumeInspect.mock.funcVolumeInspect != nil {
		mmVolumeInspect.mock.t.Fatalf("CommonAPIClientMock.VolumeInspect mock is already set by Set")
	}

	if mmVolumeInspect.defaultExpectation == nil {
		mmVolumeInspect.defaultExpectation = &CommonAPIClientMockVolumeInspectExpectation{mock: mmVolumeInspect.mock}
	}
	mmVolumeInspect.defaultExpectation.results = &CommonAPIClientMockVolumeInspectResults{v1, err}
	return mmVolumeInspect.mock
}

//Set uses given function f to mock the CommonAPIClient.VolumeInspect method
func (mmVolumeInspect *mCommonAPIClientMockVolumeInspect) Set(f func(ctx context.Context, volumeID string) (v1 types.Volume, err error)) *CommonAPIClientMock {
	if mmVolumeInspect.defaultExpectation != nil {
		mmVolumeInspect.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.VolumeInspect method")
	}

	if len(mmVolumeInspect.expectations) > 0 {
		mmVolumeInspect.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.VolumeInspect method")
	}

	mmVolumeInspect.mock.funcVolumeInspect = f
	return mmVolumeInspect.mock
}

// When sets expectation for the CommonAPIClient.VolumeInspect which will trigger the result defined by the following
// Then helper
func (mmVolumeInspect *mCommonAPIClientMockVolumeInspect) When(ctx context.Context, volumeID string) *CommonAPIClientMockVolumeInspectExpectation {
	if mmVolumeInspect.mock.funcVolumeInspect != nil {
		mmVolumeInspect.mock.t.Fatalf("CommonAPIClientMock.VolumeInspect mock is already set by Set")
	}

	expectation := &CommonAPIClientMockVolumeInspectExpectation{
		mock:   mmVolumeInspect.mock,
		params: &CommonAPIClientMockVolumeInspectParams{ctx, volumeID},
	}
	mmVolumeInspect.expectations = append(mmVolumeInspect.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.VolumeInspect return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockVolumeInspectExpectation) Then(v1 types.Volume, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockVolumeInspectResults{v1, err}
	return e.mock
}

// VolumeInspect implements client.CommonAPIClient
func (mmVolumeInspect *CommonAPIClientMock) VolumeInspect(ctx context.Context, volumeID string) (v1 types.Volume, err error) {
	mm_atomic.AddUint64(&mmVolumeInspect.beforeVolumeInspectCounter, 1)
	defer mm_atomic.AddUint64(&mmVolumeInspect.afterVolumeInspectCounter, 1)

	if mmVolumeInspect.inspectFuncVolumeInspect != nil {
		mmVolumeInspect.inspectFuncVolumeInspect(ctx, volumeID)
	}

	mm_params := &CommonAPIClientMockVolumeInspectParams{ctx, volumeID}

	// Record call args
	mmVolumeInspect.VolumeInspectMock.mutex.Lock()
	mmVolumeInspect.VolumeInspectMock.callArgs = append(mmVolumeInspect.VolumeInspectMock.callArgs, mm_params)
	mmVolumeInspect.VolumeInspectMock.mutex.Unlock()

	for _, e := range mmVolumeInspect.VolumeInspectMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.v1, e.results.err
		}
	}

	if mmVolumeInspect.VolumeInspectMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmVolumeInspect.VolumeInspectMock.defaultExpectation.Counter, 1)
		mm_want := mmVolumeInspect.VolumeInspectMock.defaultExpectation.params
		mm_got := CommonAPIClientMockVolumeInspectParams{ctx, volumeID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmVolumeInspect.t.Errorf("CommonAPIClientMock.VolumeInspect got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmVolumeInspect.VolumeInspectMock.defaultExpectation.results
		if mm_results == nil {
			mmVolumeInspect.t.Fatal("No results are set for the CommonAPIClientMock.VolumeInspect")
		}
		return (*mm_results).v1, (*mm_results).err
	}
	if mmVolumeInspect.funcVolumeInspect != nil {
		return mmVolumeInspect.funcVolumeInspect(ctx, volumeID)
	}
	mmVolumeInspect.t.Fatalf("Unexpected call to CommonAPIClientMock.VolumeInspect. %v %v", ctx, volumeID)
	return
}

// VolumeInspectAfterCounter returns a count of finished CommonAPIClientMock.VolumeInspect invocations
func (mmVolumeInspect *CommonAPIClientMock) VolumeInspectAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVolumeInspect.afterVolumeInspectCounter)
}

// VolumeInspectBeforeCounter returns a count of CommonAPIClientMock.VolumeInspect invocations
func (mmVolumeInspect *CommonAPIClientMock) VolumeInspectBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVolumeInspect.beforeVolumeInspectCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.VolumeInspect.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmVolumeInspect *mCommonAPIClientMockVolumeInspect) Calls() []*CommonAPIClientMockVolumeInspectParams {
	mmVolumeInspect.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockVolumeInspectParams, len(mmVolumeInspect.callArgs))
	copy(argCopy, mmVolumeInspect.callArgs)

	mmVolumeInspect.mutex.RUnlock()

	return argCopy
}

// MinimockVolumeInspectDone returns true if the count of the VolumeInspect invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockVolumeInspectDone() bool {
	for _, e := range m.VolumeInspectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VolumeInspectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVolumeInspectCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVolumeInspect != nil && mm_atomic.LoadUint64(&m.afterVolumeInspectCounter) < 1 {
		return false
	}
	return true
}

// MinimockVolumeInspectInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockVolumeInspectInspect() {
	for _, e := range m.VolumeInspectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.VolumeInspect with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VolumeInspectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVolumeInspectCounter) < 1 {
		if m.VolumeInspectMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.VolumeInspect")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.VolumeInspect with params: %#v", *m.VolumeInspectMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVolumeInspect != nil && mm_atomic.LoadUint64(&m.afterVolumeInspectCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.VolumeInspect")
	}
}

type mCommonAPIClientMockVolumeInspectWithRaw struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockVolumeInspectWithRawExpectation
	expectations       []*CommonAPIClientMockVolumeInspectWithRawExpectation

	callArgs []*CommonAPIClientMockVolumeInspectWithRawParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockVolumeInspectWithRawExpectation specifies expectation struct of the CommonAPIClient.VolumeInspectWithRaw
type CommonAPIClientMockVolumeInspectWithRawExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockVolumeInspectWithRawParams
	results *CommonAPIClientMockVolumeInspectWithRawResults
	Counter uint64
}

// CommonAPIClientMockVolumeInspectWithRawParams contains parameters of the CommonAPIClient.VolumeInspectWithRaw
type CommonAPIClientMockVolumeInspectWithRawParams struct {
	ctx      context.Context
	volumeID string
}

// CommonAPIClientMockVolumeInspectWithRawResults contains results of the CommonAPIClient.VolumeInspectWithRaw
type CommonAPIClientMockVolumeInspectWithRawResults struct {
	v1  types.Volume
	ba1 []byte
	err error
}

// Expect sets up expected params for CommonAPIClient.VolumeInspectWithRaw
func (mmVolumeInspectWithRaw *mCommonAPIClientMockVolumeInspectWithRaw) Expect(ctx context.Context, volumeID string) *mCommonAPIClientMockVolumeInspectWithRaw {
	if mmVolumeInspectWithRaw.mock.funcVolumeInspectWithRaw != nil {
		mmVolumeInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.VolumeInspectWithRaw mock is already set by Set")
	}

	if mmVolumeInspectWithRaw.defaultExpectation == nil {
		mmVolumeInspectWithRaw.defaultExpectation = &CommonAPIClientMockVolumeInspectWithRawExpectation{}
	}

	mmVolumeInspectWithRaw.defaultExpectation.params = &CommonAPIClientMockVolumeInspectWithRawParams{ctx, volumeID}
	for _, e := range mmVolumeInspectWithRaw.expectations {
		if minimock.Equal(e.params, mmVolumeInspectWithRaw.defaultExpectation.params) {
			mmVolumeInspectWithRaw.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmVolumeInspectWithRaw.defaultExpectation.params)
		}
	}

	return mmVolumeInspectWithRaw
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.VolumeInspectWithRaw
func (mmVolumeInspectWithRaw *mCommonAPIClientMockVolumeInspectWithRaw) Inspect(f func(ctx context.Context, volumeID string)) *mCommonAPIClientMockVolumeInspectWithRaw {
	if mmVolumeInspectWithRaw.mock.inspectFuncVolumeInspectWithRaw != nil {
		mmVolumeInspectWithRaw.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.VolumeInspectWithRaw")
	}

	mmVolumeInspectWithRaw.mock.inspectFuncVolumeInspectWithRaw = f

	return mmVolumeInspectWithRaw
}

// Return sets up results that will be returned by CommonAPIClient.VolumeInspectWithRaw
func (mmVolumeInspectWithRaw *mCommonAPIClientMockVolumeInspectWithRaw) Return(v1 types.Volume, ba1 []byte, err error) *CommonAPIClientMock {
	if mmVolumeInspectWithRaw.mock.funcVolumeInspectWithRaw != nil {
		mmVolumeInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.VolumeInspectWithRaw mock is already set by Set")
	}

	if mmVolumeInspectWithRaw.defaultExpectation == nil {
		mmVolumeInspectWithRaw.defaultExpectation = &CommonAPIClientMockVolumeInspectWithRawExpectation{mock: mmVolumeInspectWithRaw.mock}
	}
	mmVolumeInspectWithRaw.defaultExpectation.results = &CommonAPIClientMockVolumeInspectWithRawResults{v1, ba1, err}
	return mmVolumeInspectWithRaw.mock
}

//Set uses given function f to mock the CommonAPIClient.VolumeInspectWithRaw method
func (mmVolumeInspectWithRaw *mCommonAPIClientMockVolumeInspectWithRaw) Set(f func(ctx context.Context, volumeID string) (v1 types.Volume, ba1 []byte, err error)) *CommonAPIClientMock {
	if mmVolumeInspectWithRaw.defaultExpectation != nil {
		mmVolumeInspectWithRaw.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.VolumeInspectWithRaw method")
	}

	if len(mmVolumeInspectWithRaw.expectations) > 0 {
		mmVolumeInspectWithRaw.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.VolumeInspectWithRaw method")
	}

	mmVolumeInspectWithRaw.mock.funcVolumeInspectWithRaw = f
	return mmVolumeInspectWithRaw.mock
}

// When sets expectation for the CommonAPIClient.VolumeInspectWithRaw which will trigger the result defined by the following
// Then helper
func (mmVolumeInspectWithRaw *mCommonAPIClientMockVolumeInspectWithRaw) When(ctx context.Context, volumeID string) *CommonAPIClientMockVolumeInspectWithRawExpectation {
	if mmVolumeInspectWithRaw.mock.funcVolumeInspectWithRaw != nil {
		mmVolumeInspectWithRaw.mock.t.Fatalf("CommonAPIClientMock.VolumeInspectWithRaw mock is already set by Set")
	}

	expectation := &CommonAPIClientMockVolumeInspectWithRawExpectation{
		mock:   mmVolumeInspectWithRaw.mock,
		params: &CommonAPIClientMockVolumeInspectWithRawParams{ctx, volumeID},
	}
	mmVolumeInspectWithRaw.expectations = append(mmVolumeInspectWithRaw.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.VolumeInspectWithRaw return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockVolumeInspectWithRawExpectation) Then(v1 types.Volume, ba1 []byte, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockVolumeInspectWithRawResults{v1, ba1, err}
	return e.mock
}

// VolumeInspectWithRaw implements client.CommonAPIClient
func (mmVolumeInspectWithRaw *CommonAPIClientMock) VolumeInspectWithRaw(ctx context.Context, volumeID string) (v1 types.Volume, ba1 []byte, err error) {
	mm_atomic.AddUint64(&mmVolumeInspectWithRaw.beforeVolumeInspectWithRawCounter, 1)
	defer mm_atomic.AddUint64(&mmVolumeInspectWithRaw.afterVolumeInspectWithRawCounter, 1)

	if mmVolumeInspectWithRaw.inspectFuncVolumeInspectWithRaw != nil {
		mmVolumeInspectWithRaw.inspectFuncVolumeInspectWithRaw(ctx, volumeID)
	}

	mm_params := &CommonAPIClientMockVolumeInspectWithRawParams{ctx, volumeID}

	// Record call args
	mmVolumeInspectWithRaw.VolumeInspectWithRawMock.mutex.Lock()
	mmVolumeInspectWithRaw.VolumeInspectWithRawMock.callArgs = append(mmVolumeInspectWithRaw.VolumeInspectWithRawMock.callArgs, mm_params)
	mmVolumeInspectWithRaw.VolumeInspectWithRawMock.mutex.Unlock()

	for _, e := range mmVolumeInspectWithRaw.VolumeInspectWithRawMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.v1, e.results.ba1, e.results.err
		}
	}

	if mmVolumeInspectWithRaw.VolumeInspectWithRawMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmVolumeInspectWithRaw.VolumeInspectWithRawMock.defaultExpectation.Counter, 1)
		mm_want := mmVolumeInspectWithRaw.VolumeInspectWithRawMock.defaultExpectation.params
		mm_got := CommonAPIClientMockVolumeInspectWithRawParams{ctx, volumeID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmVolumeInspectWithRaw.t.Errorf("CommonAPIClientMock.VolumeInspectWithRaw got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmVolumeInspectWithRaw.VolumeInspectWithRawMock.defaultExpectation.results
		if mm_results == nil {
			mmVolumeInspectWithRaw.t.Fatal("No results are set for the CommonAPIClientMock.VolumeInspectWithRaw")
		}
		return (*mm_results).v1, (*mm_results).ba1, (*mm_results).err
	}
	if mmVolumeInspectWithRaw.funcVolumeInspectWithRaw != nil {
		return mmVolumeInspectWithRaw.funcVolumeInspectWithRaw(ctx, volumeID)
	}
	mmVolumeInspectWithRaw.t.Fatalf("Unexpected call to CommonAPIClientMock.VolumeInspectWithRaw. %v %v", ctx, volumeID)
	return
}

// VolumeInspectWithRawAfterCounter returns a count of finished CommonAPIClientMock.VolumeInspectWithRaw invocations
func (mmVolumeInspectWithRaw *CommonAPIClientMock) VolumeInspectWithRawAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVolumeInspectWithRaw.afterVolumeInspectWithRawCounter)
}

// VolumeInspectWithRawBeforeCounter returns a count of CommonAPIClientMock.VolumeInspectWithRaw invocations
func (mmVolumeInspectWithRaw *CommonAPIClientMock) VolumeInspectWithRawBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVolumeInspectWithRaw.beforeVolumeInspectWithRawCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.VolumeInspectWithRaw.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmVolumeInspectWithRaw *mCommonAPIClientMockVolumeInspectWithRaw) Calls() []*CommonAPIClientMockVolumeInspectWithRawParams {
	mmVolumeInspectWithRaw.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockVolumeInspectWithRawParams, len(mmVolumeInspectWithRaw.callArgs))
	copy(argCopy, mmVolumeInspectWithRaw.callArgs)

	mmVolumeInspectWithRaw.mutex.RUnlock()

	return argCopy
}

// MinimockVolumeInspectWithRawDone returns true if the count of the VolumeInspectWithRaw invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockVolumeInspectWithRawDone() bool {
	for _, e := range m.VolumeInspectWithRawMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VolumeInspectWithRawMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVolumeInspectWithRawCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVolumeInspectWithRaw != nil && mm_atomic.LoadUint64(&m.afterVolumeInspectWithRawCounter) < 1 {
		return false
	}
	return true
}

// MinimockVolumeInspectWithRawInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockVolumeInspectWithRawInspect() {
	for _, e := range m.VolumeInspectWithRawMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.VolumeInspectWithRaw with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VolumeInspectWithRawMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVolumeInspectWithRawCounter) < 1 {
		if m.VolumeInspectWithRawMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.VolumeInspectWithRaw")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.VolumeInspectWithRaw with params: %#v", *m.VolumeInspectWithRawMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVolumeInspectWithRaw != nil && mm_atomic.LoadUint64(&m.afterVolumeInspectWithRawCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.VolumeInspectWithRaw")
	}
}

type mCommonAPIClientMockVolumeList struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockVolumeListExpectation
	expectations       []*CommonAPIClientMockVolumeListExpectation

	callArgs []*CommonAPIClientMockVolumeListParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockVolumeListExpectation specifies expectation struct of the CommonAPIClient.VolumeList
type CommonAPIClientMockVolumeListExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockVolumeListParams
	results *CommonAPIClientMockVolumeListResults
	Counter uint64
}

// CommonAPIClientMockVolumeListParams contains parameters of the CommonAPIClient.VolumeList
type CommonAPIClientMockVolumeListParams struct {
	ctx    context.Context
	filter filters.Args
}

// CommonAPIClientMockVolumeListResults contains results of the CommonAPIClient.VolumeList
type CommonAPIClientMockVolumeListResults struct {
	v1  volumetypes.VolumeListOKBody
	err error
}

// Expect sets up expected params for CommonAPIClient.VolumeList
func (mmVolumeList *mCommonAPIClientMockVolumeList) Expect(ctx context.Context, filter filters.Args) *mCommonAPIClientMockVolumeList {
	if mmVolumeList.mock.funcVolumeList != nil {
		mmVolumeList.mock.t.Fatalf("CommonAPIClientMock.VolumeList mock is already set by Set")
	}

	if mmVolumeList.defaultExpectation == nil {
		mmVolumeList.defaultExpectation = &CommonAPIClientMockVolumeListExpectation{}
	}

	mmVolumeList.defaultExpectation.params = &CommonAPIClientMockVolumeListParams{ctx, filter}
	for _, e := range mmVolumeList.expectations {
		if minimock.Equal(e.params, mmVolumeList.defaultExpectation.params) {
			mmVolumeList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmVolumeList.defaultExpectation.params)
		}
	}

	return mmVolumeList
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.VolumeList
func (mmVolumeList *mCommonAPIClientMockVolumeList) Inspect(f func(ctx context.Context, filter filters.Args)) *mCommonAPIClientMockVolumeList {
	if mmVolumeList.mock.inspectFuncVolumeList != nil {
		mmVolumeList.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.VolumeList")
	}

	mmVolumeList.mock.inspectFuncVolumeList = f

	return mmVolumeList
}

// Return sets up results that will be returned by CommonAPIClient.VolumeList
func (mmVolumeList *mCommonAPIClientMockVolumeList) Return(v1 volumetypes.VolumeListOKBody, err error) *CommonAPIClientMock {
	if mmVolumeList.mock.funcVolumeList != nil {
		mmVolumeList.mock.t.Fatalf("CommonAPIClientMock.VolumeList mock is already set by Set")
	}

	if mmVolumeList.defaultExpectation == nil {
		mmVolumeList.defaultExpectation = &CommonAPIClientMockVolumeListExpectation{mock: mmVolumeList.mock}
	}
	mmVolumeList.defaultExpectation.results = &CommonAPIClientMockVolumeListResults{v1, err}
	return mmVolumeList.mock
}

//Set uses given function f to mock the CommonAPIClient.VolumeList method
func (mmVolumeList *mCommonAPIClientMockVolumeList) Set(f func(ctx context.Context, filter filters.Args) (v1 volumetypes.VolumeListOKBody, err error)) *CommonAPIClientMock {
	if mmVolumeList.defaultExpectation != nil {
		mmVolumeList.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.VolumeList method")
	}

	if len(mmVolumeList.expectations) > 0 {
		mmVolumeList.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.VolumeList method")
	}

	mmVolumeList.mock.funcVolumeList = f
	return mmVolumeList.mock
}

// When sets expectation for the CommonAPIClient.VolumeList which will trigger the result defined by the following
// Then helper
func (mmVolumeList *mCommonAPIClientMockVolumeList) When(ctx context.Context, filter filters.Args) *CommonAPIClientMockVolumeListExpectation {
	if mmVolumeList.mock.funcVolumeList != nil {
		mmVolumeList.mock.t.Fatalf("CommonAPIClientMock.VolumeList mock is already set by Set")
	}

	expectation := &CommonAPIClientMockVolumeListExpectation{
		mock:   mmVolumeList.mock,
		params: &CommonAPIClientMockVolumeListParams{ctx, filter},
	}
	mmVolumeList.expectations = append(mmVolumeList.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.VolumeList return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockVolumeListExpectation) Then(v1 volumetypes.VolumeListOKBody, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockVolumeListResults{v1, err}
	return e.mock
}

// VolumeList implements client.CommonAPIClient
func (mmVolumeList *CommonAPIClientMock) VolumeList(ctx context.Context, filter filters.Args) (v1 volumetypes.VolumeListOKBody, err error) {
	mm_atomic.AddUint64(&mmVolumeList.beforeVolumeListCounter, 1)
	defer mm_atomic.AddUint64(&mmVolumeList.afterVolumeListCounter, 1)

	if mmVolumeList.inspectFuncVolumeList != nil {
		mmVolumeList.inspectFuncVolumeList(ctx, filter)
	}

	mm_params := &CommonAPIClientMockVolumeListParams{ctx, filter}

	// Record call args
	mmVolumeList.VolumeListMock.mutex.Lock()
	mmVolumeList.VolumeListMock.callArgs = append(mmVolumeList.VolumeListMock.callArgs, mm_params)
	mmVolumeList.VolumeListMock.mutex.Unlock()

	for _, e := range mmVolumeList.VolumeListMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.v1, e.results.err
		}
	}

	if mmVolumeList.VolumeListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmVolumeList.VolumeListMock.defaultExpectation.Counter, 1)
		mm_want := mmVolumeList.VolumeListMock.defaultExpectation.params
		mm_got := CommonAPIClientMockVolumeListParams{ctx, filter}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmVolumeList.t.Errorf("CommonAPIClientMock.VolumeList got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmVolumeList.VolumeListMock.defaultExpectation.results
		if mm_results == nil {
			mmVolumeList.t.Fatal("No results are set for the CommonAPIClientMock.VolumeList")
		}
		return (*mm_results).v1, (*mm_results).err
	}
	if mmVolumeList.funcVolumeList != nil {
		return mmVolumeList.funcVolumeList(ctx, filter)
	}
	mmVolumeList.t.Fatalf("Unexpected call to CommonAPIClientMock.VolumeList. %v %v", ctx, filter)
	return
}

// VolumeListAfterCounter returns a count of finished CommonAPIClientMock.VolumeList invocations
func (mmVolumeList *CommonAPIClientMock) VolumeListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVolumeList.afterVolumeListCounter)
}

// VolumeListBeforeCounter returns a count of CommonAPIClientMock.VolumeList invocations
func (mmVolumeList *CommonAPIClientMock) VolumeListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVolumeList.beforeVolumeListCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.VolumeList.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmVolumeList *mCommonAPIClientMockVolumeList) Calls() []*CommonAPIClientMockVolumeListParams {
	mmVolumeList.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockVolumeListParams, len(mmVolumeList.callArgs))
	copy(argCopy, mmVolumeList.callArgs)

	mmVolumeList.mutex.RUnlock()

	return argCopy
}

// MinimockVolumeListDone returns true if the count of the VolumeList invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockVolumeListDone() bool {
	for _, e := range m.VolumeListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VolumeListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVolumeListCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVolumeList != nil && mm_atomic.LoadUint64(&m.afterVolumeListCounter) < 1 {
		return false
	}
	return true
}

// MinimockVolumeListInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockVolumeListInspect() {
	for _, e := range m.VolumeListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.VolumeList with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VolumeListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVolumeListCounter) < 1 {
		if m.VolumeListMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.VolumeList")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.VolumeList with params: %#v", *m.VolumeListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVolumeList != nil && mm_atomic.LoadUint64(&m.afterVolumeListCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.VolumeList")
	}
}

type mCommonAPIClientMockVolumeRemove struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockVolumeRemoveExpectation
	expectations       []*CommonAPIClientMockVolumeRemoveExpectation

	callArgs []*CommonAPIClientMockVolumeRemoveParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockVolumeRemoveExpectation specifies expectation struct of the CommonAPIClient.VolumeRemove
type CommonAPIClientMockVolumeRemoveExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockVolumeRemoveParams
	results *CommonAPIClientMockVolumeRemoveResults
	Counter uint64
}

// CommonAPIClientMockVolumeRemoveParams contains parameters of the CommonAPIClient.VolumeRemove
type CommonAPIClientMockVolumeRemoveParams struct {
	ctx      context.Context
	volumeID string
	force    bool
}

// CommonAPIClientMockVolumeRemoveResults contains results of the CommonAPIClient.VolumeRemove
type CommonAPIClientMockVolumeRemoveResults struct {
	err error
}

// Expect sets up expected params for CommonAPIClient.VolumeRemove
func (mmVolumeRemove *mCommonAPIClientMockVolumeRemove) Expect(ctx context.Context, volumeID string, force bool) *mCommonAPIClientMockVolumeRemove {
	if mmVolumeRemove.mock.funcVolumeRemove != nil {
		mmVolumeRemove.mock.t.Fatalf("CommonAPIClientMock.VolumeRemove mock is already set by Set")
	}

	if mmVolumeRemove.defaultExpectation == nil {
		mmVolumeRemove.defaultExpectation = &CommonAPIClientMockVolumeRemoveExpectation{}
	}

	mmVolumeRemove.defaultExpectation.params = &CommonAPIClientMockVolumeRemoveParams{ctx, volumeID, force}
	for _, e := range mmVolumeRemove.expectations {
		if minimock.Equal(e.params, mmVolumeRemove.defaultExpectation.params) {
			mmVolumeRemove.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmVolumeRemove.defaultExpectation.params)
		}
	}

	return mmVolumeRemove
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.VolumeRemove
func (mmVolumeRemove *mCommonAPIClientMockVolumeRemove) Inspect(f func(ctx context.Context, volumeID string, force bool)) *mCommonAPIClientMockVolumeRemove {
	if mmVolumeRemove.mock.inspectFuncVolumeRemove != nil {
		mmVolumeRemove.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.VolumeRemove")
	}

	mmVolumeRemove.mock.inspectFuncVolumeRemove = f

	return mmVolumeRemove
}

// Return sets up results that will be returned by CommonAPIClient.VolumeRemove
func (mmVolumeRemove *mCommonAPIClientMockVolumeRemove) Return(err error) *CommonAPIClientMock {
	if mmVolumeRemove.mock.funcVolumeRemove != nil {
		mmVolumeRemove.mock.t.Fatalf("CommonAPIClientMock.VolumeRemove mock is already set by Set")
	}

	if mmVolumeRemove.defaultExpectation == nil {
		mmVolumeRemove.defaultExpectation = &CommonAPIClientMockVolumeRemoveExpectation{mock: mmVolumeRemove.mock}
	}
	mmVolumeRemove.defaultExpectation.results = &CommonAPIClientMockVolumeRemoveResults{err}
	return mmVolumeRemove.mock
}

//Set uses given function f to mock the CommonAPIClient.VolumeRemove method
func (mmVolumeRemove *mCommonAPIClientMockVolumeRemove) Set(f func(ctx context.Context, volumeID string, force bool) (err error)) *CommonAPIClientMock {
	if mmVolumeRemove.defaultExpectation != nil {
		mmVolumeRemove.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.VolumeRemove method")
	}

	if len(mmVolumeRemove.expectations) > 0 {
		mmVolumeRemove.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.VolumeRemove method")
	}

	mmVolumeRemove.mock.funcVolumeRemove = f
	return mmVolumeRemove.mock
}

// When sets expectation for the CommonAPIClient.VolumeRemove which will trigger the result defined by the following
// Then helper
func (mmVolumeRemove *mCommonAPIClientMockVolumeRemove) When(ctx context.Context, volumeID string, force bool) *CommonAPIClientMockVolumeRemoveExpectation {
	if mmVolumeRemove.mock.funcVolumeRemove != nil {
		mmVolumeRemove.mock.t.Fatalf("CommonAPIClientMock.VolumeRemove mock is already set by Set")
	}

	expectation := &CommonAPIClientMockVolumeRemoveExpectation{
		mock:   mmVolumeRemove.mock,
		params: &CommonAPIClientMockVolumeRemoveParams{ctx, volumeID, force},
	}
	mmVolumeRemove.expectations = append(mmVolumeRemove.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.VolumeRemove return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockVolumeRemoveExpectation) Then(err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockVolumeRemoveResults{err}
	return e.mock
}

// VolumeRemove implements client.CommonAPIClient
func (mmVolumeRemove *CommonAPIClientMock) VolumeRemove(ctx context.Context, volumeID string, force bool) (err error) {
	mm_atomic.AddUint64(&mmVolumeRemove.beforeVolumeRemoveCounter, 1)
	defer mm_atomic.AddUint64(&mmVolumeRemove.afterVolumeRemoveCounter, 1)

	if mmVolumeRemove.inspectFuncVolumeRemove != nil {
		mmVolumeRemove.inspectFuncVolumeRemove(ctx, volumeID, force)
	}

	mm_params := &CommonAPIClientMockVolumeRemoveParams{ctx, volumeID, force}

	// Record call args
	mmVolumeRemove.VolumeRemoveMock.mutex.Lock()
	mmVolumeRemove.VolumeRemoveMock.callArgs = append(mmVolumeRemove.VolumeRemoveMock.callArgs, mm_params)
	mmVolumeRemove.VolumeRemoveMock.mutex.Unlock()

	for _, e := range mmVolumeRemove.VolumeRemoveMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmVolumeRemove.VolumeRemoveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmVolumeRemove.VolumeRemoveMock.defaultExpectation.Counter, 1)
		mm_want := mmVolumeRemove.VolumeRemoveMock.defaultExpectation.params
		mm_got := CommonAPIClientMockVolumeRemoveParams{ctx, volumeID, force}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmVolumeRemove.t.Errorf("CommonAPIClientMock.VolumeRemove got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmVolumeRemove.VolumeRemoveMock.defaultExpectation.results
		if mm_results == nil {
			mmVolumeRemove.t.Fatal("No results are set for the CommonAPIClientMock.VolumeRemove")
		}
		return (*mm_results).err
	}
	if mmVolumeRemove.funcVolumeRemove != nil {
		return mmVolumeRemove.funcVolumeRemove(ctx, volumeID, force)
	}
	mmVolumeRemove.t.Fatalf("Unexpected call to CommonAPIClientMock.VolumeRemove. %v %v %v", ctx, volumeID, force)
	return
}

// VolumeRemoveAfterCounter returns a count of finished CommonAPIClientMock.VolumeRemove invocations
func (mmVolumeRemove *CommonAPIClientMock) VolumeRemoveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVolumeRemove.afterVolumeRemoveCounter)
}

// VolumeRemoveBeforeCounter returns a count of CommonAPIClientMock.VolumeRemove invocations
func (mmVolumeRemove *CommonAPIClientMock) VolumeRemoveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVolumeRemove.beforeVolumeRemoveCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.VolumeRemove.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmVolumeRemove *mCommonAPIClientMockVolumeRemove) Calls() []*CommonAPIClientMockVolumeRemoveParams {
	mmVolumeRemove.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockVolumeRemoveParams, len(mmVolumeRemove.callArgs))
	copy(argCopy, mmVolumeRemove.callArgs)

	mmVolumeRemove.mutex.RUnlock()

	return argCopy
}

// MinimockVolumeRemoveDone returns true if the count of the VolumeRemove invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockVolumeRemoveDone() bool {
	for _, e := range m.VolumeRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VolumeRemoveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVolumeRemoveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVolumeRemove != nil && mm_atomic.LoadUint64(&m.afterVolumeRemoveCounter) < 1 {
		return false
	}
	return true
}

// MinimockVolumeRemoveInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockVolumeRemoveInspect() {
	for _, e := range m.VolumeRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.VolumeRemove with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VolumeRemoveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVolumeRemoveCounter) < 1 {
		if m.VolumeRemoveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.VolumeRemove")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.VolumeRemove with params: %#v", *m.VolumeRemoveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVolumeRemove != nil && mm_atomic.LoadUint64(&m.afterVolumeRemoveCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.VolumeRemove")
	}
}

type mCommonAPIClientMockVolumesPrune struct {
	mock               *CommonAPIClientMock
	defaultExpectation *CommonAPIClientMockVolumesPruneExpectation
	expectations       []*CommonAPIClientMockVolumesPruneExpectation

	callArgs []*CommonAPIClientMockVolumesPruneParams
	mutex    sync.RWMutex
}

// CommonAPIClientMockVolumesPruneExpectation specifies expectation struct of the CommonAPIClient.VolumesPrune
type CommonAPIClientMockVolumesPruneExpectation struct {
	mock    *CommonAPIClientMock
	params  *CommonAPIClientMockVolumesPruneParams
	results *CommonAPIClientMockVolumesPruneResults
	Counter uint64
}

// CommonAPIClientMockVolumesPruneParams contains parameters of the CommonAPIClient.VolumesPrune
type CommonAPIClientMockVolumesPruneParams struct {
	ctx         context.Context
	pruneFilter filters.Args
}

// CommonAPIClientMockVolumesPruneResults contains results of the CommonAPIClient.VolumesPrune
type CommonAPIClientMockVolumesPruneResults struct {
	v1  types.VolumesPruneReport
	err error
}

// Expect sets up expected params for CommonAPIClient.VolumesPrune
func (mmVolumesPrune *mCommonAPIClientMockVolumesPrune) Expect(ctx context.Context, pruneFilter filters.Args) *mCommonAPIClientMockVolumesPrune {
	if mmVolumesPrune.mock.funcVolumesPrune != nil {
		mmVolumesPrune.mock.t.Fatalf("CommonAPIClientMock.VolumesPrune mock is already set by Set")
	}

	if mmVolumesPrune.defaultExpectation == nil {
		mmVolumesPrune.defaultExpectation = &CommonAPIClientMockVolumesPruneExpectation{}
	}

	mmVolumesPrune.defaultExpectation.params = &CommonAPIClientMockVolumesPruneParams{ctx, pruneFilter}
	for _, e := range mmVolumesPrune.expectations {
		if minimock.Equal(e.params, mmVolumesPrune.defaultExpectation.params) {
			mmVolumesPrune.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmVolumesPrune.defaultExpectation.params)
		}
	}

	return mmVolumesPrune
}

// Inspect accepts an inspector function that has same arguments as the CommonAPIClient.VolumesPrune
func (mmVolumesPrune *mCommonAPIClientMockVolumesPrune) Inspect(f func(ctx context.Context, pruneFilter filters.Args)) *mCommonAPIClientMockVolumesPrune {
	if mmVolumesPrune.mock.inspectFuncVolumesPrune != nil {
		mmVolumesPrune.mock.t.Fatalf("Inspect function is already set for CommonAPIClientMock.VolumesPrune")
	}

	mmVolumesPrune.mock.inspectFuncVolumesPrune = f

	return mmVolumesPrune
}

// Return sets up results that will be returned by CommonAPIClient.VolumesPrune
func (mmVolumesPrune *mCommonAPIClientMockVolumesPrune) Return(v1 types.VolumesPruneReport, err error) *CommonAPIClientMock {
	if mmVolumesPrune.mock.funcVolumesPrune != nil {
		mmVolumesPrune.mock.t.Fatalf("CommonAPIClientMock.VolumesPrune mock is already set by Set")
	}

	if mmVolumesPrune.defaultExpectation == nil {
		mmVolumesPrune.defaultExpectation = &CommonAPIClientMockVolumesPruneExpectation{mock: mmVolumesPrune.mock}
	}
	mmVolumesPrune.defaultExpectation.results = &CommonAPIClientMockVolumesPruneResults{v1, err}
	return mmVolumesPrune.mock
}

//Set uses given function f to mock the CommonAPIClient.VolumesPrune method
func (mmVolumesPrune *mCommonAPIClientMockVolumesPrune) Set(f func(ctx context.Context, pruneFilter filters.Args) (v1 types.VolumesPruneReport, err error)) *CommonAPIClientMock {
	if mmVolumesPrune.defaultExpectation != nil {
		mmVolumesPrune.mock.t.Fatalf("Default expectation is already set for the CommonAPIClient.VolumesPrune method")
	}

	if len(mmVolumesPrune.expectations) > 0 {
		mmVolumesPrune.mock.t.Fatalf("Some expectations are already set for the CommonAPIClient.VolumesPrune method")
	}

	mmVolumesPrune.mock.funcVolumesPrune = f
	return mmVolumesPrune.mock
}

// When sets expectation for the CommonAPIClient.VolumesPrune which will trigger the result defined by the following
// Then helper
func (mmVolumesPrune *mCommonAPIClientMockVolumesPrune) When(ctx context.Context, pruneFilter filters.Args) *CommonAPIClientMockVolumesPruneExpectation {
	if mmVolumesPrune.mock.funcVolumesPrune != nil {
		mmVolumesPrune.mock.t.Fatalf("CommonAPIClientMock.VolumesPrune mock is already set by Set")
	}

	expectation := &CommonAPIClientMockVolumesPruneExpectation{
		mock:   mmVolumesPrune.mock,
		params: &CommonAPIClientMockVolumesPruneParams{ctx, pruneFilter},
	}
	mmVolumesPrune.expectations = append(mmVolumesPrune.expectations, expectation)
	return expectation
}

// Then sets up CommonAPIClient.VolumesPrune return parameters for the expectation previously defined by the When method
func (e *CommonAPIClientMockVolumesPruneExpectation) Then(v1 types.VolumesPruneReport, err error) *CommonAPIClientMock {
	e.results = &CommonAPIClientMockVolumesPruneResults{v1, err}
	return e.mock
}

// VolumesPrune implements client.CommonAPIClient
func (mmVolumesPrune *CommonAPIClientMock) VolumesPrune(ctx context.Context, pruneFilter filters.Args) (v1 types.VolumesPruneReport, err error) {
	mm_atomic.AddUint64(&mmVolumesPrune.beforeVolumesPruneCounter, 1)
	defer mm_atomic.AddUint64(&mmVolumesPrune.afterVolumesPruneCounter, 1)

	if mmVolumesPrune.inspectFuncVolumesPrune != nil {
		mmVolumesPrune.inspectFuncVolumesPrune(ctx, pruneFilter)
	}

	mm_params := &CommonAPIClientMockVolumesPruneParams{ctx, pruneFilter}

	// Record call args
	mmVolumesPrune.VolumesPruneMock.mutex.Lock()
	mmVolumesPrune.VolumesPruneMock.callArgs = append(mmVolumesPrune.VolumesPruneMock.callArgs, mm_params)
	mmVolumesPrune.VolumesPruneMock.mutex.Unlock()

	for _, e := range mmVolumesPrune.VolumesPruneMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.v1, e.results.err
		}
	}

	if mmVolumesPrune.VolumesPruneMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmVolumesPrune.VolumesPruneMock.defaultExpectation.Counter, 1)
		mm_want := mmVolumesPrune.VolumesPruneMock.defaultExpectation.params
		mm_got := CommonAPIClientMockVolumesPruneParams{ctx, pruneFilter}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmVolumesPrune.t.Errorf("CommonAPIClientMock.VolumesPrune got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmVolumesPrune.VolumesPruneMock.defaultExpectation.results
		if mm_results == nil {
			mmVolumesPrune.t.Fatal("No results are set for the CommonAPIClientMock.VolumesPrune")
		}
		return (*mm_results).v1, (*mm_results).err
	}
	if mmVolumesPrune.funcVolumesPrune != nil {
		return mmVolumesPrune.funcVolumesPrune(ctx, pruneFilter)
	}
	mmVolumesPrune.t.Fatalf("Unexpected call to CommonAPIClientMock.VolumesPrune. %v %v", ctx, pruneFilter)
	return
}

// VolumesPruneAfterCounter returns a count of finished CommonAPIClientMock.VolumesPrune invocations
func (mmVolumesPrune *CommonAPIClientMock) VolumesPruneAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVolumesPrune.afterVolumesPruneCounter)
}

// VolumesPruneBeforeCounter returns a count of CommonAPIClientMock.VolumesPrune invocations
func (mmVolumesPrune *CommonAPIClientMock) VolumesPruneBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVolumesPrune.beforeVolumesPruneCounter)
}

// Calls returns a list of arguments used in each call to CommonAPIClientMock.VolumesPrune.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmVolumesPrune *mCommonAPIClientMockVolumesPrune) Calls() []*CommonAPIClientMockVolumesPruneParams {
	mmVolumesPrune.mutex.RLock()

	argCopy := make([]*CommonAPIClientMockVolumesPruneParams, len(mmVolumesPrune.callArgs))
	copy(argCopy, mmVolumesPrune.callArgs)

	mmVolumesPrune.mutex.RUnlock()

	return argCopy
}

// MinimockVolumesPruneDone returns true if the count of the VolumesPrune invocations corresponds
// the number of defined expectations
func (m *CommonAPIClientMock) MinimockVolumesPruneDone() bool {
	for _, e := range m.VolumesPruneMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VolumesPruneMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVolumesPruneCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVolumesPrune != nil && mm_atomic.LoadUint64(&m.afterVolumesPruneCounter) < 1 {
		return false
	}
	return true
}

// MinimockVolumesPruneInspect logs each unmet expectation
func (m *CommonAPIClientMock) MinimockVolumesPruneInspect() {
	for _, e := range m.VolumesPruneMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommonAPIClientMock.VolumesPrune with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.VolumesPruneMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterVolumesPruneCounter) < 1 {
		if m.VolumesPruneMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CommonAPIClientMock.VolumesPrune")
		} else {
			m.t.Errorf("Expected call to CommonAPIClientMock.VolumesPrune with params: %#v", *m.VolumesPruneMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVolumesPrune != nil && mm_atomic.LoadUint64(&m.afterVolumesPruneCounter) < 1 {
		m.t.Error("Expected call to CommonAPIClientMock.VolumesPrune")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CommonAPIClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockBuildCachePruneInspect()

		m.MinimockBuildCancelInspect()

		m.MinimockClientVersionInspect()

		m.MinimockCloseInspect()

		m.MinimockConfigCreateInspect()

		m.MinimockConfigInspectWithRawInspect()

		m.MinimockConfigListInspect()

		m.MinimockConfigRemoveInspect()

		m.MinimockConfigUpdateInspect()

		m.MinimockContainerAttachInspect()

		m.MinimockContainerCommitInspect()

		m.MinimockContainerCreateInspect()

		m.MinimockContainerDiffInspect()

		m.MinimockContainerExecAttachInspect()

		m.MinimockContainerExecCreateInspect()

		m.MinimockContainerExecInspectInspect()

		m.MinimockContainerExecResizeInspect()

		m.MinimockContainerExecStartInspect()

		m.MinimockContainerExportInspect()

		m.MinimockContainerInspectInspect()

		m.MinimockContainerInspectWithRawInspect()

		m.MinimockContainerKillInspect()

		m.MinimockContainerListInspect()

		m.MinimockContainerLogsInspect()

		m.MinimockContainerPauseInspect()

		m.MinimockContainerRemoveInspect()

		m.MinimockContainerRenameInspect()

		m.MinimockContainerResizeInspect()

		m.MinimockContainerRestartInspect()

		m.MinimockContainerStartInspect()

		m.MinimockContainerStatPathInspect()

		m.MinimockContainerStatsInspect()

		m.MinimockContainerStopInspect()

		m.MinimockContainerTopInspect()

		m.MinimockContainerUnpauseInspect()

		m.MinimockContainerUpdateInspect()

		m.MinimockContainerWaitInspect()

		m.MinimockContainersPruneInspect()

		m.MinimockCopyFromContainerInspect()

		m.MinimockCopyToContainerInspect()

		m.MinimockDaemonHostInspect()

		m.MinimockDialHijackInspect()

		m.MinimockDialerInspect()

		m.MinimockDiskUsageInspect()

		m.MinimockDistributionInspectInspect()

		m.MinimockEventsInspect()

		m.MinimockHTTPClientInspect()

		m.MinimockImageBuildInspect()

		m.MinimockImageCreateInspect()

		m.MinimockImageHistoryInspect()

		m.MinimockImageImportInspect()

		m.MinimockImageInspectWithRawInspect()

		m.MinimockImageListInspect()

		m.MinimockImageLoadInspect()

		m.MinimockImagePullInspect()

		m.MinimockImagePushInspect()

		m.MinimockImageRemoveInspect()

		m.MinimockImageSaveInspect()

		m.MinimockImageSearchInspect()

		m.MinimockImageTagInspect()

		m.MinimockImagesPruneInspect()

		m.MinimockInfoInspect()

		m.MinimockNegotiateAPIVersionInspect()

		m.MinimockNegotiateAPIVersionPingInspect()

		m.MinimockNetworkConnectInspect()

		m.MinimockNetworkCreateInspect()

		m.MinimockNetworkDisconnectInspect()

		m.MinimockNetworkInspectInspect()

		m.MinimockNetworkInspectWithRawInspect()

		m.MinimockNetworkListInspect()

		m.MinimockNetworkRemoveInspect()

		m.MinimockNetworksPruneInspect()

		m.MinimockNodeInspectWithRawInspect()

		m.MinimockNodeListInspect()

		m.MinimockNodeRemoveInspect()

		m.MinimockNodeUpdateInspect()

		m.MinimockPingInspect()

		m.MinimockPluginCreateInspect()

		m.MinimockPluginDisableInspect()

		m.MinimockPluginEnableInspect()

		m.MinimockPluginInspectWithRawInspect()

		m.MinimockPluginInstallInspect()

		m.MinimockPluginListInspect()

		m.MinimockPluginPushInspect()

		m.MinimockPluginRemoveInspect()

		m.MinimockPluginSetInspect()

		m.MinimockPluginUpgradeInspect()

		m.MinimockRegistryLoginInspect()

		m.MinimockSecretCreateInspect()

		m.MinimockSecretInspectWithRawInspect()

		m.MinimockSecretListInspect()

		m.MinimockSecretRemoveInspect()

		m.MinimockSecretUpdateInspect()

		m.MinimockServerVersionInspect()

		m.MinimockServiceCreateInspect()

		m.MinimockServiceInspectWithRawInspect()

		m.MinimockServiceListInspect()

		m.MinimockServiceLogsInspect()

		m.MinimockServiceRemoveInspect()

		m.MinimockServiceUpdateInspect()

		m.MinimockSwarmGetUnlockKeyInspect()

		m.MinimockSwarmInitInspect()

		m.MinimockSwarmInspectInspect()

		m.MinimockSwarmJoinInspect()

		m.MinimockSwarmLeaveInspect()

		m.MinimockSwarmUnlockInspect()

		m.MinimockSwarmUpdateInspect()

		m.MinimockTaskInspectWithRawInspect()

		m.MinimockTaskListInspect()

		m.MinimockTaskLogsInspect()

		m.MinimockVolumeCreateInspect()

		m.MinimockVolumeInspectInspect()

		m.MinimockVolumeInspectWithRawInspect()

		m.MinimockVolumeListInspect()

		m.MinimockVolumeRemoveInspect()

		m.MinimockVolumesPruneInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CommonAPIClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CommonAPIClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockBuildCachePruneDone() &&
		m.MinimockBuildCancelDone() &&
		m.MinimockClientVersionDone() &&
		m.MinimockCloseDone() &&
		m.MinimockConfigCreateDone() &&
		m.MinimockConfigInspectWithRawDone() &&
		m.MinimockConfigListDone() &&
		m.MinimockConfigRemoveDone() &&
		m.MinimockConfigUpdateDone() &&
		m.MinimockContainerAttachDone() &&
		m.MinimockContainerCommitDone() &&
		m.MinimockContainerCreateDone() &&
		m.MinimockContainerDiffDone() &&
		m.MinimockContainerExecAttachDone() &&
		m.MinimockContainerExecCreateDone() &&
		m.MinimockContainerExecInspectDone() &&
		m.MinimockContainerExecResizeDone() &&
		m.MinimockContainerExecStartDone() &&
		m.MinimockContainerExportDone() &&
		m.MinimockContainerInspectDone() &&
		m.MinimockContainerInspectWithRawDone() &&
		m.MinimockContainerKillDone() &&
		m.MinimockContainerListDone() &&
		m.MinimockContainerLogsDone() &&
		m.MinimockContainerPauseDone() &&
		m.MinimockContainerRemoveDone() &&
		m.MinimockContainerRenameDone() &&
		m.MinimockContainerResizeDone() &&
		m.MinimockContainerRestartDone() &&
		m.MinimockContainerStartDone() &&
		m.MinimockContainerStatPathDone() &&
		m.MinimockContainerStatsDone() &&
		m.MinimockContainerStopDone() &&
		m.MinimockContainerTopDone() &&
		m.MinimockContainerUnpauseDone() &&
		m.MinimockContainerUpdateDone() &&
		m.MinimockContainerWaitDone() &&
		m.MinimockContainersPruneDone() &&
		m.MinimockCopyFromContainerDone() &&
		m.MinimockCopyToContainerDone() &&
		m.MinimockDaemonHostDone() &&
		m.MinimockDialHijackDone() &&
		m.MinimockDialerDone() &&
		m.MinimockDiskUsageDone() &&
		m.MinimockDistributionInspectDone() &&
		m.MinimockEventsDone() &&
		m.MinimockHTTPClientDone() &&
		m.MinimockImageBuildDone() &&
		m.MinimockImageCreateDone() &&
		m.MinimockImageHistoryDone() &&
		m.MinimockImageImportDone() &&
		m.MinimockImageInspectWithRawDone() &&
		m.MinimockImageListDone() &&
		m.MinimockImageLoadDone() &&
		m.MinimockImagePullDone() &&
		m.MinimockImagePushDone() &&
		m.MinimockImageRemoveDone() &&
		m.MinimockImageSaveDone() &&
		m.MinimockImageSearchDone() &&
		m.MinimockImageTagDone() &&
		m.MinimockImagesPruneDone() &&
		m.MinimockInfoDone() &&
		m.MinimockNegotiateAPIVersionDone() &&
		m.MinimockNegotiateAPIVersionPingDone() &&
		m.MinimockNetworkConnectDone() &&
		m.MinimockNetworkCreateDone() &&
		m.MinimockNetworkDisconnectDone() &&
		m.MinimockNetworkInspectDone() &&
		m.MinimockNetworkInspectWithRawDone() &&
		m.MinimockNetworkListDone() &&
		m.MinimockNetworkRemoveDone() &&
		m.MinimockNetworksPruneDone() &&
		m.MinimockNodeInspectWithRawDone() &&
		m.MinimockNodeListDone() &&
		m.MinimockNodeRemoveDone() &&
		m.MinimockNodeUpdateDone() &&
		m.MinimockPingDone() &&
		m.MinimockPluginCreateDone() &&
		m.MinimockPluginDisableDone() &&
		m.MinimockPluginEnableDone() &&
		m.MinimockPluginInspectWithRawDone() &&
		m.MinimockPluginInstallDone() &&
		m.MinimockPluginListDone() &&
		m.MinimockPluginPushDone() &&
		m.MinimockPluginRemoveDone() &&
		m.MinimockPluginSetDone() &&
		m.MinimockPluginUpgradeDone() &&
		m.MinimockRegistryLoginDone() &&
		m.MinimockSecretCreateDone() &&
		m.MinimockSecretInspectWithRawDone() &&
		m.MinimockSecretListDone() &&
		m.MinimockSecretRemoveDone() &&
		m.MinimockSecretUpdateDone() &&
		m.MinimockServerVersionDone() &&
		m.MinimockServiceCreateDone() &&
		m.MinimockServiceInspectWithRawDone() &&
		m.MinimockServiceListDone() &&
		m.MinimockServiceLogsDone() &&
		m.MinimockServiceRemoveDone() &&
		m.MinimockServiceUpdateDone() &&
		m.MinimockSwarmGetUnlockKeyDone() &&
		m.MinimockSwarmInitDone() &&
		m.MinimockSwarmInspectDone() &&
		m.MinimockSwarmJoinDone() &&
		m.MinimockSwarmLeaveDone() &&
		m.MinimockSwarmUnlockDone() &&
		m.MinimockSwarmUpdateDone() &&
		m.MinimockTaskInspectWithRawDone() &&
		m.MinimockTaskListDone() &&
		m.MinimockTaskLogsDone() &&
		m.MinimockVolumeCreateDone() &&
		m.MinimockVolumeInspectDone() &&
		m.MinimockVolumeInspectWithRawDone() &&
		m.MinimockVolumeListDone() &&
		m.MinimockVolumeRemoveDone() &&
		m.MinimockVolumesPruneDone()
}
