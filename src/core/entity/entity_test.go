package entity

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestImage_String(t *testing.T) {
	img := Image{
		Name: "foobar",
		Tag:  "latest",
	}

	s := img.String()

	assert.Equal(t, "foobar:latest", s)
}

func TestPortMapping_StringWithHostPort(t *testing.T) {
	pm := PortMapping{
		ContainerPort: 80,
		HostPort:      8080,
		Protocol:      "TCP",
	}

	s := pm.String()

	assert.Equal(t, "8080:80/TCP", s)
}

func TestPortMapping_StringWithoutHostPort(t *testing.T) {
	pm := PortMapping{
		ContainerPort: 80,
		Protocol:      "TCP",
	}

	s := pm.String()

	assert.Equal(t, "80/TCP", s)
}

func TestVolume_StringNamedVolume(t *testing.T) {
	v := Volume{
		Name:        "foobar",
		Destination: "/var/lib/foo",
		Source:      "/var/lib/docker/volumes/foobar/_data",
		Type:        "volume",
	}

	s := v.String()

	assert.Equal(t, "foobar:/var/lib/foo", s)
}

func TestVolume_StringUnnamedVolume(t *testing.T) {
	v := Volume{
		Name:        "abcd123456", // This would be the ID generated by Docker Engine
		Destination: "/var/lib/foo",
		Type:        "volume",
	}

	s := v.String()

	assert.Equal(t, "/var/lib/foo", s)
}

func TestVolume_StringBoundVolume(t *testing.T) {
	v := Volume{
		Source:      "/home/foo/bar",
		Destination: "/var/lib/foo",
		Mode:        "ro",
		Type:        "bind",
	}

	s := v.String()

	assert.Equal(t, "/home/foo/bar:/var/lib/foo:ro", s)
}
